.TH "libmd-src/potentials.libmd.cc" 3 "Thu Sep 3 2020" "Version -0." "libmd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libmd-src/potentials.libmd.cc
.SH SYNOPSIS
.br
.PP
\fC#include '\&.\&./libmd\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__libmd_src_file__\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<class X > X \fBCOULOMB\fP (X r, std::vector< \fBldf\fP > &parameters)"
.br
.RI "Coulomb potential functions\&. "
.ti -1c
.RI "template<class X > X \fBYUKAWA\fP (X r, std::vector< \fBldf\fP > &parameters)"
.br
.RI "Yukawa potential functions\&. "
.ti -1c
.RI "template<class X > X \fBHOOKEAN\fP (X r, std::vector< \fBldf\fP > &parameters)"
.br
.RI "Hookean potential functions\&. "
.ti -1c
.RI "template<class X > X \fBLJ\fP (X r, std::vector< \fBldf\fP > &parameters)"
.br
.RI "The famous Lennard-Jones potential functions\&. "
.ti -1c
.RI "template<class X > X \fBMORSE\fP (X r, std::vector< \fBldf\fP > &parameters)"
.br
.RI "Morse potential functions\&. "
.ti -1c
.RI "template<class X > X \fBFORCEDIPOLE\fP (X r, std::vector< \fBldf\fP > &parameters)"
.br
.RI "Force dipole potential functions\&. "
.ti -1c
.RI "template<class X > X \fBHOOKEANFORCEDIPOLE\fP (X r, std::vector< \fBldf\fP > &parameters)"
.br
.RI "Hookean force dipole potential functions\&. "
.ti -1c
.RI "template<class X > X \fBANHARMONICSPRING\fP (X r, std::vector< \fBldf\fP > &parameters)"
.br
.RI "Anharmonic spring potential functions\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __libmd_src_file__"

.PP
Definition at line 1 of file potentials\&.libmd\&.cc\&.
.SH "Function Documentation"
.PP 
.SS "template<class X > X ANHARMONICSPRING (X r, std::vector< \fBldf\fP > & parameters)"

.PP
Anharmonic spring potential functions\&. Anharmoninc spring: \[V_{\text{ANHARMONICSPRING}}(r)=\tfrac{k}{\alpha}{\lvert r-r_0 \rvert}^{\alpha}\] 
.br
 This function depends on three parameters: 
.PD 0

.IP "\(bu" 2
the 'spring' constant $k$  
.IP "\(bu" 2
the 'spring' rest length $r_0$  
.IP "\(bu" 2
the exponent $\alpha$  
.PP

.PP
Definition at line 107 of file potentials\&.libmd\&.cc\&.
.PP
.nf
108 {
119     const ldf k=parameters[0];
120     const ldf r0=parameters[1];
121     const ldf alpha=parameters[2];
122     return (k/alpha)*pow(abs(r-r0),alpha);
123 }
.fi
.PP
References abs(), and pow()\&.
.SS "template<class X > X COULOMB (X r, std::vector< \fBldf\fP > & parameters)"

.PP
Coulomb potential functions\&. Coulomb potential: \[V_{\text{COULOMB}}(r)=\frac{q}{r}\] 
.br
 This function depends on one parameter: 
.PD 0

.IP "\(bu" 2
The charge coupling between two partilces: $q$  
.PP

.PP
Definition at line 6 of file potentials\&.libmd\&.cc\&.
.PP
.nf
7 {
16     const ldf q=parameters[0];
17     return q/r;
18 }
.fi
.SS "template<class X > X FORCEDIPOLE (X r, std::vector< \fBldf\fP > & parameters)"

.PP
Force dipole potential functions\&. 
.PP
Definition at line 86 of file potentials\&.libmd\&.cc\&.
.PP
.nf
87 {
88     // exerts a constant force f = parameters[0]\&. Positive force => extension of dipole
89     const ldf f = parameters[0];
90     return -f*r;
91 }
.fi
.SS "template<class X > X HOOKEAN (X r, std::vector< \fBldf\fP > & parameters)"

.PP
Hookean potential functions\&. Hookian potential (Harmonic spring potential): \[V_{\text{HOOKEAN}}(r)=\tfrac{1}{2}k{(r-r_0)}^2\] 
.br
 This function depends on two parameters: 
.PD 0

.IP "\(bu" 2
the spring constant $k$  
.IP "\(bu" 2
the spring's rest length $r_0$  
.PP

.PP
Definition at line 36 of file potentials\&.libmd\&.cc\&.
.PP
.nf
37 {
47     const ldf k=parameters[0];
48     const ldf r0=parameters[1];
49     return k/2\&.0*pow(r-r0,2);
50 }
.fi
.PP
References pow()\&.
.SS "template<class X > X HOOKEANFORCEDIPOLE (X r, std::vector< \fBldf\fP > & parameters)"

.PP
Hookean force dipole potential functions\&. 
.PP
Definition at line 93 of file potentials\&.libmd\&.cc\&.
.PP
.nf
94 {
95     std::vector<ldf> sprparams(parameters\&.begin(),parameters\&.begin()+2);
96     std::vector<ldf> fdparams(parameters\&.begin()+2,parameters\&.begin()+3);
97 
98     if (parameters\&.size() == 3) return HOOKEAN(r, sprparams) + FORCEDIPOLE(r, fdparams);
99 
100     // if threshold exists: force dipole kicks in when force due to spring extension/compression is larger than threshold\&.
101     // positive f => threshold is in extension; negative f => threshold is in compression\&.
102     // threshold must be positive for this interpretation to hold\&.
103     const ldf threshold = parameters[3];
104     return HOOKEAN(r, sprparams) + (sprparams[0]*(r-sprparams[1])*fdparams[0]/std::abs(fdparams[0]) > threshold)*FORCEDIPOLE(r, fdparams);
105 }
.fi
.PP
References abs(), FORCEDIPOLE(), and HOOKEAN()\&.
.SS "template<class X > X LJ (X r, std::vector< \fBldf\fP > & parameters)"

.PP
The famous Lennard-Jones potential functions\&. The famous Lenard-Jones potential: \[V_{\text{LJ}}(r)=4 \epsilon \left({\left( \frac{\sigma}{r} \right)}^{12} - {\left( \frac{\sigma}{r} \right)}^6 \right) \] 
.br
 This function depends on two parameters: 
.PD 0

.IP "\(bu" 2
the coupling constant $\epsilon$  
.IP "\(bu" 2
the characteristic length scale $\sigma$  
.PP

.PP
Definition at line 52 of file potentials\&.libmd\&.cc\&.
.PP
.nf
53 {
63     const ldf e=parameters[0];
64     const ldf s=parameters[1];
65     return 4\&.0*e*(pow(s/r,12)-pow(s/r,6));
66 }
.fi
.PP
References pow()\&.
.SS "template<class X > X MORSE (X r, std::vector< \fBldf\fP > & parameters)"

.PP
Morse potential functions\&. Morse potential: \[V_{\text{MORSE}}(r)=d{\left(1-e^{a(r_e-r)}\right)}^2\] 
.br
 This function depends on three parameters: 
.PD 0

.IP "\(bu" 2
the dissociation energy $d$  
.IP "\(bu" 2
the width $a$  
.IP "\(bu" 2
the equilibrium bond distance $r_e$  
.PP

.PP
Definition at line 68 of file potentials\&.libmd\&.cc\&.
.PP
.nf
69 {
80     const ldf d=parameters[0];
81     const ldf a=parameters[1];
82     const ldf re=parameters[2];
83     return d*pow(1\&.0-exp(a*(re-r)),2);
84 }
.fi
.PP
References exp(), and pow()\&.
.SS "template<class X > X YUKAWA (X r, std::vector< \fBldf\fP > & parameters)"

.PP
Yukawa potential functions\&. Yukawa potential: \[V_{\text{YUKAWA}}(r)=\frac{b}{r e^{kr}}\] 
.br
 This function depends on two parameters: 
.PD 0

.IP "\(bu" 2
the coupling strength between two partilces $b$  
.IP "\(bu" 2
the Yukawa reciprocal length scale $k$  
.PP

.PP
Definition at line 20 of file potentials\&.libmd\&.cc\&.
.PP
.nf
21 {
31     const ldf b=parameters[0];
32     const ldf k=parameters[1];
33     return b/(r*exp(k*r));
34 }
.fi
.PP
References exp()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for libmd from the source code\&.
