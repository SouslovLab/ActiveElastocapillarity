<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structdual" kind="struct" language="C++" prot="public">
    <compoundname>dual</compoundname>
    <includes refid="libmd_8h" local="no">libmd.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" prot="public" static="no" mutable="no">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf dual::x</definition>
        <argsstring></argsstring>
        <name>x</name>
        <briefdescription>
<para>Function value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="250" column="9" bodyfile="libmd.h" bodystart="250" bodyend="-1"/>
        <referencedby refid="structdual_ac362963c9a244be51f5b1be969b1481c_1ac362963c9a244be51f5b1be969b1481c" compoundref="autodiff_8libmd_8cc" startline="13" endline="20">dual</referencedby>
        <referencedby refid="structdual_ae908dadc1eeea5e4992d7c28b7ae78f2_1ae908dadc1eeea5e4992d7c28b7ae78f2" compoundref="autodiff_8libmd_8cc" startline="25" endline="33">operator=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a2ab50ca152117a4e2de0215ce0d463a1_1a2ab50ca152117a4e2de0215ce0d463a1" compoundref="autodiff_8libmd_8cc" startline="54" endline="57">operator==</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a32092ec9e3070279926b37dc8c40b876_1a32092ec9e3070279926b37dc8c40b876" compoundref="autodiff_8libmd_8cc" startline="59" endline="62">operator!=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ac2306bb5d57500afce2ba0c55ffbf7a2_1ac2306bb5d57500afce2ba0c55ffbf7a2" compoundref="autodiff_8libmd_8cc" startline="64" endline="67">operator&lt;=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_aff574c089d0698fa5b26b3933962fba9_1aff574c089d0698fa5b26b3933962fba9" compoundref="autodiff_8libmd_8cc" startline="69" endline="72">operator&gt;=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_adacacd5ab97a9ed5ff4d66f748e49dca_1adacacd5ab97a9ed5ff4d66f748e49dca" compoundref="autodiff_8libmd_8cc" startline="74" endline="77">operator&lt;</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ad98340c551905837f302e32c67998876_1ad98340c551905837f302e32c67998876" compoundref="autodiff_8libmd_8cc" startline="79" endline="82">operator&gt;</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_adc401fe49f91ae1e919bcbfcc5ede801_1adc401fe49f91ae1e919bcbfcc5ede801" compoundref="autodiff_8libmd_8cc" startline="147" endline="150">operator-</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a5821edaf0916e5953069329d48429263_1a5821edaf0916e5953069329d48429263" compoundref="autodiff_8libmd_8cc" startline="152" endline="155">operator+</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a3dc3382f5a628e69c172a3b45b9d6cfb_1a3dc3382f5a628e69c172a3b45b9d6cfb" compoundref="autodiff_8libmd_8cc" startline="162" endline="165">operator*</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_acd51ff3854e9a4d5de25869cdba3f356_1acd51ff3854e9a4d5de25869cdba3f356" compoundref="autodiff_8libmd_8cc" startline="167" endline="170">operator/</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a860d7035050ddee6f20be6b40644f11f_1a860d7035050ddee6f20be6b40644f11f" compoundref="autodiff_8libmd_8cc" startline="172" endline="177">operator+=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a949cb5795c15a1f83396a26659966670_1a949cb5795c15a1f83396a26659966670" compoundref="autodiff_8libmd_8cc" startline="179" endline="184">operator-=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_af205152fd981e3fdb332806c633555cb_1af205152fd981e3fdb332806c633555cb" compoundref="autodiff_8libmd_8cc" startline="251" endline="256">operator*=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a3e0b0cb2dafd1000769dd938bd85f510_1a3e0b0cb2dafd1000769dd938bd85f510" compoundref="autodiff_8libmd_8cc" startline="258" endline="263">operator/=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" compoundref="autodiff_8libmd_8cc" startline="268" endline="272">sqrt</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ade909d25ab24d31221b8640c8c6e58c3_1ade909d25ab24d31221b8640c8c6e58c3" compoundref="autodiff_8libmd_8cc" startline="279" endline="283">exp</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" compoundref="autodiff_8libmd_8cc" startline="297" endline="300">log</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ae7305fd3e8a857970c0c733d86331fcf_1ae7305fd3e8a857970c0c733d86331fcf" compoundref="autodiff_8libmd_8cc" startline="302" endline="305">sin</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ad7bdaf61a457836d313298fa3b23aa23_1ad7bdaf61a457836d313298fa3b23aa23" compoundref="autodiff_8libmd_8cc" startline="307" endline="310">cos</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ad88f26473230730cf0f25ed75da0919a_1ad88f26473230730cf0f25ed75da0919a" compoundref="autodiff_8libmd_8cc" startline="312" endline="316">tan</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_abf47560a37aef7062cf7ac5a337f6648_1abf47560a37aef7062cf7ac5a337f6648" compoundref="autodiff_8libmd_8cc" startline="318" endline="321">sinh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a19401cc2673b8563b7683a7e61bbba8f_1a19401cc2673b8563b7683a7e61bbba8f" compoundref="autodiff_8libmd_8cc" startline="323" endline="326">cosh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_abbd200edacd1697a6bb86ddcbe9d6f02_1abbd200edacd1697a6bb86ddcbe9d6f02" compoundref="autodiff_8libmd_8cc" startline="328" endline="332">tanh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a73c9bf3c995cc3c4d03cf482e336dbc9_1a73c9bf3c995cc3c4d03cf482e336dbc9" compoundref="autodiff_8libmd_8cc" startline="334" endline="337">asin</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a040c41bf3dc05dcba9979d734c21baee_1a040c41bf3dc05dcba9979d734c21baee" compoundref="autodiff_8libmd_8cc" startline="339" endline="342">acos</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a26549f48667589d8f719aa26f45b8e36_1a26549f48667589d8f719aa26f45b8e36" compoundref="autodiff_8libmd_8cc" startline="344" endline="347">atan</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a76dcf65fff0eeed8ad43914e47357784_1a76dcf65fff0eeed8ad43914e47357784" compoundref="autodiff_8libmd_8cc" startline="349" endline="352">asinh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_af721ea82ca3508a32aa07785eda160db_1af721ea82ca3508a32aa07785eda160db" compoundref="autodiff_8libmd_8cc" startline="354" endline="357">acosh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ac6f307e61a8625bec9924605d5c05593_1ac6f307e61a8625bec9924605d5c05593" compoundref="autodiff_8libmd_8cc" startline="359" endline="362">atanh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" compoundref="autodiff_8libmd_8cc" startline="364" endline="367">abs</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" prot="public" static="no" mutable="no">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf dual::dx</definition>
        <argsstring></argsstring>
        <name>dx</name>
        <briefdescription>
<para>Function derivative value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="251" column="9" bodyfile="libmd.h" bodystart="251" bodyend="-1"/>
        <referencedby refid="structdual_ac362963c9a244be51f5b1be969b1481c_1ac362963c9a244be51f5b1be969b1481c" compoundref="autodiff_8libmd_8cc" startline="13" endline="20">dual</referencedby>
        <referencedby refid="structdual_ae908dadc1eeea5e4992d7c28b7ae78f2_1ae908dadc1eeea5e4992d7c28b7ae78f2" compoundref="autodiff_8libmd_8cc" startline="25" endline="33">operator=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_adc401fe49f91ae1e919bcbfcc5ede801_1adc401fe49f91ae1e919bcbfcc5ede801" compoundref="autodiff_8libmd_8cc" startline="147" endline="150">operator-</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a5821edaf0916e5953069329d48429263_1a5821edaf0916e5953069329d48429263" compoundref="autodiff_8libmd_8cc" startline="152" endline="155">operator+</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a3dc3382f5a628e69c172a3b45b9d6cfb_1a3dc3382f5a628e69c172a3b45b9d6cfb" compoundref="autodiff_8libmd_8cc" startline="162" endline="165">operator*</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_acd51ff3854e9a4d5de25869cdba3f356_1acd51ff3854e9a4d5de25869cdba3f356" compoundref="autodiff_8libmd_8cc" startline="167" endline="170">operator/</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a860d7035050ddee6f20be6b40644f11f_1a860d7035050ddee6f20be6b40644f11f" compoundref="autodiff_8libmd_8cc" startline="172" endline="177">operator+=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a949cb5795c15a1f83396a26659966670_1a949cb5795c15a1f83396a26659966670" compoundref="autodiff_8libmd_8cc" startline="179" endline="184">operator-=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_af205152fd981e3fdb332806c633555cb_1af205152fd981e3fdb332806c633555cb" compoundref="autodiff_8libmd_8cc" startline="251" endline="256">operator*=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a3e0b0cb2dafd1000769dd938bd85f510_1a3e0b0cb2dafd1000769dd938bd85f510" compoundref="autodiff_8libmd_8cc" startline="258" endline="263">operator/=</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" compoundref="autodiff_8libmd_8cc" startline="268" endline="272">sqrt</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ade909d25ab24d31221b8640c8c6e58c3_1ade909d25ab24d31221b8640c8c6e58c3" compoundref="autodiff_8libmd_8cc" startline="279" endline="283">exp</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" compoundref="autodiff_8libmd_8cc" startline="297" endline="300">log</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ae7305fd3e8a857970c0c733d86331fcf_1ae7305fd3e8a857970c0c733d86331fcf" compoundref="autodiff_8libmd_8cc" startline="302" endline="305">sin</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ad7bdaf61a457836d313298fa3b23aa23_1ad7bdaf61a457836d313298fa3b23aa23" compoundref="autodiff_8libmd_8cc" startline="307" endline="310">cos</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ad88f26473230730cf0f25ed75da0919a_1ad88f26473230730cf0f25ed75da0919a" compoundref="autodiff_8libmd_8cc" startline="312" endline="316">tan</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_abf47560a37aef7062cf7ac5a337f6648_1abf47560a37aef7062cf7ac5a337f6648" compoundref="autodiff_8libmd_8cc" startline="318" endline="321">sinh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a19401cc2673b8563b7683a7e61bbba8f_1a19401cc2673b8563b7683a7e61bbba8f" compoundref="autodiff_8libmd_8cc" startline="323" endline="326">cosh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_abbd200edacd1697a6bb86ddcbe9d6f02_1abbd200edacd1697a6bb86ddcbe9d6f02" compoundref="autodiff_8libmd_8cc" startline="328" endline="332">tanh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a73c9bf3c995cc3c4d03cf482e336dbc9_1a73c9bf3c995cc3c4d03cf482e336dbc9" compoundref="autodiff_8libmd_8cc" startline="334" endline="337">asin</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a040c41bf3dc05dcba9979d734c21baee_1a040c41bf3dc05dcba9979d734c21baee" compoundref="autodiff_8libmd_8cc" startline="339" endline="342">acos</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a26549f48667589d8f719aa26f45b8e36_1a26549f48667589d8f719aa26f45b8e36" compoundref="autodiff_8libmd_8cc" startline="344" endline="347">atan</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a76dcf65fff0eeed8ad43914e47357784_1a76dcf65fff0eeed8ad43914e47357784" compoundref="autodiff_8libmd_8cc" startline="349" endline="352">asinh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_af721ea82ca3508a32aa07785eda160db_1af721ea82ca3508a32aa07785eda160db" compoundref="autodiff_8libmd_8cc" startline="354" endline="357">acosh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ac6f307e61a8625bec9924605d5c05593_1ac6f307e61a8625bec9924605d5c05593" compoundref="autodiff_8libmd_8cc" startline="359" endline="362">atanh</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdual_aa490742539c960d01d34ec9763b93179_1aa490742539c960d01d34ec9763b93179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dual::dual</definition>
        <argsstring>()</argsstring>
        <name>dual</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Default constructor for dual, does nothing.</para>
        </inbodydescription>
        <location file="libmd.h" line="253" column="5" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="6" bodyend="11"/>
        <referencedby refid="structdual_a4d24f448fd2ec95c7d654d6161763420_1a4d24f448fd2ec95c7d654d6161763420" compoundref="autodiff_8libmd_8cc" startline="35" endline="41">operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="structdual_ac362963c9a244be51f5b1be969b1481c_1ac362963c9a244be51f5b1be969b1481c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dual::dual</definition>
        <argsstring>(ldf f, ldf fx=0.0)</argsstring>
        <name>dual</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>fx</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Constructor for dual, sets value (<computeroutput>x</computeroutput>) to <computeroutput>f</computeroutput> and derivative (<computeroutput>dx</computeroutput>) to <computeroutput>fx</computeroutput> (default: <computeroutput>fx</computeroutput>=0).</para>
        </inbodydescription>
        <location file="libmd.h" line="254" column="5" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="13" bodyend="20"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">x</references>
      </memberdef>
      <memberdef kind="function" id="structdual_ae908dadc1eeea5e4992d7c28b7ae78f2_1ae908dadc1eeea5e4992d7c28b7ae78f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual dual::operator=</definition>
        <argsstring>(dual G)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
<para>Assign operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Copies <computeroutput>G</computeroutput> to <computeroutput>this</computeroutput> and returns <computeroutput>*this</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="256" column="10" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="25" bodyend="33"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">x</references>
      </memberdef>
      <memberdef kind="function" id="structdual_a4d24f448fd2ec95c7d654d6161763420_1a4d24f448fd2ec95c7d654d6161763420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual dual::operator=</definition>
        <argsstring>(X a)</argsstring>
        <name>operator=</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Assign foreign type operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Sets value (<computeroutput>x</computeroutput>) to <computeroutput>a</computeroutput> and derivative (<computeroutput>dx</computeroutput>) to 0 and returns <computeroutput>*this</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="257" column="21" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="35" bodyend="41"/>
        <references refid="structdual_aa490742539c960d01d34ec9763b93179_1aa490742539c960d01d34ec9763b93179" compoundref="autodiff_8libmd_8cc" startline="6" endline="11">dual</references>
      </memberdef>
      <memberdef kind="function" id="structdual_ae1212c7c38280a75edc4fd45d3514474_1ae1212c7c38280a75edc4fd45d3514474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dual::operator X</definition>
        <argsstring>()</argsstring>
        <name>operator X</name>
        <briefdescription>
<para>Cast overload. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Cast operator, returns cast of value (<computeroutput>x</computeroutput>).</para>
        </inbodydescription>
        <location file="libmd.h" line="258" column="16" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="43" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This structure automatically differentiates first order. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>dual</label>
        <link refid="structdual"/>
      </node>
    </collaborationgraph>
    <location file="libmd.h" line="249" column="1" bodyfile="libmd.h" bodystart="248" bodyend="259"/>
    <listofallmembers>
      <member refid="structdual_aa490742539c960d01d34ec9763b93179_1aa490742539c960d01d34ec9763b93179" prot="public" virt="non-virtual"><scope>dual</scope><name>dual</name></member>
      <member refid="structdual_ac362963c9a244be51f5b1be969b1481c_1ac362963c9a244be51f5b1be969b1481c" prot="public" virt="non-virtual"><scope>dual</scope><name>dual</name></member>
      <member refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" prot="public" virt="non-virtual"><scope>dual</scope><name>dx</name></member>
      <member refid="structdual_ae1212c7c38280a75edc4fd45d3514474_1ae1212c7c38280a75edc4fd45d3514474" prot="public" virt="non-virtual"><scope>dual</scope><name>operator X</name></member>
      <member refid="structdual_ae908dadc1eeea5e4992d7c28b7ae78f2_1ae908dadc1eeea5e4992d7c28b7ae78f2" prot="public" virt="non-virtual"><scope>dual</scope><name>operator=</name></member>
      <member refid="structdual_a4d24f448fd2ec95c7d654d6161763420_1a4d24f448fd2ec95c7d654d6161763420" prot="public" virt="non-virtual"><scope>dual</scope><name>operator=</name></member>
      <member refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" prot="public" virt="non-virtual"><scope>dual</scope><name>x</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
