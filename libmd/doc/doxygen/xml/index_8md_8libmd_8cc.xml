<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="index_8md_8libmd_8cc" kind="file" language="C++">
    <compoundname>index.md.libmd.cc</compoundname>
    <includes refid="libmd_8h" local="yes">../../libmd.h</includes>
    <includedby refid="md_8libmd_8cc" local="yes">libmd-src/md.libmd.cc</includedby>
    <incdepgraph>
      <node id="10">
        <label>list</label>
      </node>
      <node id="1">
        <label>libmd-src/md/index.md.libmd.cc</label>
        <link refid="index_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>md/hooks.md.libmd.cc</label>
        <link refid="hooks_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>libmd-src/mongepatches.libmd.cc</label>
        <link refid="mongepatches_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="15">
        <label>limits</label>
      </node>
      <node id="39">
        <label>md/interaction.md.libmd.cc</label>
        <link refid="interaction_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>libmd-src/variadic_vars.libmd.cc</label>
        <link refid="variadic__vars_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>libmd-src/interact.libmd.cc</label>
        <link refid="interact_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>md/distances.md.libmd.cc</label>
        <link refid="distances_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>md/energy.md.libmd.cc</label>
        <link refid="energy_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>libmd-src/pairpotentials.libmd.cc</label>
        <link refid="pairpotentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>libmd-src/mp.libmd.cc</label>
        <link refid="mp_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="28">
        <label>libmd-src/box.libmd.cc</label>
        <link refid="box_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>md/bonds.md.libmd.cc</label>
        <link refid="bonds_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>libmd-src/integrators.libmd.cc</label>
        <link refid="integrators_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="24">
        <label>libmd-src/autodiff.libmd.cc</label>
        <link refid="autodiff_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>unordered_set</label>
      </node>
      <node id="29">
        <label>libmd-src/boundaryconditions.libmd.cc</label>
        <link refid="boundaryconditions_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>md/particles.md.libmd.cc</label>
        <link refid="particles_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>libmd-src/particle.libmd.cc</label>
        <link refid="particle_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>libmd-src/autodiff2.libmd.cc</label>
        <link refid="autodiff2_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>libmd-src/bcond.libmd.cc</label>
        <link refid="bcond_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>libmd-src/potentials.libmd.cc</label>
        <link refid="potentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>random</label>
      </node>
      <node id="21">
        <label>libmd-src/enums.libmd.h</label>
        <link refid="enums_8libmd_8h"/>
      </node>
      <node id="3">
        <label>cstdio</label>
      </node>
      <node id="48">
        <label>md/importexport.md.libmd.cc</label>
        <link refid="importexport_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>md/periodicity.md.libmd.cc</label>
        <link refid="periodicity_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>libmd-src/index.libmd.cc</label>
        <link refid="index_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>libmd-src/externalforces.libmd.cc</label>
        <link refid="externalforces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stack</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="47">
        <label>md/sp.md.libmd.cc</label>
        <link refid="sp_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>utility</label>
      </node>
      <node id="38">
        <label>libmd-src/md.libmd.cc</label>
        <link refid="md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="22">
        <label>libmd.cc</label>
        <link refid="libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../../libmd.h</label>
        <link refid="libmd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>libmd-src/hooks.libmd.cc</label>
        <link refid="hooks_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>unordered_map</label>
      </node>
      <node id="18">
        <label>chrono</label>
      </node>
      <node id="44">
        <label>md/setget.md.libmd.cc</label>
        <link refid="setget_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>libmd-src/mpmd.libmd.cc</label>
        <link refid="mpmd_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>set</label>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="41">
        <label>md/forces.md.libmd.cc</label>
        <link refid="forces_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>libmd-src/error.libmd.cc</label>
        <link refid="error_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>md/integrator.md.libmd.cc</label>
        <link refid="integrator_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstring</label>
      </node>
      <node id="20">
        <label>libmd-src/macros.libmd.h</label>
        <link refid="macros_8libmd_8h"/>
      </node>
      <node id="27">
        <label>libmd-src/forces.libmd.cc</label>
        <link refid="forces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>libmd-src/md/index.md.libmd.cc</label>
        <link refid="index_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>libmd-src/md/hooks.md.libmd.cc</label>
        <link refid="hooks_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>libmd-src/mongepatches.libmd.cc</label>
        <link refid="mongepatches_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>libmd-src/md/interaction.md.libmd.cc</label>
        <link refid="interaction_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>libmd-src/variadic_vars.libmd.cc</label>
        <link refid="variadic__vars_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>libmd-src/interact.libmd.cc</label>
        <link refid="interact_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>libmd-src/md/distances.md.libmd.cc</label>
        <link refid="distances_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>libmd-src/md/energy.md.libmd.cc</label>
        <link refid="energy_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>libmd-src/pairpotentials.libmd.cc</label>
        <link refid="pairpotentials_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>libmd-src/mp.libmd.cc</label>
        <link refid="mp_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>libmd-src/box.libmd.cc</label>
        <link refid="box_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>libmd-src/md/bonds.md.libmd.cc</label>
        <link refid="bonds_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>libmd-src/integrators.libmd.cc</label>
        <link refid="integrators_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>libmd-src/autodiff.libmd.cc</label>
        <link refid="autodiff_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>libmd-src/boundaryconditions.libmd.cc</label>
        <link refid="boundaryconditions_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>libmd-src/md/particles.md.libmd.cc</label>
        <link refid="particles_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>libmd-src/particle.libmd.cc</label>
        <link refid="particle_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>libmd-src/autodiff2.libmd.cc</label>
        <link refid="autodiff2_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>libmd-src/bcond.libmd.cc</label>
        <link refid="bcond_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>libmd-src/potentials.libmd.cc</label>
        <link refid="potentials_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>libmd-src/md/importexport.md.libmd.cc</label>
        <link refid="importexport_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>libmd-src/md/periodicity.md.libmd.cc</label>
        <link refid="periodicity_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>libmd-src/index.libmd.cc</label>
        <link refid="index_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>libmd-src/externalforces.libmd.cc</label>
        <link refid="externalforces_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>libmd-src/md/sp.md.libmd.cc</label>
        <link refid="sp_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>libmd-src/md.libmd.cc</label>
        <link refid="md_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>libmd.cc</label>
        <link refid="libmd_8cc"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>libmd.h</label>
        <link refid="libmd_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>libmd-src/hooks.libmd.cc</label>
        <link refid="hooks_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>libmd-src/md/setget.md.libmd.cc</label>
        <link refid="setget_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>libmd-src/mpmd.libmd.cc</label>
        <link refid="mpmd_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>libmd-src/md/forces.md.libmd.cc</label>
        <link refid="forces_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>libmd-src/error.libmd.cc</label>
        <link refid="error_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>libmd-src/md/integrator.md.libmd.cc</label>
        <link refid="integrator_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>libmd-src/forces.libmd.cc</label>
        <link refid="forces_8libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="index_8md_8libmd_8cc_a4384389855e24d346feb2e60f23afb0b_1a4384389855e24d346feb2e60f23afb0b" prot="public" static="no">
        <name>__libmd_src_file__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/md/index.md.libmd.cc" line="1" column="9" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="1" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="index_8md_8libmd_8cc_a4384389855e24d346feb2e60f23afb0b_1a4384389855e24d346feb2e60f23afb0b" refkind="member"><highlight class="preprocessor">#define<sp/>__libmd_src_file__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>libmd_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../libmd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="structmd_a9dfeaa20a38920b6f7e5b4221a815ac9_1a9dfeaa20a38920b6f7e5b4221a815ac9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmd_a9dfeaa20a38920b6f7e5b4221a815ac9_1a9dfeaa20a38920b6f7e5b4221a815ac9" kindref="member">md&lt;dim&gt;::thread_index_stick</ref>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(particles[i].xsk,particles[i].x,dim*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref>));</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structmd_a1ecf37a44dfa7401593a05b4aaed7d68_1a1ecf37a44dfa7401593a05b4aaed7d68" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmd_a1ecf37a44dfa7401593a05b4aaed7d68_1a1ecf37a44dfa7401593a05b4aaed7d68" kindref="member">md&lt;dim&gt;::index</ref>()</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;N;i++)<sp/>thread_index_stick(i);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(indexdata.method)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_i_n_d_e_x_a4ee2ed52ee6dd3e482fc53a8db54065f_1a4ee2ed52ee6dd3e482fc53a8db54065fa1b389b04cffcf182a4e4434b1ed1e8b8" kindref="member">INDEX::BRUTE_FORCE</ref>:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bruteforce();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_i_n_d_e_x_a4ee2ed52ee6dd3e482fc53a8db54065f_1a4ee2ed52ee6dd3e482fc53a8db54065fa29d1bce3f3830b4b695c1bf27f7f6529" kindref="member">INDEX::KD_TREE</ref>:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kdtree();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>avars.reindex=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structmd_aee6148340ce4331e84344df87f4e1800_1aee6148340ce4331e84344df87f4e1800" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structmd_aee6148340ce4331e84344df87f4e1800_1aee6148340ce4331e84344df87f4e1800" kindref="member">md&lt;dim&gt;::test_index</ref>()</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>rcomax=0.0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itype:network.library)<sp/>rcomax=std::max(rcomax,itype.rco);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>delta=<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(network.ssz-rcomax,2)/4.0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;N;i++)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>test=0.0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>d=0;d&lt;dim;d++)<sp/>test+=<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(dap(d,particles[i].xsk[d]-particles[i].x[d]),2);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(test&gt;delta)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>k-d<sp/>tree<sp/>***/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>median</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structmd_a8ab281a337c8448f30b808ef51be99e6_1a8ab281a337c8448f30b808ef51be99e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/><ref refid="structmd_a8ab281a337c8448f30b808ef51be99e6_1a8ab281a337c8448f30b808ef51be99e6" kindref="member">md&lt;dim&gt;::kdtree_build</ref><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>first,<sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>last,<sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>level)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last<sp/>-<sp/>first<sp/>==<sp/>1)<sp/></highlight><highlight class="comment">//<sp/>Leaf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>minimum<sp/>and<sp/>maximum<sp/>value<sp/>equal<sp/>to<sp/>the<sp/>position<sp/>of<sp/>this<sp/>particle<sp/>(Idx[first])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(indexdata.kdtreedata.Pmin[first],<sp/>particles[indexdata.kdtreedata.Idx[first]].x,<sp/>dim*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref>));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(indexdata.kdtreedata.Pmax[first],<sp/>particles[indexdata.kdtreedata.Idx[first]].x,<sp/>dim*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref>));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>m<sp/>=<sp/>(first+last)/2;<sp/></highlight><highlight class="comment">//<sp/>Median</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>sortedDim<sp/>=<sp/>indexdata.kdtreedata.DivideByDim[level];</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>the<sp/>index<sp/>of<sp/>particle<sp/>with<sp/>the<sp/>median<sp/>value<sp/>of<sp/>coordinate<sp/>dim<sp/>in<sp/>its<sp/>right<sp/>place,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>all<sp/>particles<sp/>with<sp/>lower<sp/>values<sp/>below,<sp/>and<sp/>all<sp/>with<sp/>higher<sp/>values<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::nth_element(indexdata.kdtreedata.Idx+first,<sp/>indexdata.kdtreedata.Idx+m,<sp/>indexdata.kdtreedata.Idx+last,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=](<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i,<sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/>return<sp/>particles[i].x[sortedDim]&lt;particles[j].x[sortedDim];});</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>build<sp/>subtrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>m1<sp/>=<sp/>kdtree_build(first,<sp/>m,<sp/>level+1),<sp/>m2<sp/>=<sp/>kdtree_build(m,<sp/>last,<sp/>level+1),<sp/>d;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>minimum<sp/>and<sp/>maximum<sp/>value<sp/>of<sp/>each<sp/>coordinate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>indexdata.kdtreedata.Pmin[m][d]<sp/>=<sp/>std::min(indexdata.kdtreedata.Pmin[m1][d],<sp/>indexdata.kdtreedata.Pmin[m2][d]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.kdtreedata.Pmax[m][d]<sp/>=<sp/>std::max(indexdata.kdtreedata.Pmax[m1][d],<sp/>indexdata.kdtreedata.Pmax[m2][d]);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="structmd_af6fbb4becba7012a1914b5eee637d718_1af6fbb4becba7012a1914b5eee637d718" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmd_af6fbb4becba7012a1914b5eee637d718_1af6fbb4becba7012a1914b5eee637d718" kindref="member">md&lt;dim&gt;::kdtree_index</ref><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>first1,<sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>last1,<sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>first2,<sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>last2)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>m1<sp/>=<sp/>(first1+last1)/2,<sp/>m2<sp/>=<sp/>(first2+last2)/2,<sp/>d;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>sszsq<sp/>=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(network.ssz,2);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>==<sp/>first1<sp/>||<sp/>m2<sp/>==<sp/>first2)<sp/></highlight><highlight class="comment">//<sp/>A<sp/>single<sp/>particle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>the<sp/>other<sp/>subtree<sp/>contains<sp/>either<sp/>one<sp/>or<sp/>two<sp/>particles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>!=<sp/>m2)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skinner(indexdata.kdtreedata.Idx[m1],<sp/>indexdata.kdtreedata.Idx[m2],<sp/>sszsq);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m2<sp/>!=<sp/>first2)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skinner(indexdata.kdtreedata.Idx[m1],<sp/>indexdata.kdtreedata.Idx[first2],<sp/>sszsq);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>!=<sp/>first1)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skinner(indexdata.kdtreedata.Idx[first1],<sp/>indexdata.kdtreedata.Idx[m2],<sp/>sszsq);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>distance<sp/>(squared)<sp/>between<sp/>subtrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>!=<sp/>m2)<sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>m1<sp/>==<sp/>m2<sp/>iff<sp/>the<sp/>subtrees<sp/>are<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>dissqBetweenSubtrees<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simbox.bcond[d]<sp/>==<sp/><ref refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" kindref="member">BCOND::PERIODIC</ref>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.kdtreedata.Pmin[m1][d]<sp/>&gt;<sp/>indexdata.kdtreedata.Pmax[m2][d])</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dissqBetweenSubtrees<sp/>+=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(std::min(indexdata.kdtreedata.Pmin[m1][d]<sp/>-<sp/>indexdata.kdtreedata.Pmax[m2][d],</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simbox.L[d]<sp/>+<sp/>indexdata.kdtreedata.Pmin[m2][d]<sp/>-<sp/>indexdata.kdtreedata.Pmax[m1][d]),<sp/>2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.kdtreedata.Pmin[m2][d]<sp/>&gt;<sp/>indexdata.kdtreedata.Pmax[m1][d])</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dissqBetweenSubtrees<sp/>+=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(std::min(indexdata.kdtreedata.Pmin[m2][d]<sp/>-<sp/>indexdata.kdtreedata.Pmax[m1][d],</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simbox.L[d]<sp/>+<sp/>indexdata.kdtreedata.Pmin[m1][d]<sp/>-<sp/>indexdata.kdtreedata.Pmax[m2][d]),<sp/>2);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.kdtreedata.Pmin[m1][d]<sp/>&gt;<sp/>indexdata.kdtreedata.Pmax[m2][d])</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dissqBetweenSubtrees<sp/>+=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(indexdata.kdtreedata.Pmin[m1][d]<sp/>-<sp/>indexdata.kdtreedata.Pmax[m2][d],<sp/>2);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.kdtreedata.Pmin[m2][d]<sp/>&gt;<sp/>indexdata.kdtreedata.Pmax[m1][d])</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dissqBetweenSubtrees<sp/>+=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(indexdata.kdtreedata.Pmin[m2][d]<sp/>-<sp/>indexdata.kdtreedata.Pmax[m1][d],<sp/>2);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dissqBetweenSubtrees<sp/>&gt;=<sp/>sszsq)<sp/></highlight><highlight class="comment">//<sp/>Return<sp/>if<sp/>the<sp/>subtrees<sp/>are<sp/>too<sp/>far<sp/>apart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>check<sp/>subtrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>kdtree_index(first1,<sp/>m1,<sp/>first2,<sp/>m2);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>kdtree_index(first1,<sp/>m1,<sp/>m2,<sp/>last2);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>!=<sp/>m2)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kdtree_index(m1,<sp/>last1,<sp/>first2,<sp/>m2);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>kdtree_index(m1,<sp/>last1,<sp/>m2,<sp/>last2);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="structmd_a7a10193ac507980720263dd95d259958_1a7a10193ac507980720263dd95d259958" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmd_a7a10193ac507980720263dd95d259958_1a7a10193ac507980720263dd95d259958" kindref="member">md&lt;dim&gt;::kdtree</ref>()</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simbox.useLshear)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simbox.bcond[d]<sp/>==<sp/><ref refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" kindref="member">BCOND::PERIODIC</ref><sp/>||<sp/>simbox.bcond[d]<sp/>==<sp/><ref refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946ae60ceea4da62257e104c5ac6aa720a31" kindref="member">BCOND::BOXSHEAR</ref>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="macros_8libmd_8h_a4d48c340b3c83579a8d58cb20a320f84_1a4d48c340b3c83579a8d58cb20a320f84" kindref="member">ERROR</ref>(</highlight><highlight class="stringliteral">&quot;the<sp/>kd-tree<sp/>algorithm<sp/>does<sp/>not<sp/>work<sp/>with<sp/>both<sp/>shear<sp/>and<sp/>periodic<sp/>boundary<sp/>conditions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.kdtreedata.Idx<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(indexdata.kdtreedata.Idx)<sp/>!=<sp/>N*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref>))</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>indexdata.kdtreedata.Idx;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>indexdata.kdtreedata.Pmin;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>indexdata.kdtreedata.Pmax;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.kdtreedata.Idx<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref>[N];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.kdtreedata.Pmin<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref>[N][dim];</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.kdtreedata.Pmax<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref>[N][dim];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>S[dim];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i,<sp/>n,<sp/>d,<sp/>b;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.kdtreedata.Idx[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decide<sp/>on<sp/>which<sp/>dimensions<sp/>to<sp/>divide<sp/>the<sp/>particles<sp/>by<sp/>at<sp/>each<sp/>recursion<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(S,<sp/>simbox.L,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(S));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>N;<sp/>n<sp/>&gt;<sp/>1;<sp/>i++,<sp/>n<sp/>=<sp/>(n+1)/2)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>largest<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>1;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(S[b]<sp/>&lt;<sp/>S[d])</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.kdtreedata.DivideByDim[i]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S[b]<sp/>/=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>that<sp/>the<sp/>system<sp/>is<sp/>nicely<sp/>split<sp/>into<sp/>two<sp/>parts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>kdtree_build(0,<sp/>N,<sp/>0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network.skins[i].clear();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>kdtree_index(0,<sp/>N,<sp/>0,<sp/>N);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>Cell<sp/>algorithm<sp/>***/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="structmd_a32d3e55bfbbebfbc73f0aca3242d8b3b_1a32d3e55bfbbebfbc73f0aca3242d8b3b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmd_a32d3e55bfbbebfbc73f0aca3242d8b3b_1a32d3e55bfbbebfbc73f0aca3242d8b3b" kindref="member">md&lt;dim&gt;::thread_cell</ref><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>c)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>nNeighbors;<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>neighbors<sp/>of<sp/>a<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CellIndices[dim];<sp/></highlight><highlight class="comment">//<sp/>Indices<sp/>(0<sp/>to<sp/>Q[d])<sp/>of<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>DissqToEdge[dim][3];<sp/></highlight><highlight class="comment">//<sp/>Distance<sp/>squared<sp/>from<sp/>particle<sp/>to<sp/>cell<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>NeighboringCells[indexdata.celldata.totNeighbors];<sp/></highlight><highlight class="comment">//<sp/>Cells<sp/>to<sp/>check<sp/>(accounting<sp/>for<sp/>boundary<sp/>conditions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>NeighborIndex[indexdata.celldata.totNeighbors];<sp/></highlight><highlight class="comment">//<sp/>Index<sp/>(0<sp/>to<sp/>totNeighbors)<sp/>of<sp/>neighboring<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>d,<sp/>i,<sp/>j,<sp/>k,<sp/>p1,<sp/>cellId;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ci;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>dissqToCorner,<sp/>sszsq<sp/>=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(network.ssz,2);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>cell<sp/>indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>dim-1;<sp/>d<sp/>&lt;<sp/><ref refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" kindref="member">UI_MAX</ref>;<sp/>d--)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" kindref="member">DEBUG_3</ref>(</highlight><highlight class="stringliteral">&quot;indexdata.celldata.Q[&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;]=<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>d,<sp/>indexdata.celldata.Q[d]);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CellIndices[d]<sp/>=<sp/>k<sp/>%<sp/>indexdata.celldata.Q[d];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>/=<sp/>indexdata.celldata.Q[d];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>all<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>nNeighbors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>indexdata.celldata.totNeighbors;<sp/>k++)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>cellId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim<sp/>&amp;&amp;<sp/>(((ci<sp/>=<sp/>CellIndices[d]+indexdata.celldata.IndexDelta[k][d])<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)indexdata.celldata.Q[d]<sp/>&amp;&amp;<sp/>ci<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>((simbox.bcond[d]<sp/>==<sp/><ref refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" kindref="member">BCOND::PERIODIC</ref><sp/>||<sp/>simbox.bcond[d]<sp/>==<sp/><ref refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946ae60ceea4da62257e104c5ac6aa720a31" kindref="member">BCOND::BOXSHEAR</ref>)<sp/>&amp;&amp;<sp/>indexdata.celldata.Q[d]<sp/>!=<sp/>2));<sp/>d++)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cellId<sp/>=<sp/>indexdata.celldata.Q[d]<sp/>*<sp/>cellId<sp/>+<sp/>(indexdata.celldata.Q[d]<sp/>+<sp/>ci)<sp/>%<sp/>indexdata.celldata.Q[d];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>==<sp/>dim)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>NeighboringCells[nNeighbors]<sp/>=<sp/>cellId;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NeighborIndex[nNeighbors]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNeighbors++;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>all<sp/>particles<sp/>in<sp/>this<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>indexdata.celldata.Cells[c].size()-1;<sp/>i<sp/>&lt;<sp/><ref refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" kindref="member">UI_MAX</ref>;<sp/>i--)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>p1<sp/>=<sp/>indexdata.celldata.Cells[c][i];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>all<sp/>remaining<sp/>particles<sp/>in<sp/>the<sp/>same<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i-1;<sp/>j<sp/>&lt;<sp/><ref refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" kindref="member">UI_MAX</ref>;<sp/>j--)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skinner(p1,<sp/>indexdata.celldata.Cells[c][j],<sp/>sszsq);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simbox.useLshear<sp/>||<sp/>indexdata.celldata.OutsideBox[i])</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>neighboring<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nNeighbors;<sp/>k++)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>all<sp/>particles<sp/>in<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>p2<sp/>:<sp/>indexdata.celldata.Cells[NeighboringCells[k]])</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skinner(p1,<sp/>p2,<sp/>sszsq);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>DissqToEdge[d][1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.celldata.Q[d]<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>(simbox.bcond[d]<sp/>==<sp/><ref refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" kindref="member">BCOND::PERIODIC</ref><sp/>||<sp/>simbox.bcond[d]<sp/>==<sp/><ref refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946ae60ceea4da62257e104c5ac6aa720a31" kindref="member">BCOND::BOXSHEAR</ref>))<sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case:<sp/>two<sp/>cells<sp/>and<sp/>pbc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DissqToEdge[d][0]<sp/>=<sp/>DissqToEdge[d][2]<sp/>=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(indexdata.celldata.CellSize[d]/2<sp/>-<sp/><ref refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" kindref="member">std::abs</ref>((CellIndices[d]+.5)<sp/>*<sp/>indexdata.celldata.CellSize[d]<sp/>-<sp/>simbox.L[d]/2<sp/>-<sp/>particles[p1].x[d]),<sp/>2);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>DissqToEdge[d][0]<sp/>=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(simbox.L[d]/2<sp/>+<sp/>particles[p1].x[d]<sp/>-<sp/>CellIndices[d]<sp/>*<sp/>indexdata.celldata.CellSize[d],<sp/>2);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DissqToEdge[d][2]<sp/>=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>((CellIndices[d]+1)<sp/>*<sp/>indexdata.celldata.CellSize[d]<sp/>-<sp/>simbox.L[d]/2<sp/>-<sp/>particles[p1].x[d],<sp/>2);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>neighboring<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>nNeighbors;<sp/>k++)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>distance<sp/>(squared)<sp/>to<sp/>closest<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dissqToCorner<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dissqToCorner<sp/>+=<sp/>DissqToEdge[d][indexdata.celldata.IndexDelta[NeighborIndex[k]][d]+1];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>cell<sp/>if<sp/>it<sp/>is<sp/>more<sp/>than<sp/>sszsq<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dissqToCorner<sp/>&lt;<sp/>sszsq)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>all<sp/>particles<sp/>in<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>p2<sp/>:<sp/>indexdata.celldata.Cells[NeighboringCells[k]])</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skinner(p1,<sp/>p2,<sp/>sszsq);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="structmd_af99c7ccc16292d4c1cdb07bd0c9ac895_1af99c7ccc16292d4c1cdb07bd0c9ac895" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmd_af99c7ccc16292d4c1cdb07bd0c9ac895_1af99c7ccc16292d4c1cdb07bd0c9ac895" kindref="member">md&lt;dim&gt;::cell</ref>()</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" kindref="member">DEBUG_2</ref>(</highlight><highlight class="stringliteral">&quot;exec<sp/>is<sp/>here&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(network.ssz<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="macros_8libmd_8h_a4d48c340b3c83579a8d58cb20a320f84_1a4d48c340b3c83579a8d58cb20a320f84" kindref="member">ERROR</ref>(</highlight><highlight class="stringliteral">&quot;skinsize<sp/>is<sp/>not<sp/>positive<sp/>(network.ssz<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" kindref="member">F_LDF</ref><sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">,<sp/>network.ssz);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>c,<sp/>d,<sp/>i,<sp/>k,<sp/>cellId;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>x;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;ui&gt;::iterator<sp/>a,<sp/>b;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>nc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simbox.useLshear)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>R;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>R<sp/>=<sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(dotprod&lt;dim&gt;(simbox.LshearInv[d],<sp/>simbox.LshearInv[d]),<sp/>-.5);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nc<sp/>*=<sp/>indexdata.celldata.Q[d]<sp/>=<sp/>(R<sp/>&lt;<sp/>network.ssz<sp/>?<sp/>1<sp/>:<sp/>R/network.ssz);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nc<sp/>*=<sp/>indexdata.celldata.Q[d]<sp/>=<sp/>(simbox.L[d]<sp/>&lt;<sp/>network.ssz<sp/>?<sp/>1<sp/>:<sp/>simbox.L[d]/network.ssz);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>number<sp/>of<sp/>cells<sp/>is<sp/>very<sp/>large<sp/>(ssz<sp/>very<sp/>small):<sp/>reduce<sp/>until<sp/>number<sp/>of<sp/>cells<sp/>is<sp/>in<sp/>the<sp/>order<sp/>of<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>nc<sp/>&gt;<sp/>N;<sp/>nc<sp/>/=<sp/>2)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>1;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.celldata.Q[k]<sp/>&lt;<sp/>indexdata.celldata.Q[d])</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.Q[k]<sp/>=<sp/>(indexdata.celldata.Q[k]+1)/2;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" kindref="member">DEBUG_3</ref>(</highlight><highlight class="stringliteral">&quot;indexdata.celldata.Q[&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;]<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(from<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" kindref="member">F_LDF</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" kindref="member">F_LDF</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>originally)&quot;</highlight><highlight class="normal">,<sp/>d,<sp/>indexdata.celldata.Q[d],<sp/>simbox.L[d],<sp/>network.ssz);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>and<sp/>check<sp/>cell<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.CellSize[d]<sp/>=<sp/>simbox.L[d]/indexdata.celldata.Q[d];</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>nCells<sp/>and<sp/>totNeighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>indexdata.celldata.nCells<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>indexdata.celldata.totNeighbors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.celldata.Q[d]<sp/>&gt;<sp/>1)<sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>dimensions<sp/>with<sp/>only<sp/>one<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>indexdata.celldata.nCells<sp/>*=<sp/>indexdata.celldata.Q[d];</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.totNeighbors<sp/>=<sp/>3*indexdata.celldata.totNeighbors+1;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>dynamic<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.celldata.IndexDelta<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(indexdata.celldata.Cells)<sp/>!=<sp/>indexdata.celldata.nCells*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(indexdata.celldata.IndexDelta)<sp/>!=<sp/>indexdata.celldata.totNeighbors*dim*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(indexdata.celldata.OutsideBox)<sp/>!=<sp/>N)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>indexdata.celldata.Cells;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>indexdata.celldata.IndexDelta;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>indexdata.celldata.OutsideBox;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.Cells<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;ui&gt;[indexdata.celldata.nCells];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.IndexDelta<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[indexdata.celldata.totNeighbors][dim];<sp/></highlight><highlight class="comment">//<sp/>Relative<sp/>position<sp/>of<sp/>neighboring<sp/>cell</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.OutsideBox<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">[N];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>all<sp/>(potential)<sp/>neighbors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>with<sp/>{0,0,...,0,+1}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.celldata.totNeighbors<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>memset(indexdata.celldata.IndexDelta[0],<sp/>0,<sp/>dim*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref>));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>dim-1;<sp/>indexdata.celldata.Q[d]<sp/>==<sp/>1;<sp/>d--);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.IndexDelta[0][d]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>indexdata.celldata.totNeighbors;<sp/>i++)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>memcpy(indexdata.celldata.IndexDelta[i],<sp/>indexdata.celldata.IndexDelta[i-1],<sp/>dim*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref>));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>all<sp/>trailing<sp/>+1&apos;s<sp/>to<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>dim-1;<sp/>d<sp/>&lt;<sp/>dim<sp/>&amp;&amp;<sp/>(indexdata.celldata.Q[d]<sp/>==<sp/>1<sp/>||<sp/>indexdata.celldata.IndexDelta[i][d]<sp/>==<sp/>1);<sp/>d--)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indexdata.celldata.Q[d]<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.IndexDelta[i][d]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increase<sp/>last<sp/>not-plus-one<sp/>by<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;<sp/>dim)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.IndexDelta[i][d]++;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>the<sp/>particles<sp/>in<sp/>their<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>indexdata.celldata.nCells;<sp/>c++)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.Cells[c].clear();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>cellId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.OutsideBox[i]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>dim;<sp/>d++)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>x<sp/>=<sp/>(simbox.useLshear<sp/>?<sp/>dotprod&lt;dim&gt;(simbox.LshearInv[d],<sp/>particles[i].x)<sp/>:<sp/>particles[i].x[d]<sp/>/<sp/>simbox.L[d]);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" kindref="member">std::abs</ref>(x)<sp/>&gt;<sp/>.5+1e-9)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>indexdata.celldata.OutsideBox[i]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cellId<sp/>=<sp/>indexdata.celldata.Q[d]<sp/>*<sp/>cellId<sp/>+<sp/>(x<sp/>&lt;<sp/>0<sp/>?<sp/>0<sp/>:<sp/>indexdata.celldata.Q[d]-1);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cellId<sp/>=<sp/>indexdata.celldata.Q[d]<sp/>*<sp/>cellId<sp/>+<sp/>(x<sp/>&lt;<sp/>-.5+3e-9<sp/>?<sp/>0<sp/>:<sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref>)(indexdata.celldata.Q[d]*(x+.5-2e-9)));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexdata.celldata.Cells[cellId].push_back(i);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network.skins[i].clear();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>c=0;c&lt;indexdata.celldata.nCells;c++)<sp/>thread_cell(c);</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="structmd_a32c3d5e5fe53203d0754ac9706bd0f21_1a32c3d5e5fe53203d0754ac9706bd0f21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmd_a32c3d5e5fe53203d0754ac9706bd0f21_1a32c3d5e5fe53203d0754ac9706bd0f21" kindref="member">md&lt;dim&gt;::bruteforce</ref>()</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" kindref="member">DEBUG_2</ref>(</highlight><highlight class="stringliteral">&quot;exec<sp/>is<sp/>here&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;N;i++)<sp/>network.skins[i].clear();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>sszsq=<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(network.ssz,2);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;N;i++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i+1;j&lt;N;j++)<sp/>skinner(i,<sp/>j,<sp/>sszsq);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="structmd_af4e3c55b8f17dfb069af504e6a2c750c_1af4e3c55b8f17dfb069af504e6a2c750c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structmd_af4e3c55b8f17dfb069af504e6a2c750c_1af4e3c55b8f17dfb069af504e6a2c750c" kindref="member">md&lt;dim&gt;::skinner</ref>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i,<sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j,<sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>sszsq)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distsq(i,j)<sp/>&gt;<sp/>sszsq)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>K=network.spid[i];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;ui,ui&gt;<sp/>it;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(K&lt;<ref refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" kindref="member">UI_MAX</ref><sp/>and<sp/>K==network.spid[j]<sp/>and<sp/>network.sptypes[network.superparticles[K].sptype].splookup.count(it=network.hash(network.superparticles[K].particles[i],network.superparticles[K].particles[j])))</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinteractionneighbor" kindref="compound">interactionneighbor</ref><sp/>in(j,network.sptypes[network.superparticles[K].sptype].splookup[it]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network.skins[i].push_back(in);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="structinteractionneighbor_a8a7a87a5baf3f17681168c65a37f3a71_1a8a7a87a5baf3f17681168c65a37f3a71" kindref="member">neighbor</ref>=i;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network.skins[j].push_back(in);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" kindref="member">DEBUG_3</ref>(</highlight><highlight class="stringliteral">&quot;super<sp/>particle<sp/>skinned<sp/>(i,j)=(&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;)<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>interaction<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,i,j,K,network.sptypes[network.superparticles[K].sptype].splookup[it]);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it=network.hash(particles[i].type,particles[j].type);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(network.lookup.count(it))</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinteractionneighbor" kindref="compound">interactionneighbor</ref><sp/>in(j,network.lookup[it]);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network.skins[i].push_back(in);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.<ref refid="structinteractionneighbor_a8a7a87a5baf3f17681168c65a37f3a71_1a8a7a87a5baf3f17681168c65a37f3a71" kindref="member">neighbor</ref>=i;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network.skins[j].push_back(in);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" kindref="member">DEBUG_3</ref>(</highlight><highlight class="stringliteral">&quot;normally<sp/>skinned<sp/>(i,j)=(&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;)<sp/>with<sp/>interaction<sp/>&quot;</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" kindref="member">F_UI</ref><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,i,j,network.lookup[it]);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="libmd-src/md/index.md.libmd.cc"/>
  </compounddef>
</doxygen>
