<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="autodiff2_8libmd_8cc" kind="file" language="C++">
    <compoundname>autodiff2.libmd.cc</compoundname>
    <includes refid="libmd_8h" local="yes">../libmd.h</includes>
    <includedby refid="libmd_8cc" local="yes">libmd.cc</includedby>
    <incdepgraph>
      <node id="10">
        <label>list</label>
      </node>
      <node id="42">
        <label>md/index.md.libmd.cc</label>
        <link refid="index_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>md/hooks.md.libmd.cc</label>
        <link refid="hooks_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>libmd-src/mongepatches.libmd.cc</label>
        <link refid="mongepatches_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="15">
        <label>limits</label>
      </node>
      <node id="39">
        <label>md/interaction.md.libmd.cc</label>
        <link refid="interaction_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>libmd-src/variadic_vars.libmd.cc</label>
        <link refid="variadic__vars_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>libmd-src/interact.libmd.cc</label>
        <link refid="interact_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>md/distances.md.libmd.cc</label>
        <link refid="distances_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>md/energy.md.libmd.cc</label>
        <link refid="energy_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>libmd-src/pairpotentials.libmd.cc</label>
        <link refid="pairpotentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>libmd-src/mp.libmd.cc</label>
        <link refid="mp_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="28">
        <label>libmd-src/box.libmd.cc</label>
        <link refid="box_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>md/bonds.md.libmd.cc</label>
        <link refid="bonds_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>libmd-src/integrators.libmd.cc</label>
        <link refid="integrators_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="24">
        <label>libmd-src/autodiff.libmd.cc</label>
        <link refid="autodiff_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>unordered_set</label>
      </node>
      <node id="29">
        <label>libmd-src/boundaryconditions.libmd.cc</label>
        <link refid="boundaryconditions_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>md/particles.md.libmd.cc</label>
        <link refid="particles_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>libmd-src/particle.libmd.cc</label>
        <link refid="particle_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libmd-src/autodiff2.libmd.cc</label>
        <link refid="autodiff2_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>libmd-src/bcond.libmd.cc</label>
        <link refid="bcond_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>libmd-src/potentials.libmd.cc</label>
        <link refid="potentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>random</label>
      </node>
      <node id="21">
        <label>libmd-src/enums.libmd.h</label>
        <link refid="enums_8libmd_8h"/>
      </node>
      <node id="3">
        <label>cstdio</label>
      </node>
      <node id="49">
        <label>md/importexport.md.libmd.cc</label>
        <link refid="importexport_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>md/periodicity.md.libmd.cc</label>
        <link refid="periodicity_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>libmd-src/index.libmd.cc</label>
        <link refid="index_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>libmd-src/externalforces.libmd.cc</label>
        <link refid="externalforces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stack</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="48">
        <label>md/sp.md.libmd.cc</label>
        <link refid="sp_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>utility</label>
      </node>
      <node id="38">
        <label>libmd-src/md.libmd.cc</label>
        <link refid="md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="22">
        <label>libmd.cc</label>
        <link refid="libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../libmd.h</label>
        <link refid="libmd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>libmd-src/hooks.libmd.cc</label>
        <link refid="hooks_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>unordered_map</label>
      </node>
      <node id="18">
        <label>chrono</label>
      </node>
      <node id="45">
        <label>md/setget.md.libmd.cc</label>
        <link refid="setget_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>libmd-src/mpmd.libmd.cc</label>
        <link refid="mpmd_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>set</label>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="41">
        <label>md/forces.md.libmd.cc</label>
        <link refid="forces_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>libmd-src/error.libmd.cc</label>
        <link refid="error_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>md/integrator.md.libmd.cc</label>
        <link refid="integrator_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstring</label>
      </node>
      <node id="20">
        <label>libmd-src/macros.libmd.h</label>
        <link refid="macros_8libmd_8h"/>
      </node>
      <node id="27">
        <label>libmd-src/forces.libmd.cc</label>
        <link refid="forces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22">
        <label>libmd-src/md/index.md.libmd.cc</label>
        <link refid="index_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>libmd-src/md/hooks.md.libmd.cc</label>
        <link refid="hooks_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>libmd-src/mongepatches.libmd.cc</label>
        <link refid="mongepatches_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>libmd-src/md/interaction.md.libmd.cc</label>
        <link refid="interaction_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>libmd-src/variadic_vars.libmd.cc</label>
        <link refid="variadic__vars_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>libmd-src/interact.libmd.cc</label>
        <link refid="interact_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>libmd-src/md/distances.md.libmd.cc</label>
        <link refid="distances_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>libmd-src/md/energy.md.libmd.cc</label>
        <link refid="energy_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>libmd-src/pairpotentials.libmd.cc</label>
        <link refid="pairpotentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>libmd-src/mp.libmd.cc</label>
        <link refid="mp_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>libmd-src/box.libmd.cc</label>
        <link refid="box_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>libmd-src/md/bonds.md.libmd.cc</label>
        <link refid="bonds_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>libmd-src/integrators.libmd.cc</label>
        <link refid="integrators_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>libmd-src/autodiff.libmd.cc</label>
        <link refid="autodiff_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>libmd-src/boundaryconditions.libmd.cc</label>
        <link refid="boundaryconditions_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>libmd-src/md/particles.md.libmd.cc</label>
        <link refid="particles_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>libmd-src/particle.libmd.cc</label>
        <link refid="particle_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libmd-src/autodiff2.libmd.cc</label>
        <link refid="autodiff2_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>libmd-src/bcond.libmd.cc</label>
        <link refid="bcond_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>libmd-src/potentials.libmd.cc</label>
        <link refid="potentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>libmd-src/md/importexport.md.libmd.cc</label>
        <link refid="importexport_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>libmd-src/md/periodicity.md.libmd.cc</label>
        <link refid="periodicity_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>libmd-src/index.libmd.cc</label>
        <link refid="index_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>libmd-src/externalforces.libmd.cc</label>
        <link refid="externalforces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>libmd-src/md/sp.md.libmd.cc</label>
        <link refid="sp_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>libmd-src/md.libmd.cc</label>
        <link refid="md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>libmd.cc</label>
        <link refid="libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>libmd.h</label>
        <link refid="libmd_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>libmd-src/hooks.libmd.cc</label>
        <link refid="hooks_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>libmd-src/md/setget.md.libmd.cc</label>
        <link refid="setget_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>libmd-src/mpmd.libmd.cc</label>
        <link refid="mpmd_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>libmd-src/md/forces.md.libmd.cc</label>
        <link refid="forces_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>libmd-src/error.libmd.cc</label>
        <link refid="error_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>libmd-src/md/integrator.md.libmd.cc</label>
        <link refid="integrator_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>libmd-src/forces.libmd.cc</label>
        <link refid="forces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="autodiff2_8libmd_8cc_a4384389855e24d346feb2e60f23afb0b_1a4384389855e24d346feb2e60f23afb0b" prot="public" static="no">
        <name>__libmd_src_file__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="1" column="9" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="1" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a7c33468652751ef3254fc0d07693b9a3_1a7c33468652751ef3254fc0d07693b9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="68" column="17" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="68" bodyend="71"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a7713d3f4d97a793b7bd2896faf1e78ad_1a7713d3f4d97a793b7bd2896faf1e78ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="73" column="17" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="73" bodyend="76"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ac92aef0e3dd7d7e795139c8fc57a9159_1ac92aef0e3dd7d7e795139c8fc57a9159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="78" column="12" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="78" bodyend="81"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_aa836cf8885d70c6b6c55016b8b45bca1_1aa836cf8885d70c6b6c55016b8b45bca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="83" column="17" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="83" bodyend="86"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a2b5a00837b8ca239c747ab319c1fbc28_1a2b5a00837b8ca239c747ab319c1fbc28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="88" column="12" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="88" bodyend="91"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_aae728b37711e2addad5824172779d2e4_1aae728b37711e2addad5824172779d2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="93" column="17" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="93" bodyend="96"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a5c90a73d2c7a9865d86c3d19c7a73c74_1a5c90a73d2c7a9865d86c3d19c7a73c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="98" column="19" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="98" bodyend="101"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a31052ec108c072e62aba8a64f389b66d_1a31052ec108c072e62aba8a64f389b66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="103" column="19" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="103" bodyend="106"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a14f6852240f95302ff5e374eff763e41_1a14f6852240f95302ff5e374eff763e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="108" column="14" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="108" bodyend="111"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ad3e861d603f24dfed41af581320d5d85_1ad3e861d603f24dfed41af581320d5d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="113" column="19" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="113" bodyend="116"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ae067b366a251a4f723542b068ffe9464_1ae067b366a251a4f723542b068ffe9464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="118" column="14" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="118" bodyend="121"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a8031518f762d61e7d675176582c630f2_1a8031518f762d61e7d675176582c630f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="123" column="19" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="123" bodyend="126"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ad92529fabfc72ecdd88d8f5ec1a88ed9_1ad92529fabfc72ecdd88d8f5ec1a88ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator==</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="128" column="19" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="128" bodyend="131"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a9c7c9978ee73b9ab2e3a15bc8bb58dc1_1a9c7c9978ee73b9ab2e3a15bc8bb58dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator!=</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="133" column="19" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="133" bodyend="136"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a6b2a2469f55758b4f363a00755df751c_1a6b2a2469f55758b4f363a00755df751c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="138" column="14" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="138" bodyend="141"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_aa6a5660b2d8ba4c9f04ba19c2fb6bdf4_1aa6a5660b2d8ba4c9f04ba19c2fb6bdf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="143" column="19" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="143" bodyend="146"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a6aae310719d127f275ec4b571ed74aa8_1a6aae310719d127f275ec4b571ed74aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="148" column="14" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="148" bodyend="151"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a3ab4eaafceba4d01b4f705dc4f863757_1a3ab4eaafceba4d01b4f705dc4f863757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="153" column="19" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="153" bodyend="156"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a12c61fea700fe5a50d0a4ea9881c911e_1a12c61fea700fe5a50d0a4ea9881c911e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator-</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="161" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ae8e8da74e9b68475e6e1f695a41376fc_1ae8e8da74e9b68475e6e1f695a41376fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator+</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="166" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="166" bodyend="175"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a6f74cf3ff0bcb599a477a8df331d9e45_1a6f74cf3ff0bcb599a477a8df331d9e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator-</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="177" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="177" bodyend="186"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a236a2ac3e5ba9298a1268e8bc2f8ca14_1a236a2ac3e5ba9298a1268e8bc2f8ca14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator*</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="188" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="188" bodyend="197"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a314d45d470d0886f331ce23d8ee6c608_1a314d45d470d0886f331ce23d8ee6c608" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator/</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="199" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="199" bodyend="209"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ab9e9d90c1f6749288ffdf324facf4d9b_1ab9e9d90c1f6749288ffdf324facf4d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator+=</definition>
        <argsstring>(duals&lt; dim &gt; &amp;F, duals&lt; dim &gt; G)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt; &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="211" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ada4554f491dc595a0c5808387b11c25f_1ada4554f491dc595a0c5808387b11c25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator-=</definition>
        <argsstring>(duals&lt; dim &gt; &amp;F, duals&lt; dim &gt; G)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt; &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="216" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_aae2e376d36e4accb086613b98cb0117e_1aae2e376d36e4accb086613b98cb0117e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator*=</definition>
        <argsstring>(duals&lt; dim &gt; &amp;F, duals&lt; dim &gt; G)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt; &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="221" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a0a5324c4340512013c6b5e6f927fa938_1a0a5324c4340512013c6b5e6f927fa938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator/=</definition>
        <argsstring>(duals&lt; dim &gt; &amp;F, duals&lt; dim &gt; G)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt; &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="226" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="226" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ae539d942f07170d7fe4fe1dbf4d70579_1ae539d942f07170d7fe4fe1dbf4d70579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator+</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="234" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="234" bodyend="238"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a440261fa5393755792990fb9f4f4a5e4_1a440261fa5393755792990fb9f4f4a5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator-</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="240" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="240" bodyend="244"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a1237f4bb813279266a32a2d5ce0de64d_1a1237f4bb813279266a32a2d5ce0de64d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator*</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="246" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="246" bodyend="255"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a7dfa2d1ceef64150247350537a0ce9e8_1a7dfa2d1ceef64150247350537a0ce9e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator/</definition>
        <argsstring>(duals&lt; dim &gt; F, X a)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="257" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="257" bodyend="266"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a16eda0f8f96e39d23964de2fd88a5fd9_1a16eda0f8f96e39d23964de2fd88a5fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator+</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator+</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="268" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a78519da42744c2c499144be2091cfda4_1a78519da42744c2c499144be2091cfda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator-</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator-</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="273" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a10cfbb08a6cd344df00eb34a43cf4180_1a10cfbb08a6cd344df00eb34a43cf4180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator*</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator*</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="278" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="278" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_acb613b0e2fd3504f5caa3601d012f500_1acb613b0e2fd3504f5caa3601d012f500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator/</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>operator/</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="283" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="283" bodyend="293"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_aeacff147fa4ff819f0c2746a68440b84_1aeacff147fa4ff819f0c2746a68440b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator+=</definition>
        <argsstring>(duals&lt; dim &gt; &amp;F, X a)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt; &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="295" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="295" bodyend="299"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a95b5c01288d402501b3bd4ee4e275932_1a95b5c01288d402501b3bd4ee4e275932" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator-=</definition>
        <argsstring>(duals&lt; dim &gt; &amp;F, X a)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt; &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="301" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="301" bodyend="305"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a4dba6c9fd82ab2d89d01484ecfb4d1c6_1a4dba6c9fd82ab2d89d01484ecfb4d1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator*=</definition>
        <argsstring>(duals&lt; dim &gt; &amp;F, X a)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt; &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="307" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ab28ede1a40dc0d0fb24bbab515e2f48c_1ab28ede1a40dc0d0fb24bbab515e2f48c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; operator/=</definition>
        <argsstring>(duals&lt; dim &gt; &amp;F, X a)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt; &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="312" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a23c702b1c84c5e7802e4cbbec9adf8f3_1a23c702b1c84c5e7802e4cbbec9adf8f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; sqrt</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>sqrt</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="320" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="320" bodyend="330"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; pow</definition>
        <argsstring>(duals&lt; dim &gt; F, X n)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="332" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="332" bodyend="342"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
        <referencedby refid="autodiff2_8libmd_8cc_a3613ffcafbd69764d1f93ae49da9a4c0_1a3613ffcafbd69764d1f93ae49da9a4c0" compoundref="autodiff2_8libmd_8cc" startline="476" endline="486">acos</referencedby>
        <referencedby refid="autodiff2_8libmd_8cc_af8fec088264d729bd68f3d5ae136a2e5_1af8fec088264d729bd68f3d5ae136a2e5" compoundref="autodiff2_8libmd_8cc" startline="512" endline="522">acosh</referencedby>
        <referencedby refid="autodiff2_8libmd_8cc_ab08e88b35f0ae1885dde6a2177165447_1ab08e88b35f0ae1885dde6a2177165447" compoundref="autodiff2_8libmd_8cc" startline="464" endline="474">asin</referencedby>
        <referencedby refid="autodiff2_8libmd_8cc_a3e432d0e6ac48dfb205d37b633f198bf_1a3e432d0e6ac48dfb205d37b633f198bf" compoundref="autodiff2_8libmd_8cc" startline="500" endline="510">asinh</referencedby>
        <referencedby refid="autodiff2_8libmd_8cc_ad34613b1a8f004357cbb88f9ff837d40_1ad34613b1a8f004357cbb88f9ff837d40" compoundref="autodiff2_8libmd_8cc" startline="488" endline="498">atan</referencedby>
        <referencedby refid="autodiff2_8libmd_8cc_af2eaeb0fa9e54fd7b35087f34787fccc_1af2eaeb0fa9e54fd7b35087f34787fccc" compoundref="autodiff2_8libmd_8cc" startline="524" endline="534">atanh</referencedby>
        <referencedby refid="autodiff2_8libmd_8cc_a2d6fafc4be5268548f5e8c0b9e427369_1a2d6fafc4be5268548f5e8c0b9e427369" compoundref="autodiff2_8libmd_8cc" startline="380" endline="390">log</referencedby>
        <referencedby refid="autodiff2_8libmd_8cc_a314d45d470d0886f331ce23d8ee6c608_1a314d45d470d0886f331ce23d8ee6c608" compoundref="autodiff2_8libmd_8cc" startline="199" endline="209">operator/</referencedby>
        <referencedby refid="autodiff2_8libmd_8cc_a47aa67793bd935c12583a73bce45e4a9_1a47aa67793bd935c12583a73bce45e4a9" compoundref="autodiff2_8libmd_8cc" startline="356" endline="366">pow</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_afad14878ad3fae669c4753da766d8c41_1afad14878ad3fae669c4753da766d8c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; exp</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>exp</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="344" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="344" bodyend="354"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a47aa67793bd935c12583a73bce45e4a9_1a47aa67793bd935c12583a73bce45e4a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; pow</definition>
        <argsstring>(X a, duals&lt; dim &gt; F)</argsstring>
        <name>pow</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="356" column="20" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="356" bodyend="366"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a2d6fafc4be5268548f5e8c0b9e427369_1a2d6fafc4be5268548f5e8c0b9e427369" compoundref="autodiff2_8libmd_8cc" startline="380" endline="390">log</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a5d3995fe522eb85a44b9f7dbc5e24371_1a5d3995fe522eb85a44b9f7dbc5e24371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; pow</definition>
        <argsstring>(duals&lt; dim &gt; F, duals&lt; dim &gt; G)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="368" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="368" bodyend="378"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a2d6fafc4be5268548f5e8c0b9e427369_1a2d6fafc4be5268548f5e8c0b9e427369" compoundref="autodiff2_8libmd_8cc" startline="380" endline="390">log</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a2d6fafc4be5268548f5e8c0b9e427369_1a2d6fafc4be5268548f5e8c0b9e427369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; log</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>log</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="380" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="380" bodyend="390"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
        <referencedby refid="autodiff2_8libmd_8cc_a47aa67793bd935c12583a73bce45e4a9_1a47aa67793bd935c12583a73bce45e4a9" compoundref="autodiff2_8libmd_8cc" startline="356" endline="366">pow</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a183a3c87e7b9ca9690a87752daec44ca_1a183a3c87e7b9ca9690a87752daec44ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; sin</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>sin</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="392" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="392" bodyend="402"/>
        <references refid="autodiff2_8libmd_8cc_ad6f2b141874ce8030478040b80d62c27_1ad6f2b141874ce8030478040b80d62c27" compoundref="autodiff2_8libmd_8cc" startline="404" endline="414">cos</references>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
        <referencedby refid="autodiff2_8libmd_8cc_ad6f2b141874ce8030478040b80d62c27_1ad6f2b141874ce8030478040b80d62c27" compoundref="autodiff2_8libmd_8cc" startline="404" endline="414">cos</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ad6f2b141874ce8030478040b80d62c27_1ad6f2b141874ce8030478040b80d62c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; cos</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>cos</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="404" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="404" bodyend="414"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a183a3c87e7b9ca9690a87752daec44ca_1a183a3c87e7b9ca9690a87752daec44ca" compoundref="autodiff2_8libmd_8cc" startline="392" endline="402">sin</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
        <referencedby refid="autodiff2_8libmd_8cc_a183a3c87e7b9ca9690a87752daec44ca_1a183a3c87e7b9ca9690a87752daec44ca" compoundref="autodiff2_8libmd_8cc" startline="392" endline="402">sin</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a1aa9165cb6c78149ee8382f13fcad3f4_1a1aa9165cb6c78149ee8382f13fcad3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; tan</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>tan</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="416" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="416" bodyend="426"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a78df6b014a019a6a2086deac6ea61ee6_1a78df6b014a019a6a2086deac6ea61ee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; sinh</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>sinh</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="428" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="428" bodyend="438"/>
        <references refid="autodiff2_8libmd_8cc_adf09f68c00e466a4d5121e5206a0ad6a_1adf09f68c00e466a4d5121e5206a0ad6a" compoundref="autodiff2_8libmd_8cc" startline="440" endline="450">cosh</references>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
        <referencedby refid="autodiff2_8libmd_8cc_adf09f68c00e466a4d5121e5206a0ad6a_1adf09f68c00e466a4d5121e5206a0ad6a" compoundref="autodiff2_8libmd_8cc" startline="440" endline="450">cosh</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_adf09f68c00e466a4d5121e5206a0ad6a_1adf09f68c00e466a4d5121e5206a0ad6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; cosh</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>cosh</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="440" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="440" bodyend="450"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a78df6b014a019a6a2086deac6ea61ee6_1a78df6b014a019a6a2086deac6ea61ee6" compoundref="autodiff2_8libmd_8cc" startline="428" endline="438">sinh</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
        <referencedby refid="autodiff2_8libmd_8cc_a78df6b014a019a6a2086deac6ea61ee6_1a78df6b014a019a6a2086deac6ea61ee6" compoundref="autodiff2_8libmd_8cc" startline="428" endline="438">sinh</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a74becbd03d0abf56d560897208dfaf2d_1a74becbd03d0abf56d560897208dfaf2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; tanh</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>tanh</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="452" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="452" bodyend="462"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ab08e88b35f0ae1885dde6a2177165447_1ab08e88b35f0ae1885dde6a2177165447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; asin</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>asin</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="464" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="464" bodyend="474"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a3613ffcafbd69764d1f93ae49da9a4c0_1a3613ffcafbd69764d1f93ae49da9a4c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; acos</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>acos</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="476" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="476" bodyend="486"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_ad34613b1a8f004357cbb88f9ff837d40_1ad34613b1a8f004357cbb88f9ff837d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; atan</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>atan</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="488" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="488" bodyend="498"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a3e432d0e6ac48dfb205d37b633f198bf_1a3e432d0e6ac48dfb205d37b633f198bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; asinh</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>asinh</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="500" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="500" bodyend="510"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_af8fec088264d729bd68f3d5ae136a2e5_1af8fec088264d729bd68f3d5ae136a2e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; acosh</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>acosh</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="512" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="512" bodyend="522"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_af2eaeb0fa9e54fd7b35087f34787fccc_1af2eaeb0fa9e54fd7b35087f34787fccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; atanh</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>atanh</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="524" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="524" bodyend="534"/>
        <references refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" compoundref="libmd_8h" startline="578">duals&lt; dim &gt;::dx</references>
        <references refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" compoundref="libmd_8h" startline="579">duals&lt; dim &gt;::dxdy</references>
        <references refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" compoundref="autodiff2_8libmd_8cc" startline="332" endline="342">pow</references>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff2_8libmd_8cc_a6efeb0b6ee5d74a0df81e0fb154b5b9e_1a6efeb0b6ee5d74a0df81e0fb154b5b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
            <declname>dim</declname>
            <defname>dim</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
        <definition>duals&lt;dim&gt; abs</definition>
        <argsstring>(duals&lt; dim &gt; F)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="structduals" kindref="compound">duals</ref>&lt; dim &gt;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff2.libmd.cc" line="536" column="18" bodyfile="libmd-src/autodiff2.libmd.cc" bodystart="536" bodyend="539"/>
        <references refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" compoundref="libmd_8h" startline="577">duals&lt; dim &gt;::x</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="autodiff2_8libmd_8cc_a4384389855e24d346feb2e60f23afb0b_1a4384389855e24d346feb2e60f23afb0b" refkind="member"><highlight class="preprocessor">#define<sp/>__libmd_src_file__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>libmd_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../libmd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="structduals_a38aca421eabfa2ece4e90f4842e1a070_1a38aca421eabfa2ece4e90f4842e1a070" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals_a38aca421eabfa2ece4e90f4842e1a070_1a38aca421eabfa2ece4e90f4842e1a070" kindref="member">duals&lt;dim&gt;::duals</ref>()</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="structduals_afedb005dbc6c9c13fedef8d345f89af0_1afedb005dbc6c9c13fedef8d345f89af0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals_a38aca421eabfa2ece4e90f4842e1a070_1a38aca421eabfa2ece4e90f4842e1a070" kindref="member">duals&lt;dim&gt;::duals</ref>(<ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>a)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>x=a;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(dx,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dx));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(dxdy,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dxdy));</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structduals_af27e460ea795b5402aa24fbc71ed9dcf_1af27e460ea795b5402aa24fbc71ed9dcf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals_a38aca421eabfa2ece4e90f4842e1a070_1a38aca421eabfa2ece4e90f4842e1a070" kindref="member">duals&lt;dim&gt;::duals</ref>(<ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>a,<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>x=a;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(dx,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dx));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(dxdy,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dxdy));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>dx[i]=1.0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structduals_a280562eb789f97395e5520380a44e340_1a280562eb789f97395e5520380a44e340" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="structduals_a280562eb789f97395e5520380a44e340_1a280562eb789f97395e5520380a44e340" kindref="member">duals&lt;dim&gt;::operator=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>x=G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dx,G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dx));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dxdy,G.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dxdy));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structduals_a4ff907c4d2ab9d3c878cb597d4575ee3_1a4ff907c4d2ab9d3c878cb597d4575ee3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="structduals_a280562eb789f97395e5520380a44e340_1a280562eb789f97395e5520380a44e340" kindref="member">duals&lt;dim&gt;::operator=</ref>(X<sp/>a)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">=<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>(a);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="structduals_a955a585836b2bc341e64b6e49734598d_1a955a585836b2bc341e64b6e49734598d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;::operator</ref><sp/>X()</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="autodiff2_8libmd_8cc_a7c33468652751ef3254fc0d07693b9a3_1a7c33468652751ef3254fc0d07693b9a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_a7c33468652751ef3254fc0d07693b9a3_1a7c33468652751ef3254fc0d07693b9a3" kindref="member">operator==</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>==G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="autodiff2_8libmd_8cc_a7713d3f4d97a793b7bd2896faf1e78ad_1a7713d3f4d97a793b7bd2896faf1e78ad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_a7713d3f4d97a793b7bd2896faf1e78ad_1a7713d3f4d97a793b7bd2896faf1e78ad" kindref="member">operator!=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>!=G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="autodiff2_8libmd_8cc_ac92aef0e3dd7d7e795139c8fc57a9159_1ac92aef0e3dd7d7e795139c8fc57a9159" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_ac92aef0e3dd7d7e795139c8fc57a9159_1ac92aef0e3dd7d7e795139c8fc57a9159" kindref="member">operator&lt;=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>&lt;=G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="autodiff2_8libmd_8cc_aa836cf8885d70c6b6c55016b8b45bca1_1aa836cf8885d70c6b6c55016b8b45bca1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_aa836cf8885d70c6b6c55016b8b45bca1_1aa836cf8885d70c6b6c55016b8b45bca1" kindref="member">operator&gt;=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>&gt;=G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="autodiff2_8libmd_8cc_a2b5a00837b8ca239c747ab319c1fbc28_1a2b5a00837b8ca239c747ab319c1fbc28" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_a2b5a00837b8ca239c747ab319c1fbc28_1a2b5a00837b8ca239c747ab319c1fbc28" kindref="member">operator&lt;</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>&lt;G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="autodiff2_8libmd_8cc_aae728b37711e2addad5824172779d2e4_1aae728b37711e2addad5824172779d2e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_aae728b37711e2addad5824172779d2e4_1aae728b37711e2addad5824172779d2e4" kindref="member">operator&gt;</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>&gt;G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="autodiff2_8libmd_8cc_a5c90a73d2c7a9865d86c3d19c7a73c74_1a5c90a73d2c7a9865d86c3d19c7a73c74" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_a7c33468652751ef3254fc0d07693b9a3_1a7c33468652751ef3254fc0d07693b9a3" kindref="member">operator==</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>==a;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="autodiff2_8libmd_8cc_a31052ec108c072e62aba8a64f389b66d_1a31052ec108c072e62aba8a64f389b66d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_a7713d3f4d97a793b7bd2896faf1e78ad_1a7713d3f4d97a793b7bd2896faf1e78ad" kindref="member">operator!=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>!=a;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="autodiff2_8libmd_8cc_a14f6852240f95302ff5e374eff763e41_1a14f6852240f95302ff5e374eff763e41" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_ac92aef0e3dd7d7e795139c8fc57a9159_1ac92aef0e3dd7d7e795139c8fc57a9159" kindref="member">operator&lt;=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>&lt;=a;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="autodiff2_8libmd_8cc_ad3e861d603f24dfed41af581320d5d85_1ad3e861d603f24dfed41af581320d5d85" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_aa836cf8885d70c6b6c55016b8b45bca1_1aa836cf8885d70c6b6c55016b8b45bca1" kindref="member">operator&gt;=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<sp/>X<sp/>a)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>&gt;=a;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="autodiff2_8libmd_8cc_ae067b366a251a4f723542b068ffe9464_1ae067b366a251a4f723542b068ffe9464" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_a2b5a00837b8ca239c747ab319c1fbc28_1a2b5a00837b8ca239c747ab319c1fbc28" kindref="member">operator&lt;</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<sp/>X<sp/>a)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>&lt;a;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="autodiff2_8libmd_8cc_a8031518f762d61e7d675176582c630f2_1a8031518f762d61e7d675176582c630f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_aae728b37711e2addad5824172779d2e4_1aae728b37711e2addad5824172779d2e4" kindref="member">operator&gt;</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<sp/>X<sp/>a)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>&gt;a;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="autodiff2_8libmd_8cc_ad92529fabfc72ecdd88d8f5ec1a88ed9_1ad92529fabfc72ecdd88d8f5ec1a88ed9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_a7c33468652751ef3254fc0d07693b9a3_1a7c33468652751ef3254fc0d07693b9a3" kindref="member">operator==</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a==F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="autodiff2_8libmd_8cc_a9c7c9978ee73b9ab2e3a15bc8bb58dc1_1a9c7c9978ee73b9ab2e3a15bc8bb58dc1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_a7713d3f4d97a793b7bd2896faf1e78ad_1a7713d3f4d97a793b7bd2896faf1e78ad" kindref="member">operator!=</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a!=F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="autodiff2_8libmd_8cc_a6b2a2469f55758b4f363a00755df751c_1a6b2a2469f55758b4f363a00755df751c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_ac92aef0e3dd7d7e795139c8fc57a9159_1ac92aef0e3dd7d7e795139c8fc57a9159" kindref="member">operator&lt;=</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a&lt;=F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="autodiff2_8libmd_8cc_aa6a5660b2d8ba4c9f04ba19c2fb6bdf4_1aa6a5660b2d8ba4c9f04ba19c2fb6bdf4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_aa836cf8885d70c6b6c55016b8b45bca1_1aa836cf8885d70c6b6c55016b8b45bca1" kindref="member">operator&gt;=</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a&gt;=F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="autodiff2_8libmd_8cc_a6aae310719d127f275ec4b571ed74aa8_1a6aae310719d127f275ec4b571ed74aa8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_a2b5a00837b8ca239c747ab319c1fbc28_1a2b5a00837b8ca239c747ab319c1fbc28" kindref="member">operator&lt;</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a&lt;F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="autodiff2_8libmd_8cc_a3ab4eaafceba4d01b4f705dc4f863757_1a3ab4eaafceba4d01b4f705dc4f863757" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff2_8libmd_8cc_aae728b37711e2addad5824172779d2e4_1aae728b37711e2addad5824172779d2e4" kindref="member">operator&gt;</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a&gt;F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>operations<sp/>with<sp/>other<sp/>duals&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="autodiff2_8libmd_8cc_a12c61fea700fe5a50d0a4ea9881c911e_1a12c61fea700fe5a50d0a4ea9881c911e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a12c61fea700fe5a50d0a4ea9881c911e_1a12c61fea700fe5a50d0a4ea9881c911e" kindref="member">operator-</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F*(-1.0);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="autodiff2_8libmd_8cc_ae8e8da74e9b68475e6e1f695a41376fc_1ae8e8da74e9b68475e6e1f695a41376fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ae8e8da74e9b68475e6e1f695a41376fc_1ae8e8da74e9b68475e6e1f695a41376fc" kindref="member">operator+</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>+G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]+G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]+G.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="autodiff2_8libmd_8cc_a6f74cf3ff0bcb599a477a8df331d9e45_1a6f74cf3ff0bcb599a477a8df331d9e45" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a12c61fea700fe5a50d0a4ea9881c911e_1a12c61fea700fe5a50d0a4ea9881c911e" kindref="member">operator-</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>-G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;<sp/>i++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]-G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]-G.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="autodiff2_8libmd_8cc_a236a2ac3e5ba9298a1268e8bc2f8ca14_1a236a2ac3e5ba9298a1268e8bc2f8ca14" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a236a2ac3e5ba9298a1268e8bc2f8ca14_1a236a2ac3e5ba9298a1268e8bc2f8ca14" kindref="member">operator* </ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>+F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*G.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]+F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="autodiff2_8libmd_8cc_a314d45d470d0886f331ce23d8ee6c608_1a314d45d470d0886f331ce23d8ee6c608" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a314d45d470d0886f331ce23d8ee6c608_1a314d45d470d0886f331ce23d8ee6c608" kindref="member">operator/</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>H(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>/G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>g2=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2),g3=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,3);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=(F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>-F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i])/g2;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=(2.0*F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]-G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*G.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]-G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]))/g3;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="autodiff2_8libmd_8cc_ab9e9d90c1f6749288ffdf324facf4d9b_1ab9e9d90c1f6749288ffdf324facf4d9b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ab9e9d90c1f6749288ffdf324facf4d9b_1ab9e9d90c1f6749288ffdf324facf4d9b" kindref="member">operator+=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>&amp;<sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F=F+G;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="autodiff2_8libmd_8cc_ada4554f491dc595a0c5808387b11c25f_1ada4554f491dc595a0c5808387b11c25f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ada4554f491dc595a0c5808387b11c25f_1ada4554f491dc595a0c5808387b11c25f" kindref="member">operator-=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>&amp;<sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F=F-G;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="autodiff2_8libmd_8cc_aae2e376d36e4accb086613b98cb0117e_1aae2e376d36e4accb086613b98cb0117e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_aae2e376d36e4accb086613b98cb0117e_1aae2e376d36e4accb086613b98cb0117e" kindref="member">operator*=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>&amp;<sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F=F*G;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="autodiff2_8libmd_8cc_a0a5324c4340512013c6b5e6f927fa938_1a0a5324c4340512013c6b5e6f927fa938" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a0a5324c4340512013c6b5e6f927fa938_1a0a5324c4340512013c6b5e6f927fa938" kindref="member">operator/=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>&amp;<sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F=F/G;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>operations<sp/>with<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="autodiff2_8libmd_8cc_ae539d942f07170d7fe4fe1dbf4d70579_1ae539d942f07170d7fe4fe1dbf4d70579" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ae8e8da74e9b68475e6e1f695a41376fc_1ae8e8da74e9b68475e6e1f695a41376fc" kindref="member">operator+</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>+=a;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="autodiff2_8libmd_8cc_a440261fa5393755792990fb9f4f4a5e4_1a440261fa5393755792990fb9f4f4a5e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a12c61fea700fe5a50d0a4ea9881c911e_1a12c61fea700fe5a50d0a4ea9881c911e" kindref="member">operator-</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>-=a;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="autodiff2_8libmd_8cc_a1237f4bb813279266a32a2d5ce0de64d_1a1237f4bb813279266a32a2d5ce0de64d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a236a2ac3e5ba9298a1268e8bc2f8ca14_1a236a2ac3e5ba9298a1268e8bc2f8ca14" kindref="member">operator*</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*=a;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*=a;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=0;j&lt;dim;j++)<sp/>F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*=a;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="autodiff2_8libmd_8cc_a7dfa2d1ceef64150247350537a0ce9e8_1a7dfa2d1ceef64150247350537a0ce9e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a314d45d470d0886f331ce23d8ee6c608_1a314d45d470d0886f331ce23d8ee6c608" kindref="member">operator/</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>/=a;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]/=a;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=0;j&lt;dim;j++)<sp/>F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]/=a;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="autodiff2_8libmd_8cc_a16eda0f8f96e39d23964de2fd88a5fd9_1a16eda0f8f96e39d23964de2fd88a5fd9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ae8e8da74e9b68475e6e1f695a41376fc_1ae8e8da74e9b68475e6e1f695a41376fc" kindref="member">operator+</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F+a;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="autodiff2_8libmd_8cc_a78519da42744c2c499144be2091cfda4_1a78519da42744c2c499144be2091cfda4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a12c61fea700fe5a50d0a4ea9881c911e_1a12c61fea700fe5a50d0a4ea9881c911e" kindref="member">operator-</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-F)+a;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="autodiff2_8libmd_8cc_a10cfbb08a6cd344df00eb34a43cf4180_1a10cfbb08a6cd344df00eb34a43cf4180" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a236a2ac3e5ba9298a1268e8bc2f8ca14_1a236a2ac3e5ba9298a1268e8bc2f8ca14" kindref="member">operator*</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F*a;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="autodiff2_8libmd_8cc_acb613b0e2fd3504f5caa3601d012f500_1acb613b0e2fd3504f5caa3601d012f500" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a314d45d470d0886f331ce23d8ee6c608_1a314d45d470d0886f331ce23d8ee6c608" kindref="member">operator/</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(a/F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>f2=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2),f3=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,3);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=-a*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]/f2;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=a*(2.0*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]-F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j])/f3;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="autodiff2_8libmd_8cc_aeacff147fa4ff819f0c2746a68440b84_1aeacff147fa4ff819f0c2746a68440b84" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ab9e9d90c1f6749288ffdf324facf4d9b_1ab9e9d90c1f6749288ffdf324facf4d9b" kindref="member">operator+=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>&amp;<sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>+=a;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="autodiff2_8libmd_8cc_a95b5c01288d402501b3bd4ee4e275932_1a95b5c01288d402501b3bd4ee4e275932" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ada4554f491dc595a0c5808387b11c25f_1ada4554f491dc595a0c5808387b11c25f" kindref="member">operator-=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>&amp;<sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>-=a;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="autodiff2_8libmd_8cc_a4dba6c9fd82ab2d89d01484ecfb4d1c6_1a4dba6c9fd82ab2d89d01484ecfb4d1c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_aae2e376d36e4accb086613b98cb0117e_1aae2e376d36e4accb086613b98cb0117e" kindref="member">operator*=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>&amp;<sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F=F*a;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="autodiff2_8libmd_8cc_ab28ede1a40dc0d0fb24bbab515e2f48c_1ab28ede1a40dc0d0fb24bbab515e2f48c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a0a5324c4340512013c6b5e6f927fa938_1a0a5324c4340512013c6b5e6f927fa938" kindref="member">operator/=</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref>&amp;<sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F=F/a;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="autodiff2_8libmd_8cc_a23c702b1c84c5e7802e4cbbec9adf8f3_1a23c702b1c84c5e7802e4cbbec9adf8f3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a23c702b1c84c5e7802e4cbbec9adf8f3_1a23c702b1c84c5e7802e4cbbec9adf8f3" kindref="member">sqrt</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>r=<ref refid="autodiff2_8libmd_8cc_a23c702b1c84c5e7802e4cbbec9adf8f3_1a23c702b1c84c5e7802e4cbbec9adf8f3" kindref="member">std::sqrt</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(r);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]/2.0/r;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=(F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]/2.0/F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>)/2.0/r;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">pow</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,X<sp/>n)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,n));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z1=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,n-1),z2=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,n-2);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*n*z1;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=n*(F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>+(n-1)*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j])*z2;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="autodiff2_8libmd_8cc_afad14878ad3fae669c4753da766d8c41_1afad14878ad3fae669c4753da766d8c41" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_afad14878ad3fae669c4753da766d8c41_1afad14878ad3fae669c4753da766d8c41" kindref="member">exp</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z=<ref refid="autodiff2_8libmd_8cc_afad14878ad3fae669c4753da766d8c41_1afad14878ad3fae669c4753da766d8c41" kindref="member">std::exp</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(z);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*z;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=(F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j])*z;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="autodiff2_8libmd_8cc_a47aa67793bd935c12583a73bce45e4a9_1a47aa67793bd935c12583a73bce45e4a9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">pow</ref>(X<sp/>a,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(a,F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>),la=<ref refid="autodiff2_8libmd_8cc_a2d6fafc4be5268548f5e8c0b9e427369_1a2d6fafc4be5268548f5e8c0b9e427369" kindref="member">std::log</ref>(a);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(z);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*la*z;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=(F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*la)*la*z;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="autodiff2_8libmd_8cc_a5d3995fe522eb85a44b9f7dbc5e24371_1a5d3995fe522eb85a44b9f7dbc5e24371" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">pow</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F,<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>G)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>),lf=<ref refid="autodiff2_8libmd_8cc_a2d6fafc4be5268548f5e8c0b9e427369_1a2d6fafc4be5268548f5e8c0b9e427369" kindref="member">std::log</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(z);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=(G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*lf+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>/F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>)*z;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=((G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*lf+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>/F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>)*(G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*lf+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>/F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>)+G.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*lf+(F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*G.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]+F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*G.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>/F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>)/F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>)*z;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="autodiff2_8libmd_8cc_a2d6fafc4be5268548f5e8c0b9e427369_1a2d6fafc4be5268548f5e8c0b9e427369" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a2d6fafc4be5268548f5e8c0b9e427369_1a2d6fafc4be5268548f5e8c0b9e427369" kindref="member">log</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(<ref refid="autodiff2_8libmd_8cc_a2d6fafc4be5268548f5e8c0b9e427369_1a2d6fafc4be5268548f5e8c0b9e427369" kindref="member">std::log</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>f2=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]/F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=(F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j])/f2;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="autodiff2_8libmd_8cc_a183a3c87e7b9ca9690a87752daec44ca_1a183a3c87e7b9ca9690a87752daec44ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a183a3c87e7b9ca9690a87752daec44ca_1a183a3c87e7b9ca9690a87752daec44ca" kindref="member">sin</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>sf=<ref refid="autodiff2_8libmd_8cc_a183a3c87e7b9ca9690a87752daec44ca_1a183a3c87e7b9ca9690a87752daec44ca" kindref="member">std::sin</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>),cf=<ref refid="autodiff2_8libmd_8cc_ad6f2b141874ce8030478040b80d62c27_1ad6f2b141874ce8030478040b80d62c27" kindref="member">std::cos</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(sf);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*cf;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*cf-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*sf;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="autodiff2_8libmd_8cc_ad6f2b141874ce8030478040b80d62c27_1ad6f2b141874ce8030478040b80d62c27" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ad6f2b141874ce8030478040b80d62c27_1ad6f2b141874ce8030478040b80d62c27" kindref="member">cos</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>cf=<ref refid="autodiff2_8libmd_8cc_ad6f2b141874ce8030478040b80d62c27_1ad6f2b141874ce8030478040b80d62c27" kindref="member">std::cos</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>),sf=<ref refid="autodiff2_8libmd_8cc_a183a3c87e7b9ca9690a87752daec44ca_1a183a3c87e7b9ca9690a87752daec44ca" kindref="member">std::sin</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(cf);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*sf;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=-F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*sf-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*cf;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="autodiff2_8libmd_8cc_a1aa9165cb6c78149ee8382f13fcad3f4_1a1aa9165cb6c78149ee8382f13fcad3f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a1aa9165cb6c78149ee8382f13fcad3f4_1a1aa9165cb6c78149ee8382f13fcad3f4" kindref="member">tan</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>tf=<ref refid="autodiff2_8libmd_8cc_a1aa9165cb6c78149ee8382f13fcad3f4_1a1aa9165cb6c78149ee8382f13fcad3f4" kindref="member">std::tan</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(tf);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*(1.0+tf*tf);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=(F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*2.0*tf)*(1.0+tf*tf);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="autodiff2_8libmd_8cc_a78df6b014a019a6a2086deac6ea61ee6_1a78df6b014a019a6a2086deac6ea61ee6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a78df6b014a019a6a2086deac6ea61ee6_1a78df6b014a019a6a2086deac6ea61ee6" kindref="member">sinh</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>sf=<ref refid="autodiff2_8libmd_8cc_a78df6b014a019a6a2086deac6ea61ee6_1a78df6b014a019a6a2086deac6ea61ee6" kindref="member">std::sinh</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>),cf=<ref refid="autodiff2_8libmd_8cc_adf09f68c00e466a4d5121e5206a0ad6a_1adf09f68c00e466a4d5121e5206a0ad6a" kindref="member">std::cosh</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(sf);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*cf;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*cf+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*sf;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="autodiff2_8libmd_8cc_adf09f68c00e466a4d5121e5206a0ad6a_1adf09f68c00e466a4d5121e5206a0ad6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_adf09f68c00e466a4d5121e5206a0ad6a_1adf09f68c00e466a4d5121e5206a0ad6a" kindref="member">cosh</ref><sp/>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>cf=<ref refid="autodiff2_8libmd_8cc_adf09f68c00e466a4d5121e5206a0ad6a_1adf09f68c00e466a4d5121e5206a0ad6a" kindref="member">std::cosh</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>),sf=<ref refid="autodiff2_8libmd_8cc_a78df6b014a019a6a2086deac6ea61ee6_1a78df6b014a019a6a2086deac6ea61ee6" kindref="member">std::sinh</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(cf);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*sf;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*sf+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*cf;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="autodiff2_8libmd_8cc_a74becbd03d0abf56d560897208dfaf2d_1a74becbd03d0abf56d560897208dfaf2d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a74becbd03d0abf56d560897208dfaf2d_1a74becbd03d0abf56d560897208dfaf2d" kindref="member">tanh</ref><sp/>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>tf=<ref refid="autodiff2_8libmd_8cc_a74becbd03d0abf56d560897208dfaf2d_1a74becbd03d0abf56d560897208dfaf2d" kindref="member">std::tanh</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(tf);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*(1.0-tf*tf);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=(F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*2.0*tf)*(1.0-tf*tf);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="autodiff2_8libmd_8cc_ab08e88b35f0ae1885dde6a2177165447_1ab08e88b35f0ae1885dde6a2177165447" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ab08e88b35f0ae1885dde6a2177165447_1ab08e88b35f0ae1885dde6a2177165447" kindref="member">asin</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(<ref refid="autodiff2_8libmd_8cc_ab08e88b35f0ae1885dde6a2177165447_1ab08e88b35f0ae1885dde6a2177165447" kindref="member">std::asin</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z1=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(1.0-<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2),-0.5),z2=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(1.0-<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2),-1.5);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*z1;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*z1+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*z2;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="autodiff2_8libmd_8cc_a3613ffcafbd69764d1f93ae49da9a4c0_1a3613ffcafbd69764d1f93ae49da9a4c0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a3613ffcafbd69764d1f93ae49da9a4c0_1a3613ffcafbd69764d1f93ae49da9a4c0" kindref="member">acos</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(<ref refid="autodiff2_8libmd_8cc_a3613ffcafbd69764d1f93ae49da9a4c0_1a3613ffcafbd69764d1f93ae49da9a4c0" kindref="member">std::acos</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z1=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(1.0-<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2),-0.5),z2=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(1.0-<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2),-1.5);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*z1;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=-F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*z1-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*z2;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="autodiff2_8libmd_8cc_ad34613b1a8f004357cbb88f9ff837d40_1ad34613b1a8f004357cbb88f9ff837d40" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_ad34613b1a8f004357cbb88f9ff837d40_1ad34613b1a8f004357cbb88f9ff837d40" kindref="member">atan</ref><sp/>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(<ref refid="autodiff2_8libmd_8cc_ad34613b1a8f004357cbb88f9ff837d40_1ad34613b1a8f004357cbb88f9ff837d40" kindref="member">std::atan</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z=1.0/(1.0+<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*z;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=(F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]-F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*2.0*F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*z)*z;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="autodiff2_8libmd_8cc_a3e432d0e6ac48dfb205d37b633f198bf_1a3e432d0e6ac48dfb205d37b633f198bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a3e432d0e6ac48dfb205d37b633f198bf_1a3e432d0e6ac48dfb205d37b633f198bf" kindref="member">asinh</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(<ref refid="autodiff2_8libmd_8cc_a3e432d0e6ac48dfb205d37b633f198bf_1a3e432d0e6ac48dfb205d37b633f198bf" kindref="member">std::asinh</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z1=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(1.0+<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2),-0.5),z2=-<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(1.0+<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2),-1.5);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*z1;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*z1+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*z2;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="autodiff2_8libmd_8cc_af8fec088264d729bd68f3d5ae136a2e5_1af8fec088264d729bd68f3d5ae136a2e5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_af8fec088264d729bd68f3d5ae136a2e5_1af8fec088264d729bd68f3d5ae136a2e5" kindref="member">acosh</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(<ref refid="autodiff2_8libmd_8cc_af8fec088264d729bd68f3d5ae136a2e5_1af8fec088264d729bd68f3d5ae136a2e5" kindref="member">std::acosh</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z1=<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2)-1.0,-0.5),z2=-<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2)-1.0,-1.5);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*z1;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]*z1+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*z2;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="autodiff2_8libmd_8cc_af2eaeb0fa9e54fd7b35087f34787fccc_1af2eaeb0fa9e54fd7b35087f34787fccc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_af2eaeb0fa9e54fd7b35087f34787fccc_1af2eaeb0fa9e54fd7b35087f34787fccc" kindref="member">atanh</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>H(<ref refid="autodiff2_8libmd_8cc_af2eaeb0fa9e54fd7b35087f34787fccc_1af2eaeb0fa9e54fd7b35087f34787fccc" kindref="member">std::atanh</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>z<sp/>=<sp/>1.0/(1.0-<ref refid="autodiff2_8libmd_8cc_a6e8c84f1707cd26d96553b6f49556ee1_1a6e8c84f1707cd26d96553b6f49556ee1" kindref="member">std::pow</ref>(F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>,2));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>i=0;i&lt;dim;i++)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]=F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*z;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref><sp/>j=i;j&lt;dim;j++)<sp/>H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]=H.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[j][i]=(F.<ref refid="structduals_abd330d764f43b6d008479d6d2b2d6c23_1abd330d764f43b6d008479d6d2b2d6c23" kindref="member">dxdy</ref>[i][j]+F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[i]*F.<ref refid="structduals_a32ab27f54ca10418d9c8faecae56da0b_1a32ab27f54ca10418d9c8faecae56da0b" kindref="member">dx</ref>[j]*2.0*F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>*z)*z;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="autodiff2_8libmd_8cc_a6efeb0b6ee5d74a0df81e0fb154b5b9e_1a6efeb0b6ee5d74a0df81e0fb154b5b9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;ui<sp/>dim&gt;<sp/><ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/><ref refid="autodiff2_8libmd_8cc_a6efeb0b6ee5d74a0df81e0fb154b5b9e_1a6efeb0b6ee5d74a0df81e0fb154b5b9e" kindref="member">abs</ref>(<ref refid="structduals" kindref="compound">duals&lt;dim&gt;</ref><sp/>F)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structduals_af609d1d502f4673b396b9722fbd4ba70_1af609d1d502f4673b396b9722fbd4ba70" kindref="member">x</ref>&lt;0.0?-F:F;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="libmd-src/autodiff2.libmd.cc"/>
  </compounddef>
</doxygen>
