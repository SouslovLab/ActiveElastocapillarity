<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structmpmd" kind="struct" language="C++" prot="public">
    <compoundname>mpmd</compoundname>
    <basecompoundref refid="structmd" prot="public" virt="non-virtual">md&lt; dim &gt;</basecompoundref>
    <includes refid="libmd_8h" local="no">libmd.h</includes>
    <templateparamlist>
      <param>
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structmpmd_a9a36a6e6d025329ffbd9598a45b7a899_1a9a36a6e6d025329ffbd9598a45b7a899" prot="public" static="no" mutable="no">
        <type><ref refid="structmp" kindref="compound">mp</ref>&lt; dim &gt;</type>
        <definition>mp&lt;dim&gt; mpmd&lt; dim &gt;::patch</definition>
        <argsstring></argsstring>
        <name>patch</name>
        <briefdescription>
<para>Geometric monge patch information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="619" column="8" bodyfile="libmd.h" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_ac8988c39f3e4d3bd8caae112a38e6284_1ac8988c39f3e4d3bd8caae112a38e6284" prot="public" static="no" mutable="no">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::N</definition>
        <argsstring></argsstring>
        <name>N</name>
        <briefdescription>
<para>Number of particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="377" column="8" bodyfile="libmd.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_af795df0a6af938512e63ff4c137a6713_1af795df0a6af938512e63ff4c137a6713" prot="public" static="no" mutable="no">
        <type><ref refid="structbox" kindref="compound">box</ref>&lt; dim &gt;</type>
        <definition>box&lt;dim&gt; md&lt; dim &gt;::simbox</definition>
        <argsstring></argsstring>
        <name>simbox</name>
        <briefdescription>
<para>Simulation box. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="378" column="9" bodyfile="libmd.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_a5fd243c3af2cfca7c170e27b47b5ebb3_1a5fd243c3af2cfca7c170e27b47b5ebb3" prot="public" static="no" mutable="no">
        <type><ref refid="structbcond" kindref="compound">bcond</ref>&lt; dim &gt;</type>
        <definition>bcond&lt;dim&gt; md&lt; dim &gt;::boundary</definition>
        <argsstring></argsstring>
        <name>boundary</name>
        <briefdescription>
<para>Boundary conditions functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="379" column="11" bodyfile="libmd.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_a469039a73ed9af4d1bdddb8c3203acde_1a469039a73ed9af4d1bdddb8c3203acde" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structparticle" kindref="compound">particle</ref>&lt; dim &gt; &gt;</type>
        <definition>std::vector&lt;particle&lt;dim&gt; &gt; md&lt; dim &gt;::particles</definition>
        <argsstring></argsstring>
        <name>particles</name>
        <briefdescription>
<para>Particle array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="380" column="17" bodyfile="libmd.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_af03ae636b8618d85a9f7088077fef25d_1af03ae636b8618d85a9f7088077fef25d" prot="public" static="no" mutable="no">
        <type><ref refid="structinteract" kindref="compound">interact</ref></type>
        <definition>interact md&lt; dim &gt;::network</definition>
        <argsstring></argsstring>
        <name>network</name>
        <briefdescription>
<para>Interaction network. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="381" column="14" bodyfile="libmd.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_aae25c208ac39ab45d90cea9accf58ed8_1aae25c208ac39ab45d90cea9accf58ed8" prot="public" static="no" mutable="no">
        <type><ref refid="structindexer" kindref="compound">indexer</ref>&lt; dim &gt;</type>
        <definition>indexer&lt;dim&gt; md&lt; dim &gt;::indexdata</definition>
        <argsstring></argsstring>
        <name>indexdata</name>
        <briefdescription>
<para>Data structure for indexing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="382" column="13" bodyfile="libmd.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_a9a603fe30e2611cef18b6d597335610e_1a9a603fe30e2611cef18b6d597335610e" prot="public" static="no" mutable="no">
        <type><ref refid="structpairpotentials" kindref="compound">pairpotentials</ref></type>
        <definition>pairpotentials md&lt; dim &gt;::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
<para>Pair potential functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="383" column="20" bodyfile="libmd.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_a2997460875452413182c56784f50edaf_1a2997460875452413182c56784f50edaf" prot="public" static="no" mutable="no">
        <type><ref refid="structexternalforces" kindref="compound">externalforces</ref>&lt; dim &gt;</type>
        <definition>externalforces&lt;dim&gt; md&lt; dim &gt;::f</definition>
        <argsstring></argsstring>
        <name>f</name>
        <briefdescription>
<para>External forces functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="384" column="20" bodyfile="libmd.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_acafc604d84a611fc3df9115a92762312_1acafc604d84a611fc3df9115a92762312" prot="public" static="no" mutable="no">
        <type><ref refid="structhooker" kindref="compound">hooker</ref>&lt; dim &gt;</type>
        <definition>hooker&lt;dim&gt; md&lt; dim &gt;::hooks</definition>
        <argsstring></argsstring>
        <name>hooks</name>
        <briefdescription>
<para>Hook functor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="385" column="12" bodyfile="libmd.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_a649701c926568a12bc6fef1e182bdf23_1a649701c926568a12bc6fef1e182bdf23" prot="public" static="no" mutable="no">
        <type><ref refid="structintegrators" kindref="compound">integrators</ref></type>
        <definition>integrators md&lt; dim &gt;::integrator</definition>
        <argsstring></argsstring>
        <name>integrator</name>
        <briefdescription>
<para>Integration method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="386" column="17" bodyfile="libmd.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_a14a31e281d8e99cd7bd48b7249df2e05_1a14a31e281d8e99cd7bd48b7249df2e05" prot="public" static="no" mutable="no">
        <type><ref refid="structvariadic__vars" kindref="compound">variadic_vars</ref>&lt; dim &gt;</type>
        <definition>variadic_vars&lt;dim&gt; md&lt; dim &gt;::vvars</definition>
        <argsstring></argsstring>
        <name>vvars</name>
        <briefdescription>
<para>Bunch of variables for variadic functions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="387" column="19" bodyfile="libmd.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmd_ac28662bc989901609e51cccc668c780a_1ac28662bc989901609e51cccc668c780a" prot="public" static="no" mutable="no">
        <type><ref refid="structadditional__vars" kindref="compound">additional_vars</ref>&lt; dim &gt;</type>
        <definition>additional_vars&lt;dim&gt; md&lt; dim &gt;::avars</definition>
        <argsstring></argsstring>
        <name>avars</name>
        <briefdescription>
<para>Bunch of additonal variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd.h" line="388" column="21" bodyfile="libmd.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structmpmd_a8d8a7f180f8b2bc1a009eda40285f1ac_1a8d8a7f180f8b2bc1a009eda40285f1ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf mpmd&lt; dim &gt;::embedded_distsq</definition>
        <argsstring>(ui p1, ui p2)</argsstring>
        <name>embedded_distsq</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate distances between two particles (squared) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the embedded distance squared between particles <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="647" column="9" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="6" bodyend="12"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_ac66cf03a8c7039fd07981680b9b36f61_1ac66cf03a8c7039fd07981680b9b36f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf mpmd&lt; dim &gt;::embedded_distsq</definition>
        <argsstring>(ldf x1[dim], ldf x2[dim])</argsstring>
        <name>embedded_distsq</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x1</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x2</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Calculate distances between two particles (squared) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the embedded distance squared between coordinates <computeroutput>x1</computeroutput> and <computeroutput>x2</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="648" column="9" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="14" bodyend="20"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_ac63e3c2afe6cf48636858b95d94c14c7_1ac63e3c2afe6cf48636858b95d94c14c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf mpmd&lt; dim &gt;::embedded_distsq</definition>
        <argsstring>(ui p1, ldf x2[dim])</argsstring>
        <name>embedded_distsq</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x2</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Calculate distances between two particles (squared) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the embedded distance squared between coordinate <computeroutput>x1</computeroutput> and particle <computeroutput>p2</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="649" column="9" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="22" bodyend="28"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a96b48b323ddc9f2d482516b3204118f0_1a96b48b323ddc9f2d482516b3204118f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf mpmd&lt; dim &gt;::embedded_distsq</definition>
        <argsstring>(ldf x2[dim], ui p2)</argsstring>
        <name>embedded_distsq</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x2</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate distances between two particles (squared) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the embedded distance squared between particle <computeroutput>p1</computeroutput> and coordinate <computeroutput>x2</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="650" column="9" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="30" bodyend="36"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a15fd349a7f8147dc1c9bc8b74c15c0bd_1a15fd349a7f8147dc1c9bc8b74c15c0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf mpmd&lt; dim &gt;::embedded_dd_p1</definition>
        <argsstring>(ui d, ui p1, ui p2)</argsstring>
        <name>embedded_dd_p1</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate particles relative particle in certain dimension i wrt p1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the <computeroutput>d</computeroutput>&apos;th component of the embedded distance vector with respect to particle p1. <linebreak/>
 Note this function is signed hence permutations matter.</para>
        </inbodydescription>
        <location file="libmd.h" line="651" column="9" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="38" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a8847e2690ac1f322b49c2f5f5389c013_1a8847e2690ac1f322b49c2f5f5389c013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf mpmd&lt; dim &gt;::embedded_dd_p2</definition>
        <argsstring>(ui d, ui p1, ui p2)</argsstring>
        <name>embedded_dd_p2</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate particles relative particle in certain dimension i wrt p2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the <computeroutput>d</computeroutput>&apos;th component of the embedded distance vector with respect to particle p2. <linebreak/>
 Note this function is signed hence permutations matter.</para>
        </inbodydescription>
        <location file="libmd.h" line="652" column="9" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a0f07f1bb38ae54ee286bd1d1223b59e9_1a0f07f1bb38ae54ee286bd1d1223b59e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::zuiden_C</definition>
        <argsstring>(ui i, ldf ZC[dim])</argsstring>
        <name>zuiden_C</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>ZC</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Calculates <formula id="67">$g^{\rho \sigma} C_{\sigma}$</formula> for particle i of the van Zuiden integrator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates <formula id="46">$g^{\rho \sigma} C_{\sigma} = g^{\rho \sigma} (g^p_{\sigma \mu}(x^{\mu}-x^{\mu}_p)+h^2 \frac{F^{\sigma}}{m}) $</formula> for particle i of the van Zuiden integrator for particle <computeroutput>i</computeroutput>. It overwrites <computeroutput>ldf ZC[dim]</computeroutput> after it is read as input.</para>
        </inbodydescription>
        <location file="libmd.h" line="653" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="56" bodyend="67"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_aa7e40e24a8575a14dc7c1546010a7c68_1aa7e40e24a8575a14dc7c1546010a7c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::zuiden_A</definition>
        <argsstring>(ui i, ldf eps[dim])</argsstring>
        <name>zuiden_A</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>eps</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Calculates <formula id="47">$g^{\rho \sigma} A_{\sigma \mu \nu} \epsilon^{\mu} \epsilon^{\nu}$</formula> for particle i of the van Zuiden integrator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates <formula id="47">$g^{\rho \sigma} A_{\sigma \mu \nu} \epsilon^{\mu} \epsilon^{\nu}$</formula> for particle i of the van Zuiden integrator for particle <computeroutput>i</computeroutput>. It overwrites <computeroutput>ldf eps[dim]</computeroutput> after it is read as input.</para>
        </inbodydescription>
        <location file="libmd.h" line="654" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="69" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a8fc7bd10d9db7db29770d6d53d094e44_1a8fc7bd10d9db7db29770d6d53d094e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::thread_zuiden_wfi</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_zuiden_wfi</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>The van Zuiden integrator without fixed point itterations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function runs the van Zuiden integrator without fixed point iterations and updates the position and velocity for particle <computeroutput>i</computeroutput> accordingly.</para>
        </inbodydescription>
        <location file="libmd.h" line="655" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="80" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a8e7d1b7cafc905e283023a6b822cc766_1a8e7d1b7cafc905e283023a6b822cc766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::thread_zuiden_protect</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_zuiden_protect</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>The van Zuiden integrator with protected fixed point itterations (makes sure you don&apos;t get stuck in a loop) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function runs the van Zuiden integrator with fixed point iterations and updates the position and velocity for particle <computeroutput>i</computeroutput> accordingly. Should the integrator not converge after <computeroutput>integrator.generations</computeroutput> iterations this function stops with the fixed point iterations.</para>
        </inbodydescription>
        <location file="libmd.h" line="656" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="92" bodyend="116"/>
        <references refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" compoundref="autodiff_8libmd_8cc" startline="364" endline="367">abs</references>
        <references refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" compoundref="macros_8libmd_8h" startline="106">DEBUG_3</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a47eee1cf060ce915bb077ac558fb762c_1a47eee1cf060ce915bb077ac558fb762c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::thread_zuiden</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_zuiden</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>The van Zuiden integrator for Riemannian manifolds (fails for pseudo-Riemannian manifolds) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function runs the van Zuiden integrator with fixed point iterations and updates the position and velocity for particle <computeroutput>i</computeroutput> accordingly. This function unlike <ref refid="structmpmd_a8e7d1b7cafc905e283023a6b822cc766_1a8e7d1b7cafc905e283023a6b822cc766" kindref="member">mpmd&lt;dim&gt;::thread_zuiden_protect(ui i)</ref> waits until the integrator has converged.</para>
        </inbodydescription>
        <location file="libmd.h" line="657" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="118" bodyend="139"/>
        <references refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" compoundref="autodiff_8libmd_8cc" startline="364" endline="367">abs</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a9aae6c4551ae89f9ecadfff6755e75ca_1a9aae6c4551ae89f9ecadfff6755e75ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::thread_history</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_history</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Set the history of particle i. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function generates the history <formula id="48">$ x^{\mu}_p $</formula> for particle <computeroutput>i</computeroutput> from its position and velocity.</para>
        </inbodydescription>
        <location file="libmd.h" line="658" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="141" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="structmpmd_aacb392a8e756a069870b388a189485b0_1aacb392a8e756a069870b388a189485b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::history</definition>
        <argsstring>()</argsstring>
        <name>history</name>
        <briefdescription>
<para>Set the history of all particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calls <ref refid="structmpmd_a9aae6c4551ae89f9ecadfff6755e75ca_1a9aae6c4551ae89f9ecadfff6755e75ca" kindref="member">mpmd&lt;dim&gt;::thread_history(ui i)</ref> for all particles. Additionally, it calculates and updates the important geometric derivatives.</para>
        </inbodydescription>
        <location file="libmd.h" line="659" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="149" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a7e1ceda4892e4a680231e116f23937e9_1a7e1ceda4892e4a680231e116f23937e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::thread_calc_geometry</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_calc_geometry</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Calculate Monge patch derivatives for partice i. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function update and calculates the new geometric information for a (new) particle position for particle <computeroutput>i</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="660" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="162" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a1548ce998855a5d2b559001334cb5de7_1a1548ce998855a5d2b559001334cb5de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::calc_geometry</definition>
        <argsstring>()</argsstring>
        <name>calc_geometry</name>
        <briefdescription>
<para>Calculate Monge patch derivatives. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calls <ref refid="structmpmd_a7e1ceda4892e4a680231e116f23937e9_1a7e1ceda4892e4a680231e116f23937e9" kindref="member">mpmd&lt;dim&gt;::thread_calc_geometry(ui i)</ref> for all particles.</para>
        </inbodydescription>
        <location file="libmd.h" line="661" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="170" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a13769566d0f591f1a5bdacea665aaf59_1a13769566d0f591f1a5bdacea665aaf59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::mp_thread_calc_pot_forces</definition>
        <argsstring>(ui i)</argsstring>
        <name>mp_thread_calc_pot_forces</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Calculate the forces for particle i&gt;j with atomics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function is the Monge patch analog to <ref refid="structmd_ac3b4dfe4eba7350b266d30517671bdb6_1ac3b4dfe4eba7350b266d30517671bdb6" kindref="member">md&lt;dim&gt;::thread_calc_pot_forces(ui i)</ref> and calculates the forces induced by the potentials acting on particle <computeroutput>i</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="662" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="178" bodyend="201"/>
        <references refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" compoundref="macros_8libmd_8h" startline="106">DEBUG_3</references>
        <references refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" compoundref="libmd_8h" startline="45">F_LDF</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" compoundref="autodiff_8libmd_8cc" startline="268" endline="272">sqrt</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_afdb6c81bc049485c05ed952728a27312_1afdb6c81bc049485c05ed952728a27312" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::integrate</definition>
        <argsstring>() override final</argsstring>
        <name>integrate</name>
        <reimplements refid="structmd_a7254ea0201ee881fd53c6722e6473e5f_1a7254ea0201ee881fd53c6722e6473e5f">integrate</reimplements>
        <briefdescription>
<para>Integrate particle trajectoriess. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function is the Monge patch analog to <ref refid="structmd_a7254ea0201ee881fd53c6722e6473e5f_1a7254ea0201ee881fd53c6722e6473e5f" kindref="member">md&lt;dim&gt;::integrate()</ref> and calculates the particle trajectories. <linebreak/>
 After integrating (and updating the particle) it call <ref refid="structmd_a0395ea5f8b917457f3775b59da0b3734_1a0395ea5f8b917457f3775b59da0b3734" kindref="member">md&lt;dim&gt;::periodicity()</ref>, and calculates the geomatric derivatives for the new particle position.</para>
        </inbodydescription>
        <location file="libmd.h" line="663" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="228" bodyend="266"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="struct_m_p___i_n_t_e_g_r_a_t_o_r_a6d6719917c0d2a6ffd3f204711ee6397_1a6d6719917c0d2a6ffd3f204711ee6397a0c573419215cd00cd3d6ab778fe897a8" compoundref="enums_8libmd_8h" startline="6">MP_INTEGRATOR::SEULER</references>
        <references refid="struct_m_p___i_n_t_e_g_r_a_t_o_r_a6d6719917c0d2a6ffd3f204711ee6397_1a6d6719917c0d2a6ffd3f204711ee6397a7782ad9649ae9bc647269a89229b7ab6" compoundref="enums_8libmd_8h" startline="6">MP_INTEGRATOR::VVERLET</references>
        <references refid="struct_m_p___i_n_t_e_g_r_a_t_o_r_a6d6719917c0d2a6ffd3f204711ee6397_1a6d6719917c0d2a6ffd3f204711ee6397a4bc858ca6ee88e07401dd1d915c4001e" compoundref="enums_8libmd_8h" startline="6">MP_INTEGRATOR::VZ_P</references>
        <references refid="struct_m_p___i_n_t_e_g_r_a_t_o_r_a6d6719917c0d2a6ffd3f204711ee6397_1a6d6719917c0d2a6ffd3f204711ee6397a236a12fc2c2f110433ea3cbd6000e2f5" compoundref="enums_8libmd_8h" startline="6">MP_INTEGRATOR::VZ_WFI</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_acaff47ed55f39e95d3febf8487b93a9b_1acaff47ed55f39e95d3febf8487b93a9b" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::calc_forces</definition>
        <argsstring>() override final</argsstring>
        <name>calc_forces</name>
        <reimplements refid="structmd_ac7139593c6d2f8acc2bb478a0a70f1f4_1ac7139593c6d2f8acc2bb478a0a70f1f4">calc_forces</reimplements>
        <briefdescription>
<para>Integrate particle trajectoriess. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function clears all the forces and then calls mpmd&lt;dim&gt;::mp_thread_calc_forces(ui i) for all particles.</para>
        </inbodydescription>
        <location file="libmd.h" line="664" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="203" bodyend="217"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a56359315b7b7cd836dbff7614ceb1c96_1a56359315b7b7cd836dbff7614ceb1c96" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::recalc_forces</definition>
        <argsstring>() override final</argsstring>
        <name>recalc_forces</name>
        <reimplements refid="structmd_a66c65703b4fa3454078571aae0861523_1a66c65703b4fa3454078571aae0861523">recalc_forces</reimplements>
        <briefdescription>
<para>Integrate particle trajectoriess. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calls mpmd&lt;dim&gt;::mp_thread_calc_forces(ui i) for all particles (without clearing the forces).</para>
        </inbodydescription>
        <location file="libmd.h" line="665" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="219" bodyend="227"/>
        <references refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" compoundref="macros_8libmd_8h" startline="106">DEBUG_3</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_a4c7964dc3b819ca6c84a4df6781ac303_1a4c7964dc3b819ca6c84a4df6781ac303" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf mpmd&lt; dim &gt;::thread_T</definition>
        <argsstring>(ui i) override final</argsstring>
        <name>thread_T</name>
        <reimplements refid="structmd_a4ca9f88cee18bca90350dcb4cb74dda6_1a4ca9f88cee18bca90350dcb4cb74dda6">thread_T</reimplements>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Calculate kinetic energy of a particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the kinetic energy of a particle <computeroutput>i</computeroutput> in the presence of curvature.</para>
        </inbodydescription>
        <location file="libmd.h" line="666" column="9" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="268" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="structmpmd_acaf1bb37ff9ca7c2b6db0093478dfb94_1acaf1bb37ff9ca7c2b6db0093478dfb94" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf mpmd&lt; dim &gt;::thread_V</definition>
        <argsstring>(ui i, bool higher_index_only=false) override final</argsstring>
        <name>thread_V</name>
        <reimplements refid="structmd_a4220b18f9181ca58e4c943ddc204036a_1a4220b18f9181ca58e4c943ddc204036a">thread_V</reimplements>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>higher_index_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Calculate potential energy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the potential energy of a particle <computeroutput>i</computeroutput> in the presence of curvature.</para>
        </inbodydescription>
        <location file="libmd.h" line="667" column="9" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="278" bodyend="296"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" compoundref="autodiff_8libmd_8cc" startline="268" endline="272">sqrt</references>
      </memberdef>
      <memberdef kind="function" id="structmpmd_ad368a836ece2eeb2bc5896695b9cf886_1ad368a836ece2eeb2bc5896695b9cf886" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void mpmd&lt; dim &gt;::set_langevin</definition>
        <argsstring>(ldf T, ldf gamma) override final</argsstring>
        <name>set_langevin</name>
        <reimplements refid="structmd_a5be58e8b321390804cec20454a7ad8f0_1a5be58e8b321390804cec20454a7ad8f0">set_langevin</reimplements>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>gamma</declname>
        </param>
        <briefdescription>
<para>Enables Langevin thermostat (and damping) and sets T and gamma (does not use metric) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a Langevin thermostat with the given coefficient T and gamma, or changes the coefficient if it was already set.</para>
        </inbodydescription>
        <location file="libmd.h" line="668" column="10" bodyfile="libmd-src/mpmd.libmd.cc" bodystart="298" bodyend="318"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" compoundref="libmd_8h" startline="45">F_LDF</references>
        <references refid="struct_e_x_t_f_o_r_c_e_ae0d69b9865d5f695184b9bd5bb549414_1ae0d69b9865d5f695184b9bd5bb549414a89f501183c7294adb0e2ef37757a358b" compoundref="enums_8libmd_8h" startline="26">EXTFORCE::LANGEVIN_MP</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a3058404058aa7ff2e36147dcf84c536a_1a3058404058aa7ff2e36147dcf84c536a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::init</definition>
        <argsstring>(ui particlenr)</argsstring>
        <name>init</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>particlenr</declname>
        </param>
        <briefdescription>
<para>Copy of the particle number constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Initialize <ref refid="structmd" kindref="compound">md</ref> structure for a given number of particles specified by <computeroutput>particlenr</computeroutput>. Resizes all lists of structures that require one element per particle.</para>
        </inbodydescription>
        <location file="libmd.h" line="392" column="10" bodyfile="libmd-src/md.libmd.cc" bodystart="16" bodyend="34"/>
        <references refid="macros_8libmd_8h_ab4207136f5c605de61321805bf9e70e1_1ab4207136f5c605de61321805bf9e70e1" compoundref="macros_8libmd_8h" startline="82">DEBUG_1</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_af4b990db21034be32837761098e03336_1af4b990db21034be32837761098e03336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::dap</definition>
        <argsstring>(ui d, ldf ad)</argsstring>
        <name>dap</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>ad</declname>
        </param>
        <briefdescription>
<para>Manipulate particle distances with respect to periodic boundary conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given a displacement <computeroutput>ad</computeroutput> and corresponding spatial dimension <computeroutput>d</computeroutput>, calculates the displacement modulo the periodic box size in that dimension.</para>
<para>Under periodic boundary conditions, distances are required to lie in the range <computeroutput>(-simbox.L[d]/2,simbox.L[d]/2)</computeroutput>. If the displacement <computeroutput>dap</computeroutput> is outside this range, multiples of <computeroutput>simbox.L[d]</computeroutput> are added or subtracted until the displacement is within these bounds, and the result is returned.</para>
        </inbodydescription>
        <location file="libmd.h" line="393" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="6" bodyend="24"/>
        <references refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" compoundref="autodiff_8libmd_8cc" startline="364" endline="367">abs</references>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" compoundref="enums_8libmd_8h" startline="7">BCOND::PERIODIC</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ae0dbf3df141878e6530b7ba1cf18836d_1ae0dbf3df141878e6530b7ba1cf18836d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::distsq</definition>
        <argsstring>(ui p1, ui p2)</argsstring>
        <name>distsq</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate distances between two particles (squared) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the square of the distance between points indexed by <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>. If periodic boundary conditions are used, the distance is between the closest periodic images of the two points.</para>
        </inbodydescription>
        <location file="libmd.h" line="394" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="26" bodyend="38"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a11612b5f64a62122b5c1e2767d4125f4_1a11612b5f64a62122b5c1e2767d4125f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::distsq</definition>
        <argsstring>(ldf x1[dim], ldf x2[dim])</argsstring>
        <name>distsq</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x1</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x2</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Calculate distances between two particles (squared) ldf <ref refid="structmd_aa8d0c1ecf0b5cd3acfda235bf4d7939c_1aa8d0c1ecf0b5cd3acfda235bf4d7939c" kindref="member">distsq(ui p1,ldf x2[dim])</ref>; ///&lt; Calculate distances between two particles (squared) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This version accepts as inputs the coordinates of two points in arrays <computeroutput>x1[dim]</computeroutput> and <computeroutput>x2[dim]</computeroutput> and returns the squared (periodic) distance between them.</para>
        </inbodydescription>
        <location file="libmd.h" line="395" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="40" bodyend="51"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_aa8d0c1ecf0b5cd3acfda235bf4d7939c_1aa8d0c1ecf0b5cd3acfda235bf4d7939c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::distsq</definition>
        <argsstring>(ui p1, ldf x2[dim])</argsstring>
        <name>distsq</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x2</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Calculate distances between two particles (squared) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This version accepts as inputs a point index <computeroutput>p1</computeroutput> and point coordinate array <computeroutput>x2[dim]</computeroutput> and returns the squared (periodic) distance between them.</para>
        </inbodydescription>
        <location file="libmd.h" line="396" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="53" bodyend="64"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ac7d3a54060a2ddea03e95edd1712b70a_1ac7d3a54060a2ddea03e95edd1712b70a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::distsq</definition>
        <argsstring>(ldf x1[dim], ui p2)</argsstring>
        <name>distsq</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x1</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate distances between two particles (squared) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This version accepts as inputs a point coordinate array <computeroutput>x1[dim]</computeroutput> and a point index <computeroutput>p2</computeroutput> and returns the squared (periodic) distance between them.</para>
        </inbodydescription>
        <location file="libmd.h" line="397" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="66" bodyend="77"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_aeed418ffbab88202136c2b9ae1cd5a37_1aeed418ffbab88202136c2b9ae1cd5a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::dd</definition>
        <argsstring>(ui d, ui p1, ui p2)</argsstring>
        <name>dd</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate difference in particle positions in certain dimension i by particle index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the distance between points indexed by <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> along spatial dimension <computeroutput>d</computeroutput>. If periodic boundary conditions are used, the distance is between the closest periodic images of the two points.</para>
        </inbodydescription>
        <location file="libmd.h" line="398" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="79" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structmd_adde7787c69335e330aa9163fb340a40f_1adde7787c69335e330aa9163fb340a40f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::dd</definition>
        <argsstring>(ui d, ldf x1[dim], ldf x2[dim])</argsstring>
        <name>dd</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x1</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x2</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Calculate difference in particle positions in certain dimension i by particle index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This version accepts as inputs the coordinates of two points in arrays <computeroutput>x1[dim]</computeroutput> and <computeroutput>x2[dim]</computeroutput> and returns the (periodic) distance between them along spatial dimension <computeroutput>d</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="399" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="91" bodyend="113"/>
        <references refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" compoundref="autodiff_8libmd_8cc" startline="364" endline="367">abs</references>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946ae60ceea4da62257e104c5ac6aa720a31" compoundref="enums_8libmd_8h" startline="7">BCOND::BOXSHEAR</references>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" compoundref="enums_8libmd_8h" startline="7">BCOND::PERIODIC</references>
      </memberdef>
      <memberdef kind="function" id="structmd_aaec8b858142d1a80d0eb072d13989016_1aaec8b858142d1a80d0eb072d13989016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::dd</definition>
        <argsstring>(ui d, ui p1, ldf x2[dim])</argsstring>
        <name>dd</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x2</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Calculate difference in particle positions in certain dimension i by particle index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This version accepts as inputs a point index <computeroutput>p1</computeroutput> and point coordinate array <computeroutput>x2[dim]</computeroutput> and returns the (periodic) distance between them along spatial dimension <computeroutput>d</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="400" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="115" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structmd_aa2aafc98e090071ee38cd5eecc91086c_1aa2aafc98e090071ee38cd5eecc91086c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::dd</definition>
        <argsstring>(ui d, ldf x1[dim], ui p2)</argsstring>
        <name>dd</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x1</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate difference in particle positions in certain dimension i by particle index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para>This version accepts as inputs a point coordinate array <computeroutput>x1[dim]</computeroutput> and a point index <computeroutput>p2</computeroutput> and returns the (periodic) distance between them along spatial dimension <computeroutput>d</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="401" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="126" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a6d7f9c3ed6d212f1b34b2d2e94b7fd33_1a6d7f9c3ed6d212f1b34b2d2e94b7fd33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::dv</definition>
        <argsstring>(ui d, ui p1, ui p2)</argsstring>
        <name>dv</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Calculate difference in particle velocities in certain dimension i by particle index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the <computeroutput>d</computeroutput>th component of the velocity difference between the closest periodic image of two particles indexed by <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>. If the vector connecting the periodic images crosses a sheared boundary, the resulting velocity difference takes into account the shear velocity of the periodic image as well. The result is returned as a <formula id="10">$d$</formula>-dimensional array of velocity components.</para>
        </inbodydescription>
        <location file="libmd.h" line="402" column="9" bodyfile="libmd-src/md/distances.md.libmd.cc" bodystart="137" bodyend="163"/>
        <references refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" compoundref="autodiff_8libmd_8cc" startline="364" endline="367">abs</references>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946ae60ceea4da62257e104c5ac6aa720a31" compoundref="enums_8libmd_8h" startline="7">BCOND::BOXSHEAR</references>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" compoundref="enums_8libmd_8h" startline="7">BCOND::PERIODIC</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ad0dfd19e75aacb45e98ce6c5b198e135_1ad0dfd19e75aacb45e98ce6c5b198e135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::interactions</definition>
        <argsstring>(ui i, std::vector&lt; std::pair&lt; ui, ui &gt;&gt; &amp;table)</argsstring>
        <name>interactions</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; <ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref>, <ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref> &gt;&gt; &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Dump interactions of a certain particle into a table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function puts a list of all interaction neighbors of particle <computeroutput>i</computeroutput> in <computeroutput>table</computeroutput>, as pairs of particles with <computeroutput>i</computeroutput> being the first.</para>
        </inbodydescription>
        <location file="libmd.h" line="403" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="6" bodyend="14"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ab793b4e0bf5ad988d9e8cfb0f0e02f38_1ab793b4e0bf5ad988d9e8cfb0f0e02f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::all_interactions</definition>
        <argsstring>(std::vector&lt; std::pair&lt; ui, ui &gt;&gt; &amp;table)</argsstring>
        <name>all_interactions</name>
        <param>
          <type>std::vector&lt; std::pair&lt; <ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref>, <ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref> &gt;&gt; &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Dump all interaction into a table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function puts a list of all interaction neighbors in <computeroutput>table</computeroutput>, as pairs of particles.</para>
        </inbodydescription>
        <location file="libmd.h" line="404" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="16" bodyend="23"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_add32e6f0299fad6d17eea4e0c5172c5f_1add32e6f0299fad6d17eea4e0c5172c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_interaction</definition>
        <argsstring>(ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a new interaction, of the given type and with the given parameters, to <computeroutput>network.library[]</computeroutput> and returns its index.</para>
        </inbodydescription>
        <location file="libmd.h" line="405" column="8" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="25" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a5bcb2ef79d1735715d49b629c07f8f53_1a5bcb2ef79d1735715d49b629c07f8f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_interaction</definition>
        <argsstring>(ui potential, ldf rco, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a new interaction, of the given type and with the given parameters, to <computeroutput>network.library[]</computeroutput> and returns its index.</para>
        </inbodydescription>
        <location file="libmd.h" line="406" column="8" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="33" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ae4d4c6021d409ab400a49671019f3796_1ae4d4c6021d409ab400a49671019f3796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_interaction</definition>
        <argsstring>(ui interaction, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function replaces the interaction in <computeroutput>network.library[]</computeroutput> with index <computeroutput>interaction</computeroutput> with a potential of the given type and with the given parameters. It returns whether the given library element exists.</para>
        </inbodydescription>
        <location file="libmd.h" line="407" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a0b728314c3eaeffa8b6d5727ab8d1ca4_1a0b728314c3eaeffa8b6d5727ab8d1ca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_interaction</definition>
        <argsstring>(ui interaction, ui potential, ldf rco, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function replaces the interaction in <computeroutput>network.library[]</computeroutput> with index <computeroutput>interaction</computeroutput> with a potential of the given type and with the given parameters. It returns whether the given library element exists.</para>
        </inbodydescription>
        <location file="libmd.h" line="408" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="63" bodyend="87"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a9912870aa754f0366ea2f3b54cf5bfaa_1a9912870aa754f0366ea2f3b54cf5bfaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_interaction</definition>
        <argsstring>(ui interaction)</argsstring>
        <name>rem_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Delete type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the interaction with index <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. It returns whether the given library element existed.<linebreak/>
 The other interactions retain their index.</para>
        </inbodydescription>
        <location file="libmd.h" line="409" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="89" bodyend="114"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_adc523a066b2afdebc5cfd3f36fa732e6_1adc523a066b2afdebc5cfd3f36fa732e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_typeinteraction</definition>
        <argsstring>(ui type1, ui type2, ui interaction)</argsstring>
        <name>add_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Add type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a type interaction between the given types, using element <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. It returns whether the given interaction exists and the two types do not already have an interaction. If the two types already have an interaction, it is not modified.</para>
        </inbodydescription>
        <location file="libmd.h" line="410" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="116" bodyend="142"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_abef5fe534b59a2f99a5e5f10a86c7fde_1abef5fe534b59a2f99a5e5f10a86c7fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_typeinteraction</definition>
        <argsstring>(ui type1, ui type2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a type interaction between the given types, using a new interaction of the given type and with the given parameters. It returns whether the two types do not already have an interaction. If the two types already have an interaction, it is not modified and the interaction is not added to <computeroutput>network.library[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="413" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="182" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="structmd_aa5910d790b5ddb7e56f78f1d0d66a433_1aa5910d790b5ddb7e56f78f1d0d66a433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_typeinteraction</definition>
        <argsstring>(ui type1, ui type2, ui potential, ldf rco, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a type interaction between the given types, using a new interaction of the given type and with the given parameters. It returns whether the two types do not already have an interaction. If the two types already have an interaction, it is not modified and the interaction is not added to <computeroutput>network.library[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="414" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="192" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a3a632d96257e09cdd541aefb1b1f2910_1a3a632d96257e09cdd541aefb1b1f2910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_typeinteraction</definition>
        <argsstring>(ui type1, ui type2, ui interaction)</argsstring>
        <name>mod_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Modify type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function modifies the type interaction between the given types, using element <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. It returns whether the given interaction exists and the two types already had an interaction. If the two types do not already have an interaction, it is not added.</para>
        </inbodydescription>
        <location file="libmd.h" line="411" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="144" bodyend="170"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a7f95dae9952b4fa0e06b237c25bd05dd_1a7f95dae9952b4fa0e06b237c25bd05dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_typeinteraction</definition>
        <argsstring>(ui type1, ui type2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function modifies the type interaction between the given types, using a new interaction of the given type and with the given parameters. It returns whether the two types already had an interaction. If the two types do not already have an interaction, it is not added and the interaction is not added to <computeroutput>network.library[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="415" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="209" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a9d6aaf3d1261024ca06d205bb90c1cf5_1a9d6aaf3d1261024ca06d205bb90c1cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_typeinteraction</definition>
        <argsstring>(ui type1, ui type2, ui potential, ldf rco, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function modifies the type interaction between the given types, using a new interaction of the given type and with the given parameters. It returns whether the two types already had an interaction. If the two types do not already have an interaction, it is not added and the interaction is not added to <computeroutput>network.library[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="416" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="219" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ade6485112233e29238898268e6d5813c_1ade6485112233e29238898268e6d5813c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::mad_typeinteraction</definition>
        <argsstring>(ui type1, ui type2, ui interaction)</argsstring>
        <name>mad_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Force add/mod type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function assigns a type interaction to the given pair of types, using element <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. It does not perform any checks.</para>
        </inbodydescription>
        <location file="libmd.h" line="412" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="172" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a0ab82f734b4918ec70b1308d51b53dd4_1a0ab82f734b4918ec70b1308d51b53dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::mad_typeinteraction</definition>
        <argsstring>(ui type1, ui type2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mad_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Force add/mod type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function assigns a type interaction to the given pair of types, using a new interaction of the given type and with the given parameters. It does not perform any checks.</para>
        </inbodydescription>
        <location file="libmd.h" line="417" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="236" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a3c7542b1ab87b873c3093eb6d6f54e72_1a3c7542b1ab87b873c3093eb6d6f54e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::mad_typeinteraction</definition>
        <argsstring>(ui type1, ui type2, ui potential, ldf rco, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mad_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Force add/mod type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function assigns a type interaction to the given pair of types, using a new interaction of the given type and with the given parameters. It does not perform any checks.</para>
        </inbodydescription>
        <location file="libmd.h" line="418" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="245" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="structmd_abb578b83b6417525ade07413cc1664ac_1abb578b83b6417525ade07413cc1664ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_typeinteraction</definition>
        <argsstring>(ui type1, ui type2)</argsstring>
        <name>rem_typeinteraction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>type2</declname>
        </param>
        <briefdescription>
<para>Delete type interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the type interaction between the given types. It does not remove the interaction from<computeroutput>network.library[]</computeroutput>. It returns whether the two types had an interaction.</para>
        </inbodydescription>
        <location file="libmd.h" line="419" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="255" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a5d0929b4c0f9b5c2b13a55c4cb5e7ef9_1a5d0929b4c0f9b5c2b13a55c4cb5e7ef9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_sptype</definition>
        <argsstring>()</argsstring>
        <name>add_sptype</name>
        <briefdescription>
<para>Add superparticletype. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds an empty superparticletype to <computeroutput>network.sptypes[]</computeroutput> and returns its index.</para>
        </inbodydescription>
        <location file="libmd.h" line="420" column="8" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="268" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="structmd_aef66202a148539ebd1b68b879265c2f1_1aef66202a148539ebd1b68b879265c2f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_sptype</definition>
        <argsstring>(ui spt)</argsstring>
        <name>rem_sptype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <briefdescription>
<para>Delete superparticletype. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the superparticletype with index <computeroutput>spt</computeroutput> from <computeroutput>network.sptypes[]</computeroutput>. It returns whether this element existed.<linebreak/>
 Note: the last superparticletype in <computeroutput>network.sptypes[]</computeroutput> takes the place of the old one.</para>
        </inbodydescription>
        <location file="libmd.h" line="421" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="277" bodyend="298"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a5b6b06f8347c82462c21b8eb0a6d215b_1a5b6b06f8347c82462c21b8eb0a6d215b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2, ui interaction)</argsstring>
        <name>add_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Add superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds an interaction between particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>, using element <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. It returns whether the given superparticletype and interaction exist and the particle numbers do not already have an interaction. If the two particle numbers already have an interaction, it is not modified.</para>
        </inbodydescription>
        <location file="libmd.h" line="422" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="300" bodyend="332"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a15605c852532eb3eb86321c204638879_1a15605c852532eb3eb86321c204638879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds an interaction between particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>, using a new interaction of the given type and with the given parameters. It returns whether the given superparticletype exists and the particle numbers do not already have an interaction. If the two particle numbers already have an interaction, it is not modified and the interaction is not added to <computeroutput>network.library[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="425" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="386" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a030bb17fd9997648e6a0180c9201654c_1a030bb17fd9997648e6a0180c9201654c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2, ui potential, ldf rco, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds an interaction between particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>, using a new interaction of the given type and with the given parameters. It returns whether the given superparticletype exists and the particle numbers do not already have an interaction. If the two particle numbers already have an interaction, it is not modified and the interaction is not added to <computeroutput>network.library[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="426" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="398" bodyend="421"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a6ebeb7144a1a3584d9de753911883d06_1a6ebeb7144a1a3584d9de753911883d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2, ui interaction)</argsstring>
        <name>mod_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Modify superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function modifies the interaction between particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>, using element <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. It returns whether the given superparticletype and interaction exist and the particle numbers already had an interaction. If the two particle numbers do not already have an interaction, it is not added.</para>
        </inbodydescription>
        <location file="libmd.h" line="423" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="334" bodyend="366"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a9ee7c6621fcea5c7d0f9e2d487d500c8_1a9ee7c6621fcea5c7d0f9e2d487d500c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function modifies the interaction between particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>, using a new interaction of the given type and with the given parameters. It returns whether the given superparticletype and interaction exist and the particle numbers already had an interaction. If the two particle numbers do not already have an interaction, it is not added and the interaction is not added to <computeroutput>network.library[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="427" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="423" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="structmd_aecb53cb002bfac054f050218e7b2e0c9_1aecb53cb002bfac054f050218e7b2e0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2, ui potential, ldf rco, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function modifies the interaction between particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>, using a new interaction of the given type and with the given parameters. It returns whether the given superparticletype and interaction exist and the particle numbers already had an interaction. If the two particle numbers do not already have an interaction, it is not added and the interaction is not added to <computeroutput>network.library[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="428" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="435" bodyend="458"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a759dc71408d5202e3b647da8abe58e00_1a759dc71408d5202e3b647da8abe58e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::mad_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2, ui interaction)</argsstring>
        <name>mad_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Force add/mod superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function assigns an interaction to particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>, using element <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. If the given superparticletype does not exist, a new one is added to <computeroutput>network.sptypes[]</computeroutput>. It returns the index of the superparticletype (which is <computeroutput>spt</computeroutput> or the index of the newly created one). It does not perform any checks.</para>
        </inbodydescription>
        <location file="libmd.h" line="424" column="8" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="368" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a2360029fc9a0a52a8432a9b30d61c57e_1a2360029fc9a0a52a8432a9b30d61c57e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::mad_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mad_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Force add/mod superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function assigns an interaction to particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>, using a new interaction of the given type and with the given parameters. If the given superparticletype does not exist, a new one is added to <computeroutput>network.sptypes[]</computeroutput>. It returns the index of the superparticletype (which is <computeroutput>spt</computeroutput> or the index of the newly created one). It does not perform any checks.</para>
        </inbodydescription>
        <location file="libmd.h" line="429" column="8" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="460" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a9088598d8ccee5d837e398a4ad4abe0e_1a9088598d8ccee5d837e398a4ad4abe0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::mad_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2, ui potential, ldf rco, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mad_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Force add/mod superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function assigns an interaction to particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>, using a new interaction of the given type and with the given parameters. If the given superparticletype does not exist, a new one is added to <computeroutput>network.sptypes[]</computeroutput>. It returns the index of the superparticletype (which is <computeroutput>spt</computeroutput> or the index of the newly created one). It does not perform any checks.</para>
        </inbodydescription>
        <location file="libmd.h" line="430" column="8" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="472" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a122d80c92758c75eb00437bbc9192e70_1a122d80c92758c75eb00437bbc9192e70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_sp_interaction</definition>
        <argsstring>(ui spt, ui p1, ui p2)</argsstring>
        <name>rem_sp_interaction</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spt</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Delete superparticle interaction rule. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the interaction between particle numbers <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of superparticles of type <computeroutput>spt</computeroutput>. It does not remove the interaction from<computeroutput>network.library[]</computeroutput>. It returns whether the given superparticletype exists and the two particle numbers had an interaction.</para>
        </inbodydescription>
        <location file="libmd.h" line="431" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="491" bodyend="508"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a0008f4806c077d79f3ebd03a13b8ddee_1a0008f4806c077d79f3ebd03a13b8ddee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_forcetype</definition>
        <argsstring>(ui force, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_forcetype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>force</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add force type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a new forcetype, of the given type and with the given parameters, to <computeroutput>network.forcelibrary[]</computeroutput> and returns its index.</para>
        </inbodydescription>
        <location file="libmd.h" line="432" column="8" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="512" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ab9877795af63e5a45054a3642d8dd9c1_1ab9877795af63e5a45054a3642d8dd9c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_forcetype</definition>
        <argsstring>(ui force, std::vector&lt; std::vector&lt; ui &gt;&gt; &amp;plist, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_forcetype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>force</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref> &gt;&gt; &amp;</type>
          <declname>plist</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add force type with plist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a new forcetype, of the given type and with the given parameters, to <computeroutput>network.forcelibrary[]</computeroutput> and returns its index.</para>
        </inbodydescription>
        <location file="libmd.h" line="433" column="8" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="522" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a765213fe1e96156bae8b60687b763543_1a765213fe1e96156bae8b60687b763543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_forcetype</definition>
        <argsstring>(ui ftype, ui force, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_forcetype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ftype</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>force</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify force type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function replaces the forcetype in <computeroutput>network.forcelibrary[]</computeroutput> with index <computeroutput>ftype</computeroutput> with a forcetype of the given type and with the given parameters. It returns whether the given forcelibrary element exists.</para>
        </inbodydescription>
        <location file="libmd.h" line="434" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="532" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a8b18afb86b5c1523542528c82e3457e5_1a8b18afb86b5c1523542528c82e3457e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_forcetype</definition>
        <argsstring>(ui ftype, ui force, std::vector&lt; std::vector&lt; ui &gt;&gt; &amp;plist, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_forcetype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ftype</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>force</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref> &gt;&gt; &amp;</type>
          <declname>plist</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify force type plist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function replaces the forcetype in <computeroutput>network.forcelibrary[]</computeroutput> with index <computeroutput>ftype</computeroutput> with a forcetype of the given type and with the given parameters. It returns whether the given forcelibrary element exists.</para>
        </inbodydescription>
        <location file="libmd.h" line="435" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="548" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="structmd_adb0b0c0ea9c035858eadac1e2d0e1ab2_1adb0b0c0ea9c035858eadac1e2d0e1ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_forcetype</definition>
        <argsstring>(ui ftype)</argsstring>
        <name>rem_forcetype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ftype</declname>
        </param>
        <briefdescription>
<para>Delete force type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the forcetype with index <computeroutput>ftype</computeroutput> from <computeroutput>network.forcelibrary[]</computeroutput>. It returns whether the given forcelibrary element existed.<linebreak/>
 Note: the last forcetype in <computeroutput>network.forcelibrary[]</computeroutput> takes the place of the old one.</para>
        </inbodydescription>
        <location file="libmd.h" line="436" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="564" bodyend="589"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a689eedf4ef9bb0693560854d4b846eb7_1a689eedf4ef9bb0693560854d4b846eb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::assign_forcetype</definition>
        <argsstring>(ui i, ui ftype)</argsstring>
        <name>assign_forcetype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ftype</declname>
        </param>
        <briefdescription>
<para>Assign force type to particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function assigns a forcetype to particle <computeroutput>i</computeroutput>, using element <computeroutput>ftype</computeroutput> from <computeroutput>network.forcelibrary[]</computeroutput>. It returns whether the given forcetype was not already assigned to the given particle.</para>
        </inbodydescription>
        <location file="libmd.h" line="437" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="591" bodyend="600"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a2eb87929ef4c0a1bb1eebf8b310153fa_1a2eb87929ef4c0a1bb1eebf8b310153fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::assign_all_forcetype</definition>
        <argsstring>(ui ftype)</argsstring>
        <name>assign_all_forcetype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ftype</declname>
        </param>
        <briefdescription>
<para>Assign force type to all particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function assigns the forcetype <computeroutput>network.forcelibrary[ftype]</computeroutput> to all particles.</para>
        </inbodydescription>
        <location file="libmd.h" line="438" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="602" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a6412fd7449493d81107094fe892e57ea_1a6412fd7449493d81107094fe892e57ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::unassign_forcetype</definition>
        <argsstring>(ui i, ui ftype)</argsstring>
        <name>unassign_forcetype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ftype</declname>
        </param>
        <briefdescription>
<para>Unassign force type to particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the forcetype <computeroutput>network.forcelibrary[ftype]</computeroutput> from particle <computeroutput>i</computeroutput>. It returns whether the given forcetype was assigned to the given particle.</para>
        </inbodydescription>
        <location file="libmd.h" line="439" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="610" bodyend="623"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a2e33f0aefe99cb1f0e135a3970582ab5_1a2e33f0aefe99cb1f0e135a3970582ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::unassign_all_forcetype</definition>
        <argsstring>(ui ftype)</argsstring>
        <name>unassign_all_forcetype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ftype</declname>
        </param>
        <briefdescription>
<para>Unassign force type to all particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the forcetype <computeroutput>network.forcelibrary[ftype]</computeroutput> from all particles.</para>
        </inbodydescription>
        <location file="libmd.h" line="440" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="625" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a9aabb9439ebd5dd2bd310adad84daac8_1a9aabb9439ebd5dd2bd310adad84daac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::clear_all_assigned_forcetype</definition>
        <argsstring>()</argsstring>
        <name>clear_all_assigned_forcetype</name>
        <briefdescription>
<para>Clear all assigned forces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes all forcetypes from all particles.</para>
        </inbodydescription>
        <location file="libmd.h" line="441" column="10" bodyfile="libmd-src/md/interaction.md.libmd.cc" bodystart="633" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a1edeb0b9fcea9ffed4a2e200a931feee_1a1edeb0b9fcea9ffed4a2e200a931feee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_hook</definition>
        <argsstring>(ui nohook, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_hook</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>nohook</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add a hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a new hook, of the given type and with the given parameters, to <computeroutput>hooks.hookers[]</computeroutput> and returns its index.</para>
        </inbodydescription>
        <location file="libmd.h" line="442" column="8" bodyfile="libmd-src/md/hooks.md.libmd.cc" bodystart="6" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a23acf6a4938f0790acbc21397ef0b3e5_1a23acf6a4938f0790acbc21397ef0b3e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_hook</definition>
        <argsstring>(ui htype, ui nohook, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_hook</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>htype</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>nohook</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify a hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function replaces the forcetype in <computeroutput>hook.hookers[]</computeroutput> with index <computeroutput>htype</computeroutput> with a forcetype of the given type and with the given parameters. It returns whether the given forcelibrary element exists.</para>
        </inbodydescription>
        <location file="libmd.h" line="443" column="10" bodyfile="libmd-src/md/hooks.md.libmd.cc" bodystart="16" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ac4b44ac0b00925ab289ed14adc72998b_1ac4b44ac0b00925ab289ed14adc72998b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_hook</definition>
        <argsstring>(ui htype)</argsstring>
        <name>rem_hook</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>htype</declname>
        </param>
        <briefdescription>
<para>Remove a hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the forcetype with index <computeroutput>htype</computeroutput> from <computeroutput>hook.hookers[]</computeroutput>. It returns whether the given forcelibrary element existed.<linebreak/>
 Note: the last forcetype in <computeroutput>hook.hookers[]</computeroutput> takes the place of the old one.</para>
        </inbodydescription>
        <location file="libmd.h" line="444" column="10" bodyfile="libmd-src/md/hooks.md.libmd.cc" bodystart="32" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structmd_aa7a58f9bbaf4bc9980ce174d50354317_1aa7a58f9bbaf4bc9980ce174d50354317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::run_hook</definition>
        <argsstring>(ui htype)</argsstring>
        <name>run_hook</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>htype</declname>
        </param>
        <briefdescription>
<para>Run a certain hook. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function runs the hook with index <computeroutput>htype</computeroutput> from <computeroutput>hook.hookers[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="445" column="10" bodyfile="libmd-src/md/hooks.md.libmd.cc" bodystart="49" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structmd_af8e8b1c94af7332930937f8652c56be1_1af8e8b1c94af7332930937f8652c56be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::run_hooks</definition>
        <argsstring>()</argsstring>
        <name>run_hooks</name>
        <briefdescription>
<para>Run all hooks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function runs all the hook in <computeroutput>hook.hookers[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="446" column="10" bodyfile="libmd-src/md/hooks.md.libmd.cc" bodystart="62" bodyend="68"/>
        <references refid="structhooktype_ad81d7b738ac51aac9892391afc1d13cf_1ad81d7b738ac51aac9892391afc1d13cf" compoundref="libmd_8h" startline="338">hooktype::hook</references>
        <references refid="structhooktype_a7a1dbb49e6b7c670bcde4785d06f0dda_1a7a1dbb49e6b7c670bcde4785d06f0dda" compoundref="libmd_8h" startline="339">hooktype::parameters</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a1ee843317185c3f25f8f879d0fe20d03_1a1ee843317185c3f25f8f879d0fe20d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::get_rco</definition>
        <argsstring>(ui i, ui j)</argsstring>
        <name>get_rco</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Gets the cuttoff radius for a certain pair of particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This fucntion returns the <formula id="36">$R_{\text{cutoff}}$</formula> for an interacing pair of particles <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput></para>
        </inbodydescription>
        <location file="libmd.h" line="447" column="9" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="120" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a8c19b7d23174fc8598dc3f6baaf1612a_1a8c19b7d23174fc8598dc3f6baaf1612a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::get_rco</definition>
        <argsstring>(ui interaction)</argsstring>
        <name>get_rco</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Gets the cuttoff radius for a certain interaction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This fucntion returns the <formula id="36">$R_{\text{cutoff}}$</formula> for a certain interaction</para>
        </inbodydescription>
        <location file="libmd.h" line="448" column="9" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a7fcf21557f26de99f3e12c18d5719cf0_1a7fcf21557f26de99f3e12c18d5719cf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_rco</definition>
        <argsstring>(ldf rco)</argsstring>
        <name>set_rco</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <briefdescription>
<para>Sets the cuttoff radius. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Sets <computeroutput>network.rco</computeroutput>, the interaction cut-off distance, to <computeroutput>rco</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="449" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="138" bodyend="149"/>
        <references refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" compoundref="libmd_8h" startline="45">F_LDF</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a0198b98f0b6ce718272700c6c2c4da79_1a0198b98f0b6ce718272700c6c2c4da79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_rco</definition>
        <argsstring>(ui interaction, ldf rco)</argsstring>
        <name>set_rco</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>rco</declname>
        </param>
        <briefdescription>
<para>Sets the cuttoff radius. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Sets <computeroutput>network.rco</computeroutput>, the interaction cut-off distance, to <computeroutput>rco</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="450" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="151" bodyend="163"/>
        <references refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" compoundref="libmd_8h" startline="45">F_LDF</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a46466e1da3b3b5b6fb92d306e1a27263_1a46466e1da3b3b5b6fb92d306e1a27263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_ssz</definition>
        <argsstring>(ldf ssz)</argsstring>
        <name>set_ssz</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>ssz</declname>
        </param>
        <briefdescription>
<para>Sets the skin size radius and its square. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Sets <computeroutput>network.ssz</computeroutput>, the skinsize, to <computeroutput>ssz</computeroutput> and reserves space for <computeroutput>network.skins[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="451" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="165" bodyend="180"/>
        <references refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" compoundref="libmd_8h" startline="45">F_LDF</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a9db6376d02c21c202f4542a0929b0287_1a9db6376d02c21c202f4542a0929b0287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_reserve</definition>
        <argsstring>(ldf ssz)</argsstring>
        <name>set_reserve</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>ssz</declname>
        </param>
        <briefdescription>
<para>Set reserve memory according to skin size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function reserves space for the vectors in <computeroutput>network.skins[]</computeroutput>, assuming that (approximately) all particles interact with each other.</para>
        </inbodydescription>
        <location file="libmd.h" line="452" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="182" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="structmd_acc84dcb35866c880a061460c0abbc385_1acc84dcb35866c880a061460c0abbc385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_reserve</definition>
        <argsstring>(ldf ssz, ui M)</argsstring>
        <name>set_reserve</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>ssz</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>M</declname>
        </param>
        <briefdescription>
<para>Set reserve memory according to skin size and some arbitrary number of particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function reserves space for the vectors in <computeroutput>network.skins[]</computeroutput>, the amount of space being based on the assumption that each particle has at most <computeroutput>M</computeroutput> particles it interacts with and they are uniformly distributed over the system.</para>
        </inbodydescription>
        <location file="libmd.h" line="453" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="191" bodyend="204"/>
        <references refid="autodiff_8libmd_8cc_a040c41bf3dc05dcba9979d734c21baee_1a040c41bf3dc05dcba9979d734c21baee" compoundref="autodiff_8libmd_8cc" startline="339" endline="342">acos</references>
        <references refid="macros_8libmd_8h_ab4207136f5c605de61321805bf9e70e1_1ab4207136f5c605de61321805bf9e70e1" compoundref="macros_8libmd_8h" startline="82">DEBUG_1</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a9282fd8d82a54bb7d4f76685c3bf5432_1a9282fd8d82a54bb7d4f76685c3bf5432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_type</definition>
        <argsstring>(ui p, ui newtype)</argsstring>
        <name>set_type</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>newtype</declname>
        </param>
        <briefdescription>
<para>Update the type associated with particle p. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Sets the type of particle <computeroutput>p</computeroutput> to <computeroutput>newtype</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="454" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="206" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a1d065a8e59428d1c6845bc4dc60db6e3_1a1d065a8e59428d1c6845bc4dc60db6e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_index_method</definition>
        <argsstring>(ui method)</argsstring>
        <name>set_index_method</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
<para>Set indexmethod. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Sets the indexing method to <computeroutput>method</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="455" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="214" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a1ecf37a44dfa7401593a05b4aaed7d68_1a1ecf37a44dfa7401593a05b4aaed7d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::index</definition>
        <argsstring>()</argsstring>
        <name>index</name>
        <briefdescription>
<para>Find neighbors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function finds all the pairs of particles that are within <computeroutput>network.ssz</computeroutput> of each other and have an interaction. They are then put in each other&apos;s skinlist (<computeroutput>network.skins[]</computeroutput>).<linebreak/>
 It calls the algorithm specificied by <computeroutput>indexdata.method</computeroutput>: <ref refid="structmd_a32c3d5e5fe53203d0754ac9706bd0f21_1a32c3d5e5fe53203d0754ac9706bd0f21" kindref="member">md&lt;dim&gt;::bruteforce()</ref>, <ref refid="structmd_a7a10193ac507980720263dd95d259958_1a7a10193ac507980720263dd95d259958" kindref="member">md&lt;dim&gt;::kdtree()</ref> or <ref refid="structmd_af99c7ccc16292d4c1cdb07bd0c9ac895_1af99c7ccc16292d4c1cdb07bd0c9ac895" kindref="member">md&lt;dim&gt;::cell()</ref>.</para>
        </inbodydescription>
        <location file="libmd.h" line="456" column="10" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="14" bodyend="35"/>
        <references refid="struct_i_n_d_e_x_a4ee2ed52ee6dd3e482fc53a8db54065f_1a4ee2ed52ee6dd3e482fc53a8db54065fa1b389b04cffcf182a4e4434b1ed1e8b8" compoundref="enums_8libmd_8h" startline="8">INDEX::BRUTE_FORCE</references>
        <references refid="struct_i_n_d_e_x_a4ee2ed52ee6dd3e482fc53a8db54065f_1a4ee2ed52ee6dd3e482fc53a8db54065fa29d1bce3f3830b4b695c1bf27f7f6529" compoundref="enums_8libmd_8h" startline="8">INDEX::KD_TREE</references>
      </memberdef>
      <memberdef kind="function" id="structmd_aee6148340ce4331e84344df87f4e1800_1aee6148340ce4331e84344df87f4e1800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::test_index</definition>
        <argsstring>()</argsstring>
        <name>test_index</name>
        <briefdescription>
<para>Test if we need to run the indexing algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function determines if re-indexing is necessary, based on the position of each particle at the last time of indexing (<computeroutput>xsk[]</computeroutput>): If no particle has moved by more than <formula id="27">$(ssz-rco)/2$</formula>, then there is no pair of particles that were more than <computeroutput>network.ssz</computeroutput> apart, but now less than <computeroutput>network.rco</computeroutput> apart, so re-indexing is not necessary. Otherwise, re-indexing might be necessary and thus should be done.</para>
        </inbodydescription>
        <location file="libmd.h" line="457" column="10" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="37" bodyend="55"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a9dfeaa20a38920b6f7e5b4221a815ac9_1a9dfeaa20a38920b6f7e5b4221a815ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_index_stick</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_index_stick</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Save the particle position at indexing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function copies the current position <computeroutput>x[]</computeroutput> of particle <computeroutput>i</computeroutput> to <computeroutput>xsk[]</computeroutput>, for use by <ref refid="structmd_aee6148340ce4331e84344df87f4e1800_1aee6148340ce4331e84344df87f4e1800" kindref="member">md&lt;dim&gt;::test_index()</ref>.</para>
        </inbodydescription>
        <location file="libmd.h" line="458" column="10" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="6" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a8ab281a337c8448f30b808ef51be99e6_1a8ab281a337c8448f30b808ef51be99e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::kdtree_build</definition>
        <argsstring>(ui first, ui last, ui level)</argsstring>
        <name>kdtree_build</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>k-d tree indexing algorithm: tree build function (recursive) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function recursively builds the k-d tree, to be used by <ref refid="structmd_a7a10193ac507980720263dd95d259958_1a7a10193ac507980720263dd95d259958" kindref="member">md&lt;dim&gt;::kdtree()</ref>.<linebreak/>
 The particles in the subtree marked by <computeroutput>first</computeroutput> and <computeroutput>last</computeroutput> at recursion depth <computeroutput>level</computeroutput> are split into two subtrees of (about) equal size. The particles in one subtree have a lower value of their position coordinate in a given dimension than the particles in the other subtree. The dimension is specified by <computeroutput>indexdata.kdtreedata.DivideByDim[level]</computeroutput>, which is set by <ref refid="structmd_a7a10193ac507980720263dd95d259958_1a7a10193ac507980720263dd95d259958" kindref="member">md&lt;dim&gt;::kdtree()</ref>. The two subtrees are build recursively.</para>
        </inbodydescription>
        <location file="libmd.h" line="459" column="8" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="60" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structmd_af6fbb4becba7012a1914b5eee637d718_1af6fbb4becba7012a1914b5eee637d718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::kdtree_index</definition>
        <argsstring>(ui first1, ui last1, ui first2, ui last2)</argsstring>
        <name>kdtree_index</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>first1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>last1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>first2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>last2</declname>
        </param>
        <briefdescription>
<para>k-d tree indexing algorithm: neighbor finder (recursive) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function recursively finds neighboring particles, one from subtree 1, the other from subtree 2 (possibly the same subtree).<linebreak/>
 First it is checked if the subtrees are too far apart; nothing is done then. Otherwise, the function is called for every combination of subtrees. When a leaf is reached, the single particle is checked against the particle<bold></bold>(s) in the other subtree.</para>
        </inbodydescription>
        <location file="libmd.h" line="460" column="10" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="91" bodyend="138"/>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" compoundref="enums_8libmd_8h" startline="7">BCOND::PERIODIC</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a7a10193ac507980720263dd95d259958_1a7a10193ac507980720263dd95d259958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::kdtree</definition>
        <argsstring>()</argsstring>
        <name>kdtree</name>
        <briefdescription>
<para>k-d tree indexing algorithm </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This indexing function uses a k-d tree (a multidimensional binary tree).<linebreak/>
 It makes use of the recursive functions <ref refid="structmd_a8ab281a337c8448f30b808ef51be99e6_1a8ab281a337c8448f30b808ef51be99e6" kindref="member">md&lt;dim&gt;::kdtree_build()</ref> and <ref refid="structmd_af6fbb4becba7012a1914b5eee637d718_1af6fbb4becba7012a1914b5eee637d718" kindref="member">md&lt;dim&gt;::kdtree_index()</ref>.<linebreak/>
 It does not work if there is both shear and a dimension with periodic boundary conditions.</para>
        </inbodydescription>
        <location file="libmd.h" line="461" column="10" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="140" bodyend="179"/>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946ae60ceea4da62257e104c5ac6aa720a31" compoundref="enums_8libmd_8h" startline="7">BCOND::BOXSHEAR</references>
        <references refid="macros_8libmd_8h_a4d48c340b3c83579a8d58cb20a320f84_1a4d48c340b3c83579a8d58cb20a320f84" compoundref="macros_8libmd_8h" startline="58">ERROR</references>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" compoundref="enums_8libmd_8h" startline="7">BCOND::PERIODIC</references>
      </memberdef>
      <memberdef kind="function" id="structmd_af99c7ccc16292d4c1cdb07bd0c9ac895_1af99c7ccc16292d4c1cdb07bd0c9ac895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::cell</definition>
        <argsstring>()</argsstring>
        <name>cell</name>
        <briefdescription>
<para>Cell indexing algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This indexing algorithm uses the cell method.<linebreak/>
 The system is divided into cells of equal size, which are at least <computeroutput>network.ssz</computeroutput> in size in each dimension. The particles are put in their corresponding cells. Two particles that are in cells that do not share at least a corner will be more than <computeroutput>network.ssz</computeroutput> apart, therefore such pairs of cells need not be checked.<linebreak/>
</para>
        </inbodydescription>
        <location file="libmd.h" line="462" column="10" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="265" bodyend="367"/>
        <references refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" compoundref="autodiff_8libmd_8cc" startline="364" endline="367">abs</references>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" compoundref="macros_8libmd_8h" startline="106">DEBUG_3</references>
        <references refid="macros_8libmd_8h_a4d48c340b3c83579a8d58cb20a320f84_1a4d48c340b3c83579a8d58cb20a320f84" compoundref="macros_8libmd_8h" startline="58">ERROR</references>
        <references refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" compoundref="libmd_8h" startline="45">F_LDF</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a32d3e55bfbbebfbc73f0aca3242d8b3b_1a32d3e55bfbbebfbc73f0aca3242d8b3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_cell</definition>
        <argsstring>(ui c)</argsstring>
        <name>thread_cell</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Cell indexer for cell c (thread) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function finds the neighbors of all particles in cell <computeroutput>c</computeroutput>. It does this by considering (half of) all neighboring cells, such that no pairs of cells are processed twice.</para>
        </inbodydescription>
        <location file="libmd.h" line="463" column="10" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="183" bodyend="262"/>
        <references refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" compoundref="autodiff_8libmd_8cc" startline="364" endline="367">abs</references>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946ae60ceea4da62257e104c5ac6aa720a31" compoundref="enums_8libmd_8h" startline="7">BCOND::BOXSHEAR</references>
        <references refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" compoundref="macros_8libmd_8h" startline="106">DEBUG_3</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" compoundref="enums_8libmd_8h" startline="7">BCOND::PERIODIC</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a32c3d5e5fe53203d0754ac9706bd0f21_1a32c3d5e5fe53203d0754ac9706bd0f21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::bruteforce</definition>
        <argsstring>()</argsstring>
        <name>bruteforce</name>
        <briefdescription>
<para>Bruteforce indexing algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This brute force indexing algorithm simply checks every pair of particles.<linebreak/>
 This function is to be preferred over <ref refid="structmd_af99c7ccc16292d4c1cdb07bd0c9ac895_1af99c7ccc16292d4c1cdb07bd0c9ac895" kindref="member">md&lt;dim&gt;::cell()</ref> and <ref refid="structmd_a7a10193ac507980720263dd95d259958_1a7a10193ac507980720263dd95d259958" kindref="member">md&lt;dim&gt;::kdtree()</ref> if all (or most) particles are within <computeroutput>network.ssz</computeroutput> of each other.</para>
        </inbodydescription>
        <location file="libmd.h" line="464" column="10" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="369" bodyend="380"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_af4e3c55b8f17dfb069af504e6a2c750c_1af4e3c55b8f17dfb069af504e6a2c750c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::skinner</definition>
        <argsstring>(ui i, ui j, ldf sszsq)</argsstring>
        <name>skinner</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>sszsq</declname>
        </param>
        <briefdescription>
<para>Places interactionneighbor in skin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function is used by the indexing algorithms. It checks if the squared distance between particles <computeroutput>i</computeroutput> and <computeroutput>j</computeroutput> is less than <computeroutput>sszsq</computeroutput> and if they have a (superparticle) type interaction; if so, it adds them (with the interaction) to each other&apos;s skinlist.<linebreak/>
</para>
        </inbodydescription>
        <location file="libmd.h" line="465" column="10" bodyfile="libmd-src/md/index.md.libmd.cc" bodystart="382" bodyend="413"/>
        <references refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" compoundref="macros_8libmd_8h" startline="106">DEBUG_3</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="structinteractionneighbor_a8a7a87a5baf3f17681168c65a37f3a71_1a8a7a87a5baf3f17681168c65a37f3a71" compoundref="libmd_8h" startline="193">interactionneighbor::neighbor</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ad5f3412e14bab3bc31be3610d843d8d0_1ad5f3412e14bab3bc31be3610d843d8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_clear_forces</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_clear_forces</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Clear forces for particle i. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Clear the forces variable of particle <computeroutput>i</computeroutput></para>
        </inbodydescription>
        <location file="libmd.h" line="466" column="10" bodyfile="libmd-src/md/forces.md.libmd.cc" bodystart="6" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ac3b4dfe4eba7350b266d30517671bdb6_1ac3b4dfe4eba7350b266d30517671bdb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_calc_pot_forces</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_calc_pot_forces</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Calculate the forces for particle i&gt;j with atomics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the forces induced by the potentials acting on particle <computeroutput>i</computeroutput></para>
        </inbodydescription>
        <location file="libmd.h" line="467" column="10" bodyfile="libmd-src/md/forces.md.libmd.cc" bodystart="14" bodyend="38"/>
        <references refid="macros_8libmd_8h_afefca75c5eec58a9b2f18b25a8b649b5_1afefca75c5eec58a9b2f18b25a8b649b5" compoundref="macros_8libmd_8h" startline="106">DEBUG_3</references>
        <references refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" compoundref="libmd_8h" startline="45">F_LDF</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" compoundref="autodiff_8libmd_8cc" startline="268" endline="272">sqrt</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ae5f5825a2524b24a6ed913caeb90a8b6_1ae5f5825a2524b24a6ed913caeb90a8b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_calc_ext_forces</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_calc_ext_forces</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Calculate the forces for particle i&gt;j with atomics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calculates the forces induced by external forces acting on particle <computeroutput>i</computeroutput></para>
        </inbodydescription>
        <location file="libmd.h" line="468" column="10" bodyfile="libmd-src/md/forces.md.libmd.cc" bodystart="40" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a9b5ff183b3beb9c9411291a23bc0b80b_1a9b5ff183b3beb9c9411291a23bc0b80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::update_boundaries</definition>
        <argsstring>()</argsstring>
        <name>update_boundaries</name>
        <briefdescription>
<para>Shifts the periodic boxes appropriately for sheared BC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Update the box matrix using the shear velocities. Increments the box matrix <formula id="32">$L_{ij}$</formula> (stored in <computeroutput>simbox.Lshear</computeroutput>) by <formula id="33">$h\times v_{ij}$</formula> where <formula id="34">$v_{ij}$</formula> is the shear velocity matrix (stored in <computeroutput>simbox.vshear</computeroutput>) and <formula id="1">$h$</formula> is the integration timestep (stored in <computeroutput>integrator.h</computeroutput>). <linebreak/>
 Also shifts <formula id="32">$L_{ij}$</formula> to ensure that it remains within the bounds <formula id="35">$-L_{ii}/2 \leq L_{ij} \leq L_{ii}/2$</formula>.</para>
        </inbodydescription>
        <location file="libmd.h" line="471" column="10" bodyfile="libmd-src/md/periodicity.md.libmd.cc" bodystart="43" bodyend="66"/>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946ae60ceea4da62257e104c5ac6aa720a31" compoundref="enums_8libmd_8h" startline="7">BCOND::BOXSHEAR</references>
        <references refid="struct_b_c_o_n_d_a565f9cf3347ba75b9bfc64ec12d69946_1a565f9cf3347ba75b9bfc64ec12d69946a975aaa41fc29d28d5513e2907b29f1ce" compoundref="enums_8libmd_8h" startline="7">BCOND::PERIODIC</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a0395ea5f8b917457f3775b59da0b3734_1a0395ea5f8b917457f3775b59da0b3734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::periodicity</definition>
        <argsstring>()</argsstring>
        <name>periodicity</name>
        <briefdescription>
<para>Called after integration to keep the particle within the defined boundaries. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Update positions and velocities of particles to respect the appropriate boundary conditions. <linebreak/>
 This function loops through the <computeroutput>dim</computeroutput> dimensions, and updates the positions and velocities of all (non-fixed) particles that have passed through the boundary perpendicular to dimension <computeroutput>d</computeroutput>, based on the value of <computeroutput>simbox.bcond[d]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="472" column="10" bodyfile="libmd-src/md/periodicity.md.libmd.cc" bodystart="26" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a1d26b450a1187048455396a00c361be4_1a1d26b450a1187048455396a00c361be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_periodicity</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_periodicity</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Apply periodicity to one particle only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function loops through the <computeroutput>dim</computeroutput> dimensions, and updates the position and velocity of particle <computeroutput>i</computeroutput> to respect the boundary conditions of any boundary it might have passed through in the last time step.</para>
        </inbodydescription>
        <location file="libmd.h" line="473" column="10" bodyfile="libmd-src/md/periodicity.md.libmd.cc" bodystart="6" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a5a6d17288575ff5183960eaaf56266f9_1a5a6d17288575ff5183960eaaf56266f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_periodicity</definition>
        <argsstring>(ldf x[dim])</argsstring>
        <name>thread_periodicity</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Apply periodicity to one particle only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function loops through the <computeroutput>dim</computeroutput> dimensions, and updates the position and velocity of particle <computeroutput>i</computeroutput> to respect the boundary conditions of any boundary it might have passed through in the last time step.</para>
        </inbodydescription>
        <location file="libmd.h" line="474" column="10" bodyfile="libmd-src/md/periodicity.md.libmd.cc" bodystart="16" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ab268b10a893abd008382df06da416a5a_1ab268b10a893abd008382df06da416a5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_seuler</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_seuler</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Symplectic euler integrator (threaded) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function integrates particle <computeroutput>i</computeroutput> using symplectic Euler. <linebreak/>
 The symplectic Euler integrator is simpelest (and fastest) symplectic integrator. <linebreak/>
 The integrator is a first order integrator. <linebreak/>
 Sometimes symplectic Euler is also refered: to as Semi-implicit Euler, Euler<ndash/>Cromer or Newton-Stoermer-Verlet. <linebreak/>
 Symplectic Euler takes the following form: <formula id="28">\begin{align} \dot{x}^{\mu}_{t+1}=&amp;\dot{x}^{\mu}_{t}+\tfrac{h}{m} F^{\mu}_{t}\\ x^{\mu}_{t+1}=&amp; x^{\mu}_{t}+h\dot{x}^{\mu}_{t+1}\end{align}</formula></para>
        </inbodydescription>
        <location file="libmd.h" line="475" column="10" bodyfile="libmd-src/md/integrator.md.libmd.cc" bodystart="6" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a151360bcbdea5b086399aded05d7ade8_1a151360bcbdea5b086399aded05d7ade8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_vverlet_x</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_vverlet_x</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Velocity verlet integrator for position (threaded) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function integrates particle position <computeroutput>i</computeroutput> using Velocity Verlet. <linebreak/>
 See <ref refid="structmd_aab0e1d2ec505cfb5160de37b470c1f1b_1aab0e1d2ec505cfb5160de37b470c1f1b" kindref="member">md&lt;dim&gt;::thread_vverlet_dx</ref> for the particle velocity part. <linebreak/>
 Velocity Verlet is a second order symplectic integrator. <linebreak/>
 It is slower than symplectic Euler (see <ref refid="structmd_ab268b10a893abd008382df06da416a5a_1ab268b10a893abd008382df06da416a5a" kindref="member">md&lt;dim&gt;::thread_seuler</ref>), yet more accurate. <linebreak/>
 Velocity Verlet takes the following form: <formula id="29">\begin{align}x^{\mu}_{t+1}=&amp;x^{\mu}_{t}+h\dot{x}^{\mu}_{t}+\tfrac{h^2}{2}F^{\mu}_{t}\\ \dot{x}^{\mu}_{t+1}=&amp;\dot{x}^{\mu}_{t}+\tfrac{h}{2}(F^{\mu}_{t}+F^{\mu}_{t+1})\end{align}</formula> Because of the second force ( <formula id="30">$F^{\mu}_{t+1}$</formula>) calculation this function is split in two. <linebreak/>
</para>
        </inbodydescription>
        <location file="libmd.h" line="476" column="10" bodyfile="libmd-src/md/integrator.md.libmd.cc" bodystart="25" bodyend="38"/>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
      </memberdef>
      <memberdef kind="function" id="structmd_aab0e1d2ec505cfb5160de37b470c1f1b_1aab0e1d2ec505cfb5160de37b470c1f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_vverlet_dx</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_vverlet_dx</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Velocity verlet integrator for velocity (threaded) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function integrates particle velocity <computeroutput>i</computeroutput> using Velocity Verlet. <linebreak/>
 See <ref refid="structmd_a151360bcbdea5b086399aded05d7ade8_1a151360bcbdea5b086399aded05d7ade8" kindref="member">md&lt;dim&gt;::thread_vverlet_x</ref> for the particle position part. <linebreak/>
 Velocity Verlet is a second order symplectic integrator. <linebreak/>
 It is slower than symplectic Euler (see <ref refid="structmd_ab268b10a893abd008382df06da416a5a_1ab268b10a893abd008382df06da416a5a" kindref="member">md&lt;dim&gt;::thread_seuler</ref>), yet more accurate. <linebreak/>
 Velocity Verlet takes the following form: <formula id="29">\begin{align}x^{\mu}_{t+1}=&amp;x^{\mu}_{t}+h\dot{x}^{\mu}_{t}+\tfrac{h^2}{2}F^{\mu}_{t}\\ \dot{x}^{\mu}_{t+1}=&amp;\dot{x}^{\mu}_{t}+\tfrac{h}{2}(F^{\mu}_{t}+F^{\mu}_{t+1})\end{align}</formula> Because of the second force ( <formula id="30">$F^{\mu}_{t+1}$</formula>) calculation this function is split in two. <linebreak/>
</para>
        </inbodydescription>
        <location file="libmd.h" line="477" column="10" bodyfile="libmd-src/md/integrator.md.libmd.cc" bodystart="40" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a79f30630408b53f5cfb308e4700cc627_1a79f30630408b53f5cfb308e4700cc627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_first_order</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_first_order</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>First order (Euler) integrator (threaded) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function integrates particle position <computeroutput>i</computeroutput> using Euler first order. <linebreak/>
 This is useful for implementing Vicsek type models</para>
        </inbodydescription>
        <location file="libmd.h" line="478" column="10" bodyfile="libmd-src/md/integrator.md.libmd.cc" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structmd_af9208aee87634536a1a00cc1346d8b56_1af9208aee87634536a1a00cc1346d8b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::thread_overdamped</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_overdamped</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>First order (Euler) integrator for overdamped dynamics (threaded) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function integrates particle position <computeroutput>i</computeroutput> using Euler first order. <linebreak/>
 This is useful for implementing overdamped systems</para>
        </inbodydescription>
        <location file="libmd.h" line="479" column="10" bodyfile="libmd-src/md/integrator.md.libmd.cc" bodystart="64" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a9dfabbfd13fc5fb8d651edc7ad1ef293_1a9dfabbfd13fc5fb8d651edc7ad1ef293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::timestep</definition>
        <argsstring>()</argsstring>
        <name>timestep</name>
        <briefdescription>
<para>Do one timestep. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function defines a timestep by combining the <ref refid="structmd_ac7139593c6d2f8acc2bb478a0a70f1f4_1ac7139593c6d2f8acc2bb478a0a70f1f4" kindref="member">md&lt;dim&gt;::calc_forces</ref> and <ref refid="structmd_a7254ea0201ee881fd53c6722e6473e5f_1a7254ea0201ee881fd53c6722e6473e5f" kindref="member">md&lt;dim&gt;::integrate</ref> functions. <linebreak/>
 If there is a boxshear present it updates the boundaries.</para>
        </inbodydescription>
        <location file="libmd.h" line="481" column="10" bodyfile="libmd-src/md/integrator.md.libmd.cc" bodystart="106" bodyend="120"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ab05795ae636fad01edb1eed8ce309ac6_1ab05795ae636fad01edb1eed8ce309ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::timesteps</definition>
        <argsstring>(ui k)</argsstring>
        <name>timesteps</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Do multiple timesteps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function calls <ref refid="structmd_a9dfabbfd13fc5fb8d651edc7ad1ef293_1a9dfabbfd13fc5fb8d651edc7ad1ef293" kindref="member">md&lt;dim&gt;::timestep</ref> <computeroutput>k</computeroutput> times.<linebreak/>
 (The looped is sandwiched between DEBUG_TIMER statements.)</para>
        </inbodydescription>
        <location file="libmd.h" line="482" column="10" bodyfile="libmd-src/md/integrator.md.libmd.cc" bodystart="122" bodyend="131"/>
        <references refid="macros_8libmd_8h_a75eb947f9b8c2f4fbec83008ec23e9ec_1a75eb947f9b8c2f4fbec83008ec23e9ec" compoundref="macros_8libmd_8h" startline="118">DEBUG_TIMER</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a0d2ca0ce11d4d74a838b4d44ccdcfb44_1a0d2ca0ce11d4d74a838b4d44ccdcfb44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_pos</definition>
        <argsstring>(ldf *x)</argsstring>
        <name>import_pos</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Load positions from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Each <computeroutput>i</computeroutput>th element is then assigned to the particle the <computeroutput>d</computeroutput>th component of the particle&apos;s position <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="483" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="6" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a466230abbecdaf79ed543b298ca570b6_1a466230abbecdaf79ed543b298ca570b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_pos</definition>
        <argsstring>(ldf *x, arg...argv)</argsstring>
        <name>import_pos</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Load positions from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Each <computeroutput>i</computeroutput>th element is then assigned to the particle the <computeroutput>d</computeroutput>th component of the particle&apos;s position <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="484" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="18" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a20c11db47d24acf1d67de89dad075040_1a20c11db47d24acf1d67de89dad075040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_pos</definition>
        <argsstring>(ui i, ldf x)</argsstring>
        <name>import_pos</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Load position for i from value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 The values are then then assigned to the <computeroutput>d</computeroutput>th component of the <computeroutput>i</computeroutput>th particle&apos;s position <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every value.</para>
        </inbodydescription>
        <location file="libmd.h" line="485" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="31" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a9c1495fd5a030a2b9ce9bdf25cb670a5_1a9c1495fd5a030a2b9ce9bdf25cb670a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_pos</definition>
        <argsstring>(ui i, ldf x, arg...argv)</argsstring>
        <name>import_pos</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Load position for i from value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 The values are then then assigned to the <computeroutput>d</computeroutput>th component of the <computeroutput>i</computeroutput>th particle&apos;s position <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every value.</para>
        </inbodydescription>
        <location file="libmd.h" line="486" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="42" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a3978e57d265eb88a59ddfe554fa18f05_1a3978e57d265eb88a59ddfe554fa18f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_vel</definition>
        <argsstring>(ldf *dx)</argsstring>
        <name>import_vel</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
<para>Load velocity from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Each <computeroutput>i</computeroutput>th element is then assigned to the particle the <computeroutput>d</computeroutput>th component of the particle&apos;s velocity <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="487" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="54" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structmd_afc66c884b684de15eb6a0de419e61077_1afc66c884b684de15eb6a0de419e61077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_vel</definition>
        <argsstring>(ldf *dx, arg...argv)</argsstring>
        <name>import_vel</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Load velocity from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Each <computeroutput>i</computeroutput>th element is then assigned to the particle the <computeroutput>d</computeroutput>th component of the particle&apos;s velocity <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="488" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="66" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a04f9829831166c30f7c9bc74a84620a7_1a04f9829831166c30f7c9bc74a84620a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_vel</definition>
        <argsstring>(ui i, ldf dx)</argsstring>
        <name>import_vel</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>dx</declname>
        </param>
        <briefdescription>
<para>Load velocity for i from value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 The values are then then assigned to the <computeroutput>d</computeroutput>th component of the <computeroutput>i</computeroutput>th particle&apos;s velocity <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every value.</para>
        </inbodydescription>
        <location file="libmd.h" line="489" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="79" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a8ad2eef5e8c3d7df545a00621c1ca8e4_1a8ad2eef5e8c3d7df545a00621c1ca8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_vel</definition>
        <argsstring>(ui i, ldf dx, arg...argv)</argsstring>
        <name>import_vel</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>dx</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Load velocity for i from value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 The values are then then assigned to the <computeroutput>d</computeroutput>th component of the <computeroutput>i</computeroutput>th particle&apos;s velocity<linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every value.</para>
        </inbodydescription>
        <location file="libmd.h" line="490" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="90" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a50bf4ccf11941a53886388e01580d55f_1a50bf4ccf11941a53886388e01580d55f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_force</definition>
        <argsstring>(ldf *F)</argsstring>
        <name>import_force</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Load forces from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Each <computeroutput>i</computeroutput>th element is then assigned to the particle the <computeroutput>d</computeroutput>th component of the particle&apos;s force<linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="491" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="102" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ae9d9fea7b1ccd15ce3e611bd216a97f8_1ae9d9fea7b1ccd15ce3e611bd216a97f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_force</definition>
        <argsstring>(ldf *F, arg...argv)</argsstring>
        <name>import_force</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>F</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Load forces from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Each <computeroutput>i</computeroutput>th element is then assigned to the particle the <computeroutput>d</computeroutput>th component of the particle&apos;s force<linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="492" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="114" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a316fb8fdcc2498d62afba87cb24d8f4e_1a316fb8fdcc2498d62afba87cb24d8f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_force</definition>
        <argsstring>(ui i, ldf F)</argsstring>
        <name>import_force</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Load position for i from value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 The values are then then assigned to the <computeroutput>d</computeroutput>th component of the <computeroutput>i</computeroutput>th particle&apos;s force <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every value.</para>
        </inbodydescription>
        <location file="libmd.h" line="493" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="127" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a84a7a4707ddba2ca71cdf108aa416a70_1a84a7a4707ddba2ca71cdf108aa416a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::import_force</definition>
        <argsstring>(ui i, ldf F, arg...argv)</argsstring>
        <name>import_force</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Load position for i from value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 The values are then then assigned to the <computeroutput>d</computeroutput>th component of the <computeroutput>i</computeroutput>th particle&apos;s force <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every value.</para>
        </inbodydescription>
        <location file="libmd.h" line="494" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="138" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a3daa3be8a5fad461fcd3b1faa6a04352_1a3daa3be8a5fad461fcd3b1faa6a04352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_pos</definition>
        <argsstring>(ldf *x)</argsstring>
        <name>export_pos</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Save positions from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle position every <computeroutput>d</computeroutput>th component is assigned to that array <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="495" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="150" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a9c69107edc2c612811b41015044cb7df_1a9c69107edc2c612811b41015044cb7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_pos</definition>
        <argsstring>(ldf *x, arg...argv)</argsstring>
        <name>export_pos</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Save positions to arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle position every <computeroutput>d</computeroutput>th component is assigned to that array <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="496" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="162" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a6089b52b54c649e24c450215e619013a_1a6089b52b54c649e24c450215e619013a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_pos</definition>
        <argsstring>(ui i, ldf &amp;x)</argsstring>
        <name>export_pos</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Save positions from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle position every <computeroutput>d</computeroutput>th component is assigned to that value <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="497" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="175" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a2fb713ce41561853a43cdbaebca388d5_1a2fb713ce41561853a43cdbaebca388d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_pos</definition>
        <argsstring>(ui i, ldf &amp;x, arg...argv)</argsstring>
        <name>export_pos</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Save positions to arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle position every <computeroutput>d</computeroutput>th component is assigned to that value <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="498" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="186" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a4453e5a516790707442395eba9ed9342_1a4453e5a516790707442395eba9ed9342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_vel</definition>
        <argsstring>(ldf *dx)</argsstring>
        <name>export_vel</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
<para>Save velocity from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle velocity every <computeroutput>d</computeroutput>th component is assigned to that array <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="499" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="198" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ab62cd50283f0928c0959abd8111c492c_1ab62cd50283f0928c0959abd8111c492c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_vel</definition>
        <argsstring>(ldf *dx, arg...argv)</argsstring>
        <name>export_vel</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Save velocity to arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle velocity every <computeroutput>d</computeroutput>th component is assigned to that array <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="500" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="210" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="structmd_abe62e466f43fd808d8f74e31ad792e54_1abe62e466f43fd808d8f74e31ad792e54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_vel</definition>
        <argsstring>(ui i, ldf &amp;dx)</argsstring>
        <name>export_vel</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <briefdescription>
<para>Save positions from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle velocity every <computeroutput>d</computeroutput>th component is assigned to that value <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="501" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="223" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ab803ee1ac143c22862adaa47a1d8bf9c_1ab803ee1ac143c22862adaa47a1d8bf9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_vel</definition>
        <argsstring>(ui i, ldf &amp;dx, arg...argv)</argsstring>
        <name>export_vel</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Save positions to arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle velocity every <computeroutput>d</computeroutput>th component is assigned to that value <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="502" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="234" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a3d7c1a4d94f506222e64e3e1bbfc7492_1a3d7c1a4d94f506222e64e3e1bbfc7492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_force</definition>
        <argsstring>(ldf *F)</argsstring>
        <name>export_force</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Save forces from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle force every <computeroutput>d</computeroutput>th component is assigned to that array <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array. This function checks if forces need to be recalculated</para>
        </inbodydescription>
        <location file="libmd.h" line="503" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="246" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a13978bf83409bd32abe9fcc22f3b65fa_1a13978bf83409bd32abe9fcc22f3b65fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_force</definition>
        <argsstring>(ldf *F, arg...argv)</argsstring>
        <name>export_force</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> *</type>
          <declname>F</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Save forces to arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of arrays. <linebreak/>
 The array is assumed to be of length N, the number of particles. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle force every <computeroutput>d</computeroutput>th component is assigned to that array <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array. This function checks if forces need to be recalculated</para>
        </inbodydescription>
        <location file="libmd.h" line="504" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="260" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ac2b83504de73c233a463ea05ea7ea623_1ac2b83504de73c233a463ea05ea7ea623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_force</definition>
        <argsstring>(ui i, ldf &amp;F)</argsstring>
        <name>export_force</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Save forces from arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle force every <computeroutput>d</computeroutput>th component is assigned to that value <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="505" column="10" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="275" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a26f70e5328e8f8f97528351110d470ba_1a26f70e5328e8f8f97528351110d470ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>arg</declname>
            <defname>arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void md&lt; dim &gt;::export_force</definition>
        <argsstring>(ui i, ldf &amp;F, arg...argv)</argsstring>
        <name>export_force</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>arg...</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Save forces to arrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function takes an arbitrary number of values. <linebreak/>
 Then for each <computeroutput>i</computeroutput>th particle force every <computeroutput>d</computeroutput>th component is assigned to that value <linebreak/>
 As <computeroutput>d</computeroutput> is a variadic variable it is stored and increased for every array.</para>
        </inbodydescription>
        <location file="libmd.h" line="506" column="20" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="287" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a097149a531210104b80a5a84acb9e3f8_1a097149a531210104b80a5a84acb9e3f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::direct_readout_x</definition>
        <argsstring>(ui d, ui i)</argsstring>
        <name>direct_readout_x</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Directly readout a position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function is a somewhat redundant function that returns <computeroutput>particles[i].x[d]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="507" column="9" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="300" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="structmd_acfca03d4fcf18a0e3eab23423e06cd84_1acfca03d4fcf18a0e3eab23423e06cd84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::direct_readout_dx</definition>
        <argsstring>(ui d, ui i)</argsstring>
        <name>direct_readout_dx</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Directly readout a velocity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function is a somewhat redundant function that returns <computeroutput>particles[i].dx[d]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="508" column="9" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="308" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ad4ca80203244b35026043174d8281d6a_1ad4ca80203244b35026043174d8281d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::direct_readout_F</definition>
        <argsstring>(ui d, ui i)</argsstring>
        <name>direct_readout_F</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Directly readout a forces. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function returns <computeroutput>particles[i].F[d]</computeroutput> after it checks if a Force calculation is necessary.</para>
        </inbodydescription>
        <location file="libmd.h" line="509" column="9" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="316" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ad557ab182064478b8910b250f1ac8813_1ad557ab182064478b8910b250f1ac8813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::direct_readout</definition>
        <argsstring>(ui d, ui i, uc type)</argsstring>
        <name>direct_readout</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_af8ecdd9d7d0f3cdced7f9a83dc659959_1af8ecdd9d7d0f3cdced7f9a83dc659959" kindref="member">uc</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Directly readout a position&apos;x&apos;/velocity&apos;v&apos;/forces&apos;F&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function is convenience function for <computeroutput> type</computeroutput>: <itemizedlist>
<listitem>
<para><computeroutput>type=&apos;v&apos;</computeroutput> <ref refid="structmd_acfca03d4fcf18a0e3eab23423e06cd84_1acfca03d4fcf18a0e3eab23423e06cd84" kindref="member">md&lt;dim&gt;::direct_readout_dx</ref> <computeroutput>(d,i)</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>type=&apos;F&apos;</computeroutput> <ref refid="structmd_acfca03d4fcf18a0e3eab23423e06cd84_1acfca03d4fcf18a0e3eab23423e06cd84" kindref="member">md&lt;dim&gt;::direct_readout_dx</ref> <computeroutput>(d,i)</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>default</computeroutput> <ref refid="structmd_acfca03d4fcf18a0e3eab23423e06cd84_1acfca03d4fcf18a0e3eab23423e06cd84" kindref="member">md&lt;dim&gt;::direct_readout_dx</ref> <computeroutput>(d,i)</computeroutput> </para>
</listitem>
</itemizedlist>
</para>
        </inbodydescription>
        <location file="libmd.h" line="510" column="9" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="345" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="structmd_addcc3aaf34598264c99d0d4a189b71c3_1addcc3aaf34598264c99d0d4a189b71c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::direct_readout</definition>
        <argsstring>(ui i, uc type)</argsstring>
        <name>direct_readout</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_af8ecdd9d7d0f3cdced7f9a83dc659959_1af8ecdd9d7d0f3cdced7f9a83dc659959" kindref="member">uc</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Directly readout a position&apos;x&apos;/velocity&apos;v&apos;/forces&apos;F&apos;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function is convenience function for <computeroutput> type</computeroutput>: <itemizedlist>
<listitem>
<para><computeroutput>type=&apos;v&apos;</computeroutput> <ref refid="structmd_acfca03d4fcf18a0e3eab23423e06cd84_1acfca03d4fcf18a0e3eab23423e06cd84" kindref="member">md&lt;dim&gt;::direct_readout_dx</ref> <computeroutput>(d=vvars,i)</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>type=&apos;F&apos;</computeroutput> <ref refid="structmd_acfca03d4fcf18a0e3eab23423e06cd84_1acfca03d4fcf18a0e3eab23423e06cd84" kindref="member">md&lt;dim&gt;::direct_readout_dx</ref> <computeroutput>(d=vvars,i)</computeroutput> </para>
</listitem>
<listitem>
<para><computeroutput>default</computeroutput> <ref refid="structmd_acfca03d4fcf18a0e3eab23423e06cd84_1acfca03d4fcf18a0e3eab23423e06cd84" kindref="member">md&lt;dim&gt;::direct_readout_dx</ref> <computeroutput>(d=vvars,i)</computeroutput> </para>
</listitem>
</itemizedlist>
vvars is variadic_var</para>
        </inbodydescription>
        <location file="libmd.h" line="511" column="9" bodyfile="libmd-src/md/importexport.md.libmd.cc" bodystart="325" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="structmd_af422857393efc3ab9e748f12efc87f4d_1af422857393efc3ab9e748f12efc87f4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::fix_particle</definition>
        <argsstring>(ui i, bool fix)</argsstring>
        <name>fix_particle</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fix</declname>
        </param>
        <briefdescription>
<para>Fix a particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function fixes (<computeroutput>fix=true</computeroutput>) or unfixes (<computeroutput>fix=false</computeroutput>) particle <computeroutput>i</computeroutput></para>
        </inbodydescription>
        <location file="libmd.h" line="512" column="10" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="147" bodyend="154"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_add37bc67284c75d605f1a15d6f38c1c9_1add37bc67284c75d605f1a15d6f38c1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::fix_sp</definition>
        <argsstring>(ui spi, bool fix)</argsstring>
        <name>fix_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fix</declname>
        </param>
        <briefdescription>
<para>Fix a super particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function fixes (<computeroutput>fix=true</computeroutput>) or unfixes (<computeroutput>fix=false</computeroutput>) all the particles belonging to the superparticle with index <computeroutput>spi</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="513" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="188" bodyend="196"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_abbcc719c7c9820380432e5f1c0dc25c6_1abbcc719c7c9820380432e5f1c0dc25c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::clone_particle</definition>
        <argsstring>(ui i, ldf x[dim])</argsstring>
        <name>clone_particle</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Clone a particle and translate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new particle that is a copy of particle <computeroutput>i</computeroutput>. The position of the new particle is translated by the vector <computeroutput>x[]</computeroutput> with respect to the original one. It returns the index of the new particle.</para>
        </inbodydescription>
        <location file="libmd.h" line="514" column="8" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="156" bodyend="171"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_afa87cd3c320aca8244308b650a63b919_1afa87cd3c320aca8244308b650a63b919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::clone_sp</definition>
        <argsstring>(ui spi, ldf x[dim])</argsstring>
        <name>clone_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Clone a superparticle and translate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new superparticle that is a copy of the superparticle with index <computeroutput>spi</computeroutput>, with new particles. The position of all the new particles are translated by the vector <computeroutput>x[]</computeroutput> with respect to the original ones. It returns the index of the new superparticle in <computeroutput>network.superparticles[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="515" column="8" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="198" bodyend="221"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ab7ca8226b0ce940a1da8554fe6de0daf_1ab7ca8226b0ce940a1da8554fe6de0daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::translate_particle</definition>
        <argsstring>(ui i, ldf x[dim])</argsstring>
        <name>translate_particle</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Translate (or move) a particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function translates particle <computeroutput>i</computeroutput> by the vector <computeroutput>x[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="516" column="10" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="173" bodyend="187"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a528212f13bced99f7d50c5c21495591c_1a528212f13bced99f7d50c5c21495591c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::translate_sp</definition>
        <argsstring>(ui spi, ldf x[dim])</argsstring>
        <name>translate_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Translate (or move) a super particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function translates all particles belonging to the superparticle with index <computeroutput>spi</computeroutput> by the vector <computeroutput>x[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="517" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="223" bodyend="230"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a49ad95110ab2d8da99612f85cc0352d1_1a49ad95110ab2d8da99612f85cc0352d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::drift_particle</definition>
        <argsstring>(ui i, ldf dx[dim])</argsstring>
        <name>drift_particle</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>dx</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Add velocity to a particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds the vector <computeroutput>dx[]</computeroutput> to the velocity of particle <computeroutput>i</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="518" column="10" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="189" bodyend="196"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_abb7b161e967585126fd2c783ac67f6a3_1abb7b161e967585126fd2c783ac67f6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::drift_sp</definition>
        <argsstring>(ui spi, ldf dx[dim])</argsstring>
        <name>drift_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>dx</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Add velocity to a super particle (all particles the same) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds the vector <computeroutput>dx[]</computeroutput> to the velocities all particles belonging to the superparticle with index <computeroutput>spi</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="519" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="232" bodyend="239"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a5cacfed9b123e805170870e8aed6790c_1a5cacfed9b123e805170870e8aed6790c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::heat_particle</definition>
        <argsstring>(ui i, ldf lambda)</argsstring>
        <name>heat_particle</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Multiply velocity vector of a particle with a scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function increases the velocity of particle <computeroutput>i</computeroutput> by a factor of <computeroutput>lambda</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="520" column="10" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="198" bodyend="205"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a88967703577f8f8ccc83f484dd5ef2c8_1a88967703577f8f8ccc83f484dd5ef2c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::heat_sp</definition>
        <argsstring>(ui spi, ldf lambda)</argsstring>
        <name>heat_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Multiply velocity vectors of a super particle with a scalar (all particles the same) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function increases the velocity of all particles belonging to the superparticle with index <computeroutput>spi</computeroutput> by a factor of <computeroutput>lambda</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="521" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="241" bodyend="248"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ace0723e638c94d80c6706d46cc1e59ab_1ace0723e638c94d80c6706d46cc1e59ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_position_sp</definition>
        <argsstring>(ui spi, ldf x[dim])</argsstring>
        <name>set_position_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Get center of mass of super particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function translates the superparticle with index <computeroutput>spi</computeroutput> such that its center of mass is at position <computeroutput>x[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="522" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="250" bodyend="261"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ac064097ccc538e9671f65fe9fabb8af5_1ac064097ccc538e9671f65fe9fabb8af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_velocity_sp</definition>
        <argsstring>(ui spi, ldf dx[dim])</argsstring>
        <name>set_velocity_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>dx</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Assign velocity to a super particle (all particles the same) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function sets the velocity of all particles belonging to the superparticle with index <computeroutput>spi</computeroutput> equal to <computeroutput>dx[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="523" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="263" bodyend="270"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a6e79e218504c7eb06be43e8919628d2c_1a6e79e218504c7eb06be43e8919628d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::get_position_sp</definition>
        <argsstring>(ui spi, ldf x[dim])</argsstring>
        <name>get_position_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Get center of mass of super particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function puts the position of the center of mass of the superparticle with index <computeroutput>spi</computeroutput> in the vector <computeroutput>x[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="524" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="272" bodyend="288"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ae7f5d74eeec366573b93ba6bf015c301_1ae7f5d74eeec366573b93ba6bf015c301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::get_velocity_sp</definition>
        <argsstring>(ui spi, ldf dx[dim])</argsstring>
        <name>get_velocity_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>dx</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Get average velocity of a super particle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function puts the velocity of the center of mass of the superparticle with index <computeroutput>spi</computeroutput> in the vector <computeroutput>dx[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="525" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="290" bodyend="305"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a05ada8d55842d4cf7ae88bfe135cefda_1a05ada8d55842d4cf7ae88bfe135cefda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_sp</definition>
        <argsstring>(ui sptype)</argsstring>
        <name>add_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>sptype</declname>
        </param>
        <briefdescription>
<para>Add a superparticle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a superparticle of type <computeroutput>sptype</computeroutput> to <computeroutput>network.superparticles[]</computeroutput> and returns its index</para>
        </inbodydescription>
        <location file="libmd.h" line="526" column="8" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="6" bodyend="16"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a043c3e5e4b2b8b2d1eddcb48765b7d51_1a043c3e5e4b2b8b2d1eddcb48765b7d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_sp</definition>
        <argsstring>(ui spi)</argsstring>
        <name>rem_sp</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <briefdescription>
<para>Remove a superparticle (i.e. the structure, not the particles) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the superparticle with index <computeroutput>spi</computeroutput> from <computeroutput>network.superparticles[]</computeroutput> and resets the superparticle reference (<computeroutput>network.spid[]</computeroutput>) of all its particles. It returns whether the given superparticle existed.<linebreak/>
 Note: the last superparticle in <computeroutput>network.superparticles[]</computeroutput> takes the place of the removed one</para>
        </inbodydescription>
        <location file="libmd.h" line="527" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="18" bodyend="44"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a0bed77514d85a9bd861546afa0af698b_1a0bed77514d85a9bd861546afa0af698b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_sp_particles</definition>
        <argsstring>(ui spi)</argsstring>
        <name>rem_sp_particles</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <briefdescription>
<para>Remove all particles in a superparticle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes all the particles of the superparticle with index <computeroutput>spi</computeroutput> from the system and clears the superparticle (but does not remove it). It returns whether the given superparticle exists.</para>
        </inbodydescription>
        <location file="libmd.h" line="528" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="46" bodyend="69"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a1857afeac7bf05251c88d72840f696cd_1a1857afeac7bf05251c88d72840f696cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::sp_ingest</definition>
        <argsstring>(ui spi, ui i, ui idx=UI_MAX)</argsstring>
        <name>sp_ingest</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>idx</declname>
          <defval><ref refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" kindref="member">UI_MAX</ref></defval>
        </param>
        <briefdescription>
<para>Add a particle to a superparticle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function puts particle <computeroutput>i</computeroutput> in slot <computeroutput>idx</computeroutput> of the superparticle with index <computeroutput>spi</computeroutput>. If <computeroutput>idx</computeroutput> = <computeroutput>UI_MAX</computeroutput>, the index is set to highest index plus one. It returns the index. If the given superparticle does not exist, or the given particle is already in a superparticle, or the given slot is already taken, nothing is done and UI_MAX is returned.</para>
        </inbodydescription>
        <location file="libmd.h" line="529" column="8" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="71" bodyend="108"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a3c6a1ca471afcd982bdf9a79217bfc70_1a3c6a1ca471afcd982bdf9a79217bfc70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::sp_dispose</definition>
        <argsstring>(ui i)</argsstring>
        <name>sp_dispose</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Remove a particle from a superparticle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes particle <computeroutput>i</computeroutput> from its superparticle (but not from the system) It returns whether the given particle was in a superparticle.</para>
        </inbodydescription>
        <location file="libmd.h" line="530" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="110" bodyend="133"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a6438fb0d8ee34d18868e40abb5e0fb7a_1a6438fb0d8ee34d18868e40abb5e0fb7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::sp_dispose_idx</definition>
        <argsstring>(ui spi, ui idx)</argsstring>
        <name>sp_dispose_idx</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Remove a particle from a superparticle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes the particle from slot <computeroutput>idx</computeroutput> of the superparticle with index <computeroutput>spi</computeroutput> from the superparticle (but not from the system). It returns whether the given superparticle exists and has a particle in the given slot.</para>
        </inbodydescription>
        <location file="libmd.h" line="531" column="10" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="135" bodyend="167"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a2db2877593c6bf7fdf283d7a8a040602_1a2db2877593c6bf7fdf283d7a8a040602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::sp_pid</definition>
        <argsstring>(ui spi, ui idx)</argsstring>
        <name>sp_pid</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Reverse lookup of particle id in superparticle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function returns the id of the particle in slot <computeroutput>idx</computeroutput> of the superparticle with index <computeroutput>spi</computeroutput>. If the superparticle does not exist or it does not have a particle in the given slot, it returns UI_MAX.</para>
        </inbodydescription>
        <location file="libmd.h" line="532" column="8" bodyfile="libmd-src/md/sp.md.libmd.cc" bodystart="169" bodyend="186"/>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a44e8c07db19776f7a34d56f0dc90509b_1a44e8c07db19776f7a34d56f0dc90509b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_particle</definition>
        <argsstring>(ldf mass=1.0, ui ptype=0, bool fixed=false)</argsstring>
        <name>add_particle</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>mass</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ptype</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fixed</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a particle to the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a particle to the system and returns its index. Optionally, provide its mass (default: 1.0), type (default: 0) and/or whether it is fixed (default: false). The position and velocity of the new particle are not set.</para>
        </inbodydescription>
        <location file="libmd.h" line="533" column="8" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="6" bodyend="22"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a07ee32afeb6884e33b59dcfe57eb75c6_1a07ee32afeb6884e33b59dcfe57eb75c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_particle</definition>
        <argsstring>(ldf x[dim], ldf mass=1.0, ui ptype=0, bool fixed=false)</argsstring>
        <name>add_particle</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>mass</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ptype</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fixed</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a particle to the system at certain position. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a particle to the system at position <computeroutput>x[]</computeroutput> and returns its index. Optionally, provide its mass (default: 1.0), type (default: 0) and/or whether it is fixed (default: false). The velocity of the new particle is not set.</para>
        </inbodydescription>
        <location file="libmd.h" line="534" column="8" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="24" bodyend="38"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a24ba844ff0b1f6cc22f0f98213c75f11_1a24ba844ff0b1f6cc22f0f98213c75f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_particle</definition>
        <argsstring>(ldf x[dim], ldf dx[dim], ldf mass=1.0, ui ptype=0, bool fixed=false)</argsstring>
        <name>add_particle</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>dx</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>mass</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ptype</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fixed</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add a particle to the system at certain position with certain velocity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a particle to the system at position <computeroutput>x[]</computeroutput> with velocity <computeroutput>dx[]</computeroutput> and returns its index. Optionally, provide its mass (default: 1.0), type (default: 0) and/or whether it is fixed (default: false).</para>
        </inbodydescription>
        <location file="libmd.h" line="535" column="8" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="40" bodyend="54"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ac670af5743a66c26305555b403bc78ca_1ac670af5743a66c26305555b403bc78ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::add_particle</definition>
        <argsstring>(ldf x[dim], ldf dx[dim], uc bcond[dim], ldf mass=1.0, ui ptype=0, bool fixed=false, bool bconded=true)</argsstring>
        <name>add_particle</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>x</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>dx</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_af8ecdd9d7d0f3cdced7f9a83dc659959_1af8ecdd9d7d0f3cdced7f9a83dc659959" kindref="member">uc</ref></type>
          <declname>bcond</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>mass</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>ptype</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fixed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bconded</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Add a particle to the system at certain position with certain velocity with certain bconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a particle to the system at position <computeroutput>x[]</computeroutput> with velocity <computeroutput>dx[]</computeroutput> and returns its index. Optionally, provide its mass (default: 1.0), type (default: 0) and/or whether it is fixed (default: false).</para>
        </inbodydescription>
        <location file="libmd.h" line="536" column="8" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="56" bodyend="74"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a8f9f008ef44668edcc81465ee6fc633d_1a8f9f008ef44668edcc81465ee6fc633d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::rem_particle</definition>
        <argsstring>(ui i)</argsstring>
        <name>rem_particle</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Remove a particle from the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function removes particle <computeroutput>i</computeroutput> and all references to it from the system.<linebreak/>
 Note: particle <computeroutput>N-1</computeroutput> becomes the new particle <computeroutput>i</computeroutput> (if <formula id="31">$i&lt;N-1$</formula>).</para>
        </inbodydescription>
        <location file="libmd.h" line="537" column="10" bodyfile="libmd-src/md/particles.md.libmd.cc" bodystart="76" bodyend="145"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="macros_8libmd_8h_a4d48c340b3c83579a8d58cb20a320f84_1a4d48c340b3c83579a8d58cb20a320f84" compoundref="macros_8libmd_8h" startline="58">ERROR</references>
        <references refid="libmd_8h_a0912422c5c51b0116165d1714a0a56a7_1a0912422c5c51b0116165d1714a0a56a7" compoundref="libmd_8h" startline="50">F_UI</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a4c5edbb0e774965559a7fe13b536c2df_1a4c5edbb0e774965559a7fe13b536c2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear all particles and interactions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Remove all particles from the <ref refid="structmd" kindref="compound">md</ref> structure, and clear all data types storing interactions and superparticle data. Leaves the system box and the boundary conditions unchanged.</para>
        </inbodydescription>
        <location file="libmd.h" line="538" column="10" bodyfile="libmd-src/md.libmd.cc" bodystart="50" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a2a1909a3bd9ac56a741b7c2dd2cd38fc_1a2a1909a3bd9ac56a741b7c2dd2cd38fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_damping</definition>
        <argsstring>(ldf coefficient)</argsstring>
        <name>set_damping</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>coefficient</declname>
        </param>
        <briefdescription>
<para>Enables damping and sets damping coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds damping with the given coefficient, or changes the coefficient if damping was already set.</para>
        </inbodydescription>
        <location file="libmd.h" line="539" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="6" bodyend="23"/>
        <references refid="struct_e_x_t_f_o_r_c_e_ae0d69b9865d5f695184b9bd5bb549414_1ae0d69b9865d5f695184b9bd5bb549414abe9f35c74d55b423b9adebef5d0e0e88" compoundref="enums_8libmd_8h" startline="23">EXTFORCE::DAMPING</references>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_aeae5d38344bd9746908a939e55a8442e_1aeae5d38344bd9746908a939e55a8442e" compoundref="libmd_8h" startline="45">F_LDF</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a30700d23569c705d490529d2f1042c1f_1a30700d23569c705d490529d2f1042c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::unset_damping</definition>
        <argsstring>()</argsstring>
        <name>unset_damping</name>
        <briefdescription>
<para>Disables damping. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function disables damping and returns whether it was set.</para>
        </inbodydescription>
        <location file="libmd.h" line="540" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="25" bodyend="42"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_aec703f50a6b67ad247877b6cba147277_1aec703f50a6b67ad247877b6cba147277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::unset_langevin</definition>
        <argsstring>()</argsstring>
        <name>unset_langevin</name>
        <briefdescription>
<para>Disable Langevin thermostat. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function disables Langevin thermostat and returns whether it was set.</para>
        </inbodydescription>
        <location file="libmd.h" line="542" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="66" bodyend="85"/>
        <references refid="macros_8libmd_8h_acbe5e8b99e25562e699538dea76d37fa_1acbe5e8b99e25562e699538dea76d37fa" compoundref="macros_8libmd_8h" startline="94">DEBUG_2</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a4c787aef7f8ce4e643de3b6b70f7031e_1a4c787aef7f8ce4e643de3b6b70f7031e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_overdamped</definition>
        <argsstring>(ldf coefficient)</argsstring>
        <name>set_overdamped</name>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>coefficient</declname>
        </param>
        <briefdescription>
<para>Enable overdamped dynamics (with First oder integration) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function changes the integrator to <ref refid="struct_i_n_t_e_g_r_a_t_o_r_aca72c4b4e70e5554ba92d83a6ffa1fbc_1aca72c4b4e70e5554ba92d83a6ffa1fbcac2fcadec5c7709529f95c51206db881f" kindref="member">INTEGRATOR::FO_OVERDAMPED</ref> Using this function with <ref refid="structmd_a2a1909a3bd9ac56a741b7c2dd2cd38fc_1a2a1909a3bd9ac56a741b7c2dd2cd38fc" kindref="member">set_damping()</ref> might result in unwanted results</para>
        </inbodydescription>
        <location file="libmd.h" line="543" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="87" bodyend="101"/>
        <references refid="struct_i_n_t_e_g_r_a_t_o_r_aca72c4b4e70e5554ba92d83a6ffa1fbc_1aca72c4b4e70e5554ba92d83a6ffa1fbcac2fcadec5c7709529f95c51206db881f" compoundref="enums_8libmd_8h" startline="5">INTEGRATOR::FO_OVERDAMPED</references>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a668be5000ed2e92150ef021e79a4f661_1a668be5000ed2e92150ef021e79a4f661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::unset_overdamped</definition>
        <argsstring>()</argsstring>
        <name>unset_overdamped</name>
        <briefdescription>
<para>Disable overdamped dynamics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function restors the old integrator iff set_overdamped is used</para>
        </inbodydescription>
        <location file="libmd.h" line="544" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="103" bodyend="118"/>
        <references refid="struct_i_n_t_e_g_r_a_t_o_r_aca72c4b4e70e5554ba92d83a6ffa1fbc_1aca72c4b4e70e5554ba92d83a6ffa1fbcac2fcadec5c7709529f95c51206db881f" compoundref="enums_8libmd_8h" startline="5">INTEGRATOR::FO_OVERDAMPED</references>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ac79196653bac4d749f7ef27008a12fca_1ac79196653bac4d749f7ef27008a12fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::update_skins</definition>
        <argsstring>(ui p1, ui p2)</argsstring>
        <name>update_skins</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Modify skins after adding/modifying/removing bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Updates the skin lists of <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>. This function is called by functions that modify pairwise interactions between specific particle pairs, to rebuild the skins taking into account new particle ID assignments and interaction definitions.</para>
        </inbodydescription>
        <location file="libmd.h" line="545" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="6" bodyend="40"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a21674b3d7fe619e81706e844e47bd564_1a21674b3d7fe619e81706e844e47bd564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_bond</definition>
        <argsstring>(ui p1, ui p2, ui interaction)</argsstring>
        <name>add_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Add a bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a bond between particles <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> of previously-defined interaction type <computeroutput>interaction</computeroutput>. (See the <ref refid="md_doc_markdown_interactions_1md-pairpotentials" kindref="member">Interactions</ref> documentation for more information on interaction types.) <linebreak/>
<linebreak/>
 Does nothing and returns false if one of the following holds: <itemizedlist>
<listitem>
<para>an interaction already exists between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, </para>
</listitem>
<listitem>
<para>the interaction specified by the third argument does not exist or was previously removed. </para>
</listitem>
</itemizedlist>
Otherwise, creates a bond of the specified type between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, and returns <computeroutput>true</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="546" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="42" bodyend="77"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a05e01fd5c6051b0099b4f5e298f6cc6e_1a05e01fd5c6051b0099b4f5e298f6cc6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_bond</definition>
        <argsstring>(ui p1, ui p2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add a bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function adds a bond between particles <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> with the potential type and parameters specified in the arguments. (See the <ref refid="md_doc_markdown_interactions_1md-pairpotentials" kindref="member">Interactions</ref> documentation for more information on potential types and passing parameters.) <linebreak/>
<linebreak/>
 Does nothing if an interaction already exists between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, and returns <computeroutput>false</computeroutput>. Otherwise, creates a bond of the specified type between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, and returns <computeroutput>true</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="549" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="130" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a0920ab1964184b3c6e533c84f3760013_1a0920ab1964184b3c6e533c84f3760013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_bond</definition>
        <argsstring>(ui p1, ui p2, ui interaction)</argsstring>
        <name>mod_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Modify a bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function modifies any previous interaction between particles <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, and turns it into a bond of previously-defined interaction type specified in the third argument. (See the <ref refid="md_doc_markdown_interactions_1md-pairpotentials" kindref="member">Interactions</ref> documentation for more information on interaction types.) <linebreak/>
<linebreak/>
 Does nothing and returns false if one of the following holds: <itemizedlist>
<listitem>
<para>no interaction exists between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, </para>
</listitem>
<listitem>
<para>the interaction specified by the third argument does not exist or was previously removed. </para>
</listitem>
</itemizedlist>
Otherwise, creates a bond of the specified type between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, and returns <computeroutput>true</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="547" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="79" bodyend="113"/>
        <references refid="macros_8libmd_8h_a8d12d0f11fc9acd2f1fa22d80895ddae_1a8d12d0f11fc9acd2f1fa22d80895ddae" compoundref="macros_8libmd_8h" startline="70">WARNING</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a80ca82795b614b70e49f500ba5d35121_1a80ca82795b614b70e49f500ba5d35121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_bond</definition>
        <argsstring>(ui p1, ui p2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify a bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function modifies any previous interaction between particles <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> into a pair-specific bond with the potential type and parameters specified in the arguments. (See the <ref refid="md_doc_markdown_interactions_1md-pairpotentials" kindref="member">Interactions</ref> documentation for more information on potential types and passing parameters.) <linebreak/>
<linebreak/>
 Does nothing if an interaction already exists between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, and returns <computeroutput>false</computeroutput>. Otherwise, creates a bond of the specified type between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, and returns <computeroutput>true</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="550" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="150" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a514405c00064a980786fbea0d037b091_1a514405c00064a980786fbea0d037b091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::mad_bond</definition>
        <argsstring>(ui p1, ui p2, ui interaction)</argsstring>
        <name>mad_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Force add/modify bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Same as <ref refid="structmd_a21674b3d7fe619e81706e844e47bd564_1a21674b3d7fe619e81706e844e47bd564" kindref="member">md&lt;dim&gt;::add_bond(ui p1, ui p2, ui interaction)</ref>, but performs no checks. <linebreak/>
<linebreak/>
 <bold>Warning:</bold> Assumes that the specified interaction type actually exists, and replaces any previously defined interaction between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="548" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="115" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a06dd39c81ad62a295878cd43c5d25f49_1a06dd39c81ad62a295878cd43c5d25f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::mad_bond</definition>
        <argsstring>(ui p1, ui p2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mad_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Force add/modify bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Same as <ref refid="structmd_a05e01fd5c6051b0099b4f5e298f6cc6e_1a05e01fd5c6051b0099b4f5e298f6cc6e" kindref="member">md&lt;dim&gt;::add_bond(ui p1, ui p2, ui potential, std::vector&lt;ldf&gt; &amp;parameters)</ref>, but performs no checks. <linebreak/>
<linebreak/>
 <bold>Warning:</bold> Replaces any previously defined interaction between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="551" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="171" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structmd_aa0c8d2a3bb58c4da796d2d579a4218f4_1aa0c8d2a3bb58c4da796d2d579a4218f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_bond</definition>
        <argsstring>(ui p1, ui p2)</argsstring>
        <name>rem_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Remove a bond from the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>If a prior interaction between particles <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> exists, removes it and returns <computeroutput>true</computeroutput>, else returns false.</para>
        </inbodydescription>
        <location file="libmd.h" line="552" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="183" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="structmd_accaf13d5fc7fec726e7b748490ed1410_1accaf13d5fc7fec726e7b748490ed1410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::assign_unique_types</definition>
        <argsstring>(ui p1, ui p2)</argsstring>
        <name>assign_unique_types</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Assign unique types to particles, modify lookup. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Assign unique particle types to <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, that are not shared by any other particles. Preserves all pairwise interactions that existed between <computeroutput>p1</computeroutput> or <computeroutput>p2</computeroutput> and any other particles.</para>
        </inbodydescription>
        <location file="libmd.h" line="553" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="200" bodyend="246"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ad4fa01a066c32eb0338a46e9f728875f_1ad4fa01a066c32eb0338a46e9f728875f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::add_spring</definition>
        <argsstring>(ui p1, ui p2, ldf springconstant, ldf l0)</argsstring>
        <name>add_spring</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>springconstant</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
          <declname>l0</declname>
        </param>
        <briefdescription>
<para>Add a harmonic bond to the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Create a hookean spring [potential type <ref refid="potentials_8libmd_8cc_a82eec3e4535cd60b73051cf9970be606_1a82eec3e4535cd60b73051cf9970be606" kindref="member">HOOKEAN()</ref>] between <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput>, with spring constant and rest length prescribed by the third and fourth arguments respectively.</para>
        </inbodydescription>
        <location file="libmd.h" line="554" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="248" bodyend="257"/>
        <references refid="struct_p_o_t_a5b5bcf993bbc4ea93398fabf9f8b78f0_1a5b5bcf993bbc4ea93398fabf9f8b78f0a1aef82e1cdd2746810e5360f230e9994" compoundref="enums_8libmd_8h" startline="13">POT::HOOKEAN</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a5f432ad2fb07d7e3d802d51ef5bec4b3_1a5f432ad2fb07d7e3d802d51ef5bec4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_sp_bond</definition>
        <argsstring>(ui p1, ui p2, ui interaction)</argsstring>
        <name>add_sp_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Add a superparticle bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new superparticle type and assigns it to the superparticle that <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> belong to. It then adds an interaction between the two particles, using element <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. If the two particles are not in the same superparticle, or have an interaction already, it does nothing and returns false.</para>
        </inbodydescription>
        <location file="libmd.h" line="555" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="261" bodyend="278"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a71d7d87ce19c4d94b0955a9b990c9b5c_1a71d7d87ce19c4d94b0955a9b990c9b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::add_sp_bond</definition>
        <argsstring>(ui p1, ui p2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>add_sp_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Add a superparticle bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new superparticle type and assigns it to the superparticle that <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> belong to. It then adds an interaction between the two particles, using a new interaction of the given type and with the given parameters. If the two particles are not in the same superparticle, or have an interaction already, it does nothing and returns false.</para>
        </inbodydescription>
        <location file="libmd.h" line="558" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="312" bodyend="329"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a00f11f906d6c45452ecf6c0c0745de86_1a00f11f906d6c45452ecf6c0c0745de86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_sp_bond</definition>
        <argsstring>(ui p1, ui p2, ui interaction)</argsstring>
        <name>mod_sp_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Modify a superparticle bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new superparticle type and assigns it to the superparticle that <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> belong to. It then modifies the interaction between the two particles, using element <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. If the two particles are not in the same superparticle, or do not have an interaction already, it does nothing and returns false.</para>
        </inbodydescription>
        <location file="libmd.h" line="556" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="280" bodyend="297"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_ae364c7443036e1ea73e53cf530c8b6db_1ae364c7443036e1ea73e53cf530c8b6db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::mod_sp_bond</definition>
        <argsstring>(ui p1, ui p2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mod_sp_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Modify a superparticle bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new superparticle type and assigns it to the superparticle that <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> belong to. It then modifies the interaction between the two particles, using a new interaction of the given type and with the given parameters. If the two particles are not in the same superparticle, or do not have an interaction already, it does nothing and returns false.</para>
        </inbodydescription>
        <location file="libmd.h" line="559" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="331" bodyend="348"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_aeac265321243821c7214518d43ca3fc0_1aeac265321243821c7214518d43ca3fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::mad_sp_bond</definition>
        <argsstring>(ui p1, ui p2, ui interaction)</argsstring>
        <name>mad_sp_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>interaction</declname>
        </param>
        <briefdescription>
<para>Force add/modify superparticle bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new superparticle type and assigns it to the superparticle that <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> belong to. It then assigns an interaction to the two particles, using element <computeroutput>interaction</computeroutput> from <computeroutput>network.library[]</computeroutput>. It does not perform any checks.</para>
        </inbodydescription>
        <location file="libmd.h" line="557" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="299" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ae916c98beaa02afcb2e33efa1ac7c711_1ae916c98beaa02afcb2e33efa1ac7c711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::mad_sp_bond</definition>
        <argsstring>(ui p1, ui p2, ui potential, std::vector&lt; ldf &gt; &amp;parameters)</argsstring>
        <name>mad_sp_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>potential</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref> &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Force add/modify superparticle bond. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new superparticle type and assigns it to the superparticle that <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> belong to. It then assigns an interaction to the two particles, using a new interaction of the given type and with the given parameters. It does not perform any checks.</para>
        </inbodydescription>
        <location file="libmd.h" line="560" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="350" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a06df83013c9455b525f95deb35dd5b55_1a06df83013c9455b525f95deb35dd5b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool md&lt; dim &gt;::rem_sp_bond</definition>
        <argsstring>(ui p1, ui p2)</argsstring>
        <name>rem_sp_bond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p1</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Remove a superparticle bond from the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new superparticle type and assigns it to the superparticle that <computeroutput>p1</computeroutput> and <computeroutput>p2</computeroutput> belong to. It then removes the interaction between the two particles. If the two particles are not in the same superparticle, or do not have an interaction, it does nothing and returns false.</para>
        </inbodydescription>
        <location file="libmd.h" line="561" column="10" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="363" bodyend="380"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a3e91b0575628071b6a0175f2b40b0c93_1a3e91b0575628071b6a0175f2b40b0c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
        <definition>ui md&lt; dim &gt;::clone_sptype</definition>
        <argsstring>(ui sp)</argsstring>
        <name>clone_sptype</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>sp</declname>
        </param>
        <briefdescription>
<para>Make a new sptype for superparticle sp if it is not unique to sp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This function creates a new superparticle type that is exactly the same as that of superparticle <computeroutput>spi</computeroutput>, assigns it to the superparticle and returns its index in <computeroutput>network.sptypes[]</computeroutput>. If superparticle <computeroutput>spi</computeroutput> is the only superparticle of its type, this fuction does nothing and returns the index of its type in <computeroutput>network.sptypes[]</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="562" column="8" bodyfile="libmd-src/md/bonds.md.libmd.cc" bodystart="382" bodyend="399"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a5a100cccf25da33aeffd8440979f0deb_1a5a100cccf25da33aeffd8440979f0deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_bcond</definition>
        <argsstring>(uc bcond[dim])</argsstring>
        <name>set_bcond</name>
        <param>
          <type><ref refid="libmd_8h_af8ecdd9d7d0f3cdced7f9a83dc659959_1af8ecdd9d7d0f3cdced7f9a83dc659959" kindref="member">uc</ref></type>
          <declname>bcond</declname>
          <array>[dim]</array>
        </param>
        <briefdescription>
<para>Set the global boundary conditions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Sets the global boundary conditions</para>
        </inbodydescription>
        <location file="libmd.h" line="563" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="222" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a2b2b70b4805daa1dacc8b39d312a099f_1a2b2b70b4805daa1dacc8b39d312a099f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_pbcond</definition>
        <argsstring>(ui i, uc bcond[dim], bool toggle=true)</argsstring>
        <name>set_pbcond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_af8ecdd9d7d0f3cdced7f9a83dc659959_1af8ecdd9d7d0f3cdced7f9a83dc659959" kindref="member">uc</ref></type>
          <declname>bcond</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>toggle</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the boundary conditions for particle i. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Sets particle&apos;s boundary conditions</para>
        </inbodydescription>
        <location file="libmd.h" line="564" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="230" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a54af21bc8e44c043ee2404c8ddba677c_1a54af21bc8e44c043ee2404c8ddba677c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void md&lt; dim &gt;::set_spbcond</definition>
        <argsstring>(ui spi, uc bcond[dim], bool toggle=true)</argsstring>
        <name>set_spbcond</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>spi</declname>
        </param>
        <param>
          <type><ref refid="libmd_8h_af8ecdd9d7d0f3cdced7f9a83dc659959_1af8ecdd9d7d0f3cdced7f9a83dc659959" kindref="member">uc</ref></type>
          <declname>bcond</declname>
          <array>[dim]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>toggle</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set the boundary conditions for superparticle spi. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Sets particle&apos;s boundary conditions for the superparticles</para>
        </inbodydescription>
        <location file="libmd.h" line="565" column="10" bodyfile="libmd-src/md/setget.md.libmd.cc" bodystart="239" bodyend="253"/>
        <references refid="libmd_8h_a027c70e4468b8d7fb673dec474df6902_1a027c70e4468b8d7fb673dec474df6902" compoundref="libmd_8h" startline="56">UI_MAX</references>
      </memberdef>
      <memberdef kind="function" id="structmd_a81088a13b0d3de93ca661c00cb2a697f_1a81088a13b0d3de93ca661c00cb2a697f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::thread_H</definition>
        <argsstring>(ui i)</argsstring>
        <name>thread_H</name>
        <param>
          <type><ref refid="libmd_8h_aa0f39ee33b87675e11229913d432ffe7_1aa0f39ee33b87675e11229913d432ffe7" kindref="member">ui</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Measure Hamiltonian for particle i. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the total energy (kinetic and potential) of particle <computeroutput>i</computeroutput>.</para>
        </inbodydescription>
        <location file="libmd.h" line="566" column="9" bodyfile="libmd-src/md/energy.md.libmd.cc" bodystart="6" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="structmd_ac819b2c5b72eff6a5a744a530ce989b8_1ac819b2c5b72eff6a5a744a530ce989b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::H</definition>
        <argsstring>()</argsstring>
        <name>H</name>
        <briefdescription>
<para>Measure Hamiltonian. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the total energy (kinetic and potential) of the system</para>
        </inbodydescription>
        <location file="libmd.h" line="569" column="9" bodyfile="libmd-src/md/energy.md.libmd.cc" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a488e1a9324101cdd114f29fdfa8d9138_1a488e1a9324101cdd114f29fdfa8d9138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::T</definition>
        <argsstring>()</argsstring>
        <name>T</name>
        <briefdescription>
<para>Measure kinetic energy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the total kinetic energy of the system</para>
        </inbodydescription>
        <location file="libmd.h" line="570" column="9" bodyfile="libmd-src/md/energy.md.libmd.cc" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structmd_a6e9b7da2ae3efacc7b0cfba63f41e7bd_1a6e9b7da2ae3efacc7b0cfba63f41e7bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref></type>
        <definition>ldf md&lt; dim &gt;::V</definition>
        <argsstring>()</argsstring>
        <name>V</name>
        <briefdescription>
<para>Measure potential energy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Returns the total potential energy of the system</para>
        </inbodydescription>
        <location file="libmd.h" line="571" column="9" bodyfile="libmd-src/md/energy.md.libmd.cc" bodystart="63" bodyend="71"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This structure takes care of Monge patch molecular dynamics simulations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>mpmd&lt; dim &gt;</label>
        <link refid="structmpmd"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>md&lt; dim &gt;</label>
        <link refid="structmd"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="21">
        <label>std::unordered_set&lt; ui &gt;</label>
        <childnode refid="22" relation="template-instance">
          <edgelabel>&lt; ui &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::vector&lt; superparticle &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; superparticle &gt;</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>K</label>
      </node>
      <node id="7">
        <label>T</label>
      </node>
      <node id="1">
        <label>mpmd&lt; dim &gt;</label>
        <link refid="structmpmd"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>std::vector&lt; interactiontype &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; interactiontype &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>forcetype</label>
        <link refid="structforcetype"/>
        <childnode refid="12" relation="usage">
          <edgelabel>+parameters</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>+particles</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; potentialptr&lt; dual &gt; &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; potentialptr&lt; dual &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>interact</label>
        <link refid="structinteract"/>
        <childnode refid="10" relation="usage">
          <edgelabel>+forcelibrary</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>+skins</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>+superparticles</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>+spid</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>+free_library_slots</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>+sptypes</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>+library</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>+lookup</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>+forces</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>superparticle</label>
        <link refid="structsuperparticle"/>
        <childnode refid="17" relation="usage">
          <edgelabel>+backdoor</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>+particles</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>std::map&lt; std::pair&lt; ui, ui &gt;, ui &gt;</label>
        <childnode refid="26" relation="template-instance">
          <edgelabel>&lt; std::pair&lt; ui, ui &gt;, ui &gt;</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>std::unordered_map&lt; K, T &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>+keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::vector&lt; particle&lt; dim &gt; &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; particle&lt; dim &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::vector&lt; ui &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; ui &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>std::vector&lt; std::vector&lt; ui &gt; &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; ui &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::vector&lt; forcetype &gt;</label>
        <childnode refid="11" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; forcetype &gt;</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>+keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::vector&lt; superparticletype &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; superparticletype &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>md&lt; dim &gt;</label>
        <link refid="structmd"/>
        <childnode refid="3" relation="usage">
          <edgelabel>+integrator</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>+v</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>+particles</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>+network</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>interactiontype</label>
        <link refid="structinteractiontype"/>
        <childnode refid="12" relation="usage">
          <edgelabel>+parameters</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>std::vector&lt; std::vector&lt; interactionneighbor &gt; &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; interactionneighbor &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>superparticletype</label>
        <link refid="structsuperparticletype"/>
        <childnode refid="25" relation="usage">
          <edgelabel>+splookup</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>pairpotentials</label>
        <link refid="structpairpotentials"/>
        <childnode refid="5" relation="usage">
          <edgelabel>+potentials</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>std::unordered_map&lt; ui, ui &gt;</label>
        <childnode refid="19" relation="template-instance">
          <edgelabel>&lt; ui, ui &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; ldf &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; ldf &gt;</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::unordered_set&lt; K &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>+keys</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>integrators</label>
        <link refid="structintegrators"/>
      </node>
    </collaborationgraph>
    <location file="libmd.h" line="618" column="1" bodyfile="libmd.h" bodystart="617" bodyend="669"/>
    <listofallmembers>
      <member refid="structmd_a21674b3d7fe619e81706e844e47bd564_1a21674b3d7fe619e81706e844e47bd564" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_bond</name></member>
      <member refid="structmd_a05e01fd5c6051b0099b4f5e298f6cc6e_1a05e01fd5c6051b0099b4f5e298f6cc6e" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_bond</name></member>
      <member refid="structmd_a0008f4806c077d79f3ebd03a13b8ddee_1a0008f4806c077d79f3ebd03a13b8ddee" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_forcetype</name></member>
      <member refid="structmd_ab9877795af63e5a45054a3642d8dd9c1_1ab9877795af63e5a45054a3642d8dd9c1" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_forcetype</name></member>
      <member refid="structmd_a1edeb0b9fcea9ffed4a2e200a931feee_1a1edeb0b9fcea9ffed4a2e200a931feee" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_hook</name></member>
      <member refid="structmd_add32e6f0299fad6d17eea4e0c5172c5f_1add32e6f0299fad6d17eea4e0c5172c5f" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_interaction</name></member>
      <member refid="structmd_a5bcb2ef79d1735715d49b629c07f8f53_1a5bcb2ef79d1735715d49b629c07f8f53" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_interaction</name></member>
      <member refid="structmd_a44e8c07db19776f7a34d56f0dc90509b_1a44e8c07db19776f7a34d56f0dc90509b" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_particle</name></member>
      <member refid="structmd_a07ee32afeb6884e33b59dcfe57eb75c6_1a07ee32afeb6884e33b59dcfe57eb75c6" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_particle</name></member>
      <member refid="structmd_a24ba844ff0b1f6cc22f0f98213c75f11_1a24ba844ff0b1f6cc22f0f98213c75f11" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_particle</name></member>
      <member refid="structmd_ac670af5743a66c26305555b403bc78ca_1ac670af5743a66c26305555b403bc78ca" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_particle</name></member>
      <member refid="structmd_a05ada8d55842d4cf7ae88bfe135cefda_1a05ada8d55842d4cf7ae88bfe135cefda" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_sp</name></member>
      <member refid="structmd_a5f432ad2fb07d7e3d802d51ef5bec4b3_1a5f432ad2fb07d7e3d802d51ef5bec4b3" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_sp_bond</name></member>
      <member refid="structmd_a71d7d87ce19c4d94b0955a9b990c9b5c_1a71d7d87ce19c4d94b0955a9b990c9b5c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_sp_bond</name></member>
      <member refid="structmd_a5b6b06f8347c82462c21b8eb0a6d215b_1a5b6b06f8347c82462c21b8eb0a6d215b" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_sp_interaction</name></member>
      <member refid="structmd_a15605c852532eb3eb86321c204638879_1a15605c852532eb3eb86321c204638879" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_sp_interaction</name></member>
      <member refid="structmd_a030bb17fd9997648e6a0180c9201654c_1a030bb17fd9997648e6a0180c9201654c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_sp_interaction</name></member>
      <member refid="structmd_ad4fa01a066c32eb0338a46e9f728875f_1ad4fa01a066c32eb0338a46e9f728875f" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_spring</name></member>
      <member refid="structmd_a5d0929b4c0f9b5c2b13a55c4cb5e7ef9_1a5d0929b4c0f9b5c2b13a55c4cb5e7ef9" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_sptype</name></member>
      <member refid="structmd_adc523a066b2afdebc5cfd3f36fa732e6_1adc523a066b2afdebc5cfd3f36fa732e6" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_typeinteraction</name></member>
      <member refid="structmd_abef5fe534b59a2f99a5e5f10a86c7fde_1abef5fe534b59a2f99a5e5f10a86c7fde" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_typeinteraction</name></member>
      <member refid="structmd_aa5910d790b5ddb7e56f78f1d0d66a433_1aa5910d790b5ddb7e56f78f1d0d66a433" prot="public" virt="non-virtual"><scope>mpmd</scope><name>add_typeinteraction</name></member>
      <member refid="structmd_ab793b4e0bf5ad988d9e8cfb0f0e02f38_1ab793b4e0bf5ad988d9e8cfb0f0e02f38" prot="public" virt="non-virtual"><scope>mpmd</scope><name>all_interactions</name></member>
      <member refid="structmd_a2eb87929ef4c0a1bb1eebf8b310153fa_1a2eb87929ef4c0a1bb1eebf8b310153fa" prot="public" virt="non-virtual"><scope>mpmd</scope><name>assign_all_forcetype</name></member>
      <member refid="structmd_a689eedf4ef9bb0693560854d4b846eb7_1a689eedf4ef9bb0693560854d4b846eb7" prot="public" virt="non-virtual"><scope>mpmd</scope><name>assign_forcetype</name></member>
      <member refid="structmd_accaf13d5fc7fec726e7b748490ed1410_1accaf13d5fc7fec726e7b748490ed1410" prot="public" virt="non-virtual"><scope>mpmd</scope><name>assign_unique_types</name></member>
      <member refid="structmd_ac28662bc989901609e51cccc668c780a_1ac28662bc989901609e51cccc668c780a" prot="public" virt="non-virtual"><scope>mpmd</scope><name>avars</name></member>
      <member refid="structmd_a5fd243c3af2cfca7c170e27b47b5ebb3_1a5fd243c3af2cfca7c170e27b47b5ebb3" prot="public" virt="non-virtual"><scope>mpmd</scope><name>boundary</name></member>
      <member refid="structmd_a32c3d5e5fe53203d0754ac9706bd0f21_1a32c3d5e5fe53203d0754ac9706bd0f21" prot="public" virt="non-virtual"><scope>mpmd</scope><name>bruteforce</name></member>
      <member refid="structmpmd_acaff47ed55f39e95d3febf8487b93a9b_1acaff47ed55f39e95d3febf8487b93a9b" prot="public" virt="virtual"><scope>mpmd</scope><name>calc_forces</name></member>
      <member refid="structmpmd_a1548ce998855a5d2b559001334cb5de7_1a1548ce998855a5d2b559001334cb5de7" prot="public" virt="non-virtual"><scope>mpmd</scope><name>calc_geometry</name></member>
      <member refid="structmd_af99c7ccc16292d4c1cdb07bd0c9ac895_1af99c7ccc16292d4c1cdb07bd0c9ac895" prot="public" virt="non-virtual"><scope>mpmd</scope><name>cell</name></member>
      <member refid="structmd_a4c5edbb0e774965559a7fe13b536c2df_1a4c5edbb0e774965559a7fe13b536c2df" prot="public" virt="non-virtual"><scope>mpmd</scope><name>clear</name></member>
      <member refid="structmd_a9aabb9439ebd5dd2bd310adad84daac8_1a9aabb9439ebd5dd2bd310adad84daac8" prot="public" virt="non-virtual"><scope>mpmd</scope><name>clear_all_assigned_forcetype</name></member>
      <member refid="structmd_abbcc719c7c9820380432e5f1c0dc25c6_1abbcc719c7c9820380432e5f1c0dc25c6" prot="public" virt="non-virtual"><scope>mpmd</scope><name>clone_particle</name></member>
      <member refid="structmd_afa87cd3c320aca8244308b650a63b919_1afa87cd3c320aca8244308b650a63b919" prot="public" virt="non-virtual"><scope>mpmd</scope><name>clone_sp</name></member>
      <member refid="structmd_a3e91b0575628071b6a0175f2b40b0c93_1a3e91b0575628071b6a0175f2b40b0c93" prot="public" virt="non-virtual"><scope>mpmd</scope><name>clone_sptype</name></member>
      <member refid="structmd_af4b990db21034be32837761098e03336_1af4b990db21034be32837761098e03336" prot="public" virt="non-virtual"><scope>mpmd</scope><name>dap</name></member>
      <member refid="structmd_aeed418ffbab88202136c2b9ae1cd5a37_1aeed418ffbab88202136c2b9ae1cd5a37" prot="public" virt="non-virtual"><scope>mpmd</scope><name>dd</name></member>
      <member refid="structmd_adde7787c69335e330aa9163fb340a40f_1adde7787c69335e330aa9163fb340a40f" prot="public" virt="non-virtual"><scope>mpmd</scope><name>dd</name></member>
      <member refid="structmd_aaec8b858142d1a80d0eb072d13989016_1aaec8b858142d1a80d0eb072d13989016" prot="public" virt="non-virtual"><scope>mpmd</scope><name>dd</name></member>
      <member refid="structmd_aa2aafc98e090071ee38cd5eecc91086c_1aa2aafc98e090071ee38cd5eecc91086c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>dd</name></member>
      <member refid="structmd_ad557ab182064478b8910b250f1ac8813_1ad557ab182064478b8910b250f1ac8813" prot="public" virt="non-virtual"><scope>mpmd</scope><name>direct_readout</name></member>
      <member refid="structmd_addcc3aaf34598264c99d0d4a189b71c3_1addcc3aaf34598264c99d0d4a189b71c3" prot="public" virt="non-virtual"><scope>mpmd</scope><name>direct_readout</name></member>
      <member refid="structmd_acfca03d4fcf18a0e3eab23423e06cd84_1acfca03d4fcf18a0e3eab23423e06cd84" prot="public" virt="non-virtual"><scope>mpmd</scope><name>direct_readout_dx</name></member>
      <member refid="structmd_ad4ca80203244b35026043174d8281d6a_1ad4ca80203244b35026043174d8281d6a" prot="public" virt="non-virtual"><scope>mpmd</scope><name>direct_readout_F</name></member>
      <member refid="structmd_a097149a531210104b80a5a84acb9e3f8_1a097149a531210104b80a5a84acb9e3f8" prot="public" virt="non-virtual"><scope>mpmd</scope><name>direct_readout_x</name></member>
      <member refid="structmd_ae0dbf3df141878e6530b7ba1cf18836d_1ae0dbf3df141878e6530b7ba1cf18836d" prot="public" virt="non-virtual"><scope>mpmd</scope><name>distsq</name></member>
      <member refid="structmd_a11612b5f64a62122b5c1e2767d4125f4_1a11612b5f64a62122b5c1e2767d4125f4" prot="public" virt="non-virtual"><scope>mpmd</scope><name>distsq</name></member>
      <member refid="structmd_aa8d0c1ecf0b5cd3acfda235bf4d7939c_1aa8d0c1ecf0b5cd3acfda235bf4d7939c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>distsq</name></member>
      <member refid="structmd_ac7d3a54060a2ddea03e95edd1712b70a_1ac7d3a54060a2ddea03e95edd1712b70a" prot="public" virt="non-virtual"><scope>mpmd</scope><name>distsq</name></member>
      <member refid="structmd_a49ad95110ab2d8da99612f85cc0352d1_1a49ad95110ab2d8da99612f85cc0352d1" prot="public" virt="non-virtual"><scope>mpmd</scope><name>drift_particle</name></member>
      <member refid="structmd_abb7b161e967585126fd2c783ac67f6a3_1abb7b161e967585126fd2c783ac67f6a3" prot="public" virt="non-virtual"><scope>mpmd</scope><name>drift_sp</name></member>
      <member refid="structmd_a6d7f9c3ed6d212f1b34b2d2e94b7fd33_1a6d7f9c3ed6d212f1b34b2d2e94b7fd33" prot="public" virt="non-virtual"><scope>mpmd</scope><name>dv</name></member>
      <member refid="structmpmd_a15fd349a7f8147dc1c9bc8b74c15c0bd_1a15fd349a7f8147dc1c9bc8b74c15c0bd" prot="public" virt="non-virtual"><scope>mpmd</scope><name>embedded_dd_p1</name></member>
      <member refid="structmpmd_a8847e2690ac1f322b49c2f5f5389c013_1a8847e2690ac1f322b49c2f5f5389c013" prot="public" virt="non-virtual"><scope>mpmd</scope><name>embedded_dd_p2</name></member>
      <member refid="structmpmd_a8d8a7f180f8b2bc1a009eda40285f1ac_1a8d8a7f180f8b2bc1a009eda40285f1ac" prot="public" virt="non-virtual"><scope>mpmd</scope><name>embedded_distsq</name></member>
      <member refid="structmpmd_ac66cf03a8c7039fd07981680b9b36f61_1ac66cf03a8c7039fd07981680b9b36f61" prot="public" virt="non-virtual"><scope>mpmd</scope><name>embedded_distsq</name></member>
      <member refid="structmpmd_ac63e3c2afe6cf48636858b95d94c14c7_1ac63e3c2afe6cf48636858b95d94c14c7" prot="public" virt="non-virtual"><scope>mpmd</scope><name>embedded_distsq</name></member>
      <member refid="structmpmd_a96b48b323ddc9f2d482516b3204118f0_1a96b48b323ddc9f2d482516b3204118f0" prot="public" virt="non-virtual"><scope>mpmd</scope><name>embedded_distsq</name></member>
      <member refid="structmd_a3d7c1a4d94f506222e64e3e1bbfc7492_1a3d7c1a4d94f506222e64e3e1bbfc7492" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_force</name></member>
      <member refid="structmd_a13978bf83409bd32abe9fcc22f3b65fa_1a13978bf83409bd32abe9fcc22f3b65fa" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_force</name></member>
      <member refid="structmd_ac2b83504de73c233a463ea05ea7ea623_1ac2b83504de73c233a463ea05ea7ea623" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_force</name></member>
      <member refid="structmd_a26f70e5328e8f8f97528351110d470ba_1a26f70e5328e8f8f97528351110d470ba" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_force</name></member>
      <member refid="structmd_a3daa3be8a5fad461fcd3b1faa6a04352_1a3daa3be8a5fad461fcd3b1faa6a04352" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_pos</name></member>
      <member refid="structmd_a9c69107edc2c612811b41015044cb7df_1a9c69107edc2c612811b41015044cb7df" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_pos</name></member>
      <member refid="structmd_a6089b52b54c649e24c450215e619013a_1a6089b52b54c649e24c450215e619013a" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_pos</name></member>
      <member refid="structmd_a2fb713ce41561853a43cdbaebca388d5_1a2fb713ce41561853a43cdbaebca388d5" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_pos</name></member>
      <member refid="structmd_a4453e5a516790707442395eba9ed9342_1a4453e5a516790707442395eba9ed9342" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_vel</name></member>
      <member refid="structmd_ab62cd50283f0928c0959abd8111c492c_1ab62cd50283f0928c0959abd8111c492c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_vel</name></member>
      <member refid="structmd_abe62e466f43fd808d8f74e31ad792e54_1abe62e466f43fd808d8f74e31ad792e54" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_vel</name></member>
      <member refid="structmd_ab803ee1ac143c22862adaa47a1d8bf9c_1ab803ee1ac143c22862adaa47a1d8bf9c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>export_vel</name></member>
      <member refid="structmd_a2997460875452413182c56784f50edaf_1a2997460875452413182c56784f50edaf" prot="public" virt="non-virtual"><scope>mpmd</scope><name>f</name></member>
      <member refid="structmd_af422857393efc3ab9e748f12efc87f4d_1af422857393efc3ab9e748f12efc87f4d" prot="public" virt="non-virtual"><scope>mpmd</scope><name>fix_particle</name></member>
      <member refid="structmd_add37bc67284c75d605f1a15d6f38c1c9_1add37bc67284c75d605f1a15d6f38c1c9" prot="public" virt="non-virtual"><scope>mpmd</scope><name>fix_sp</name></member>
      <member refid="structmd_a6e79e218504c7eb06be43e8919628d2c_1a6e79e218504c7eb06be43e8919628d2c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>get_position_sp</name></member>
      <member refid="structmd_a1ee843317185c3f25f8f879d0fe20d03_1a1ee843317185c3f25f8f879d0fe20d03" prot="public" virt="non-virtual"><scope>mpmd</scope><name>get_rco</name></member>
      <member refid="structmd_a8c19b7d23174fc8598dc3f6baaf1612a_1a8c19b7d23174fc8598dc3f6baaf1612a" prot="public" virt="non-virtual"><scope>mpmd</scope><name>get_rco</name></member>
      <member refid="structmd_ae7f5d74eeec366573b93ba6bf015c301_1ae7f5d74eeec366573b93ba6bf015c301" prot="public" virt="non-virtual"><scope>mpmd</scope><name>get_velocity_sp</name></member>
      <member refid="structmd_ac819b2c5b72eff6a5a744a530ce989b8_1ac819b2c5b72eff6a5a744a530ce989b8" prot="public" virt="non-virtual"><scope>mpmd</scope><name>H</name></member>
      <member refid="structmd_a5cacfed9b123e805170870e8aed6790c_1a5cacfed9b123e805170870e8aed6790c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>heat_particle</name></member>
      <member refid="structmd_a88967703577f8f8ccc83f484dd5ef2c8_1a88967703577f8f8ccc83f484dd5ef2c8" prot="public" virt="non-virtual"><scope>mpmd</scope><name>heat_sp</name></member>
      <member refid="structmpmd_aacb392a8e756a069870b388a189485b0_1aacb392a8e756a069870b388a189485b0" prot="public" virt="non-virtual"><scope>mpmd</scope><name>history</name></member>
      <member refid="structmd_acafc604d84a611fc3df9115a92762312_1acafc604d84a611fc3df9115a92762312" prot="public" virt="non-virtual"><scope>mpmd</scope><name>hooks</name></member>
      <member refid="structmd_a50bf4ccf11941a53886388e01580d55f_1a50bf4ccf11941a53886388e01580d55f" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_force</name></member>
      <member refid="structmd_ae9d9fea7b1ccd15ce3e611bd216a97f8_1ae9d9fea7b1ccd15ce3e611bd216a97f8" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_force</name></member>
      <member refid="structmd_a316fb8fdcc2498d62afba87cb24d8f4e_1a316fb8fdcc2498d62afba87cb24d8f4e" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_force</name></member>
      <member refid="structmd_a84a7a4707ddba2ca71cdf108aa416a70_1a84a7a4707ddba2ca71cdf108aa416a70" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_force</name></member>
      <member refid="structmd_a0d2ca0ce11d4d74a838b4d44ccdcfb44_1a0d2ca0ce11d4d74a838b4d44ccdcfb44" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_pos</name></member>
      <member refid="structmd_a466230abbecdaf79ed543b298ca570b6_1a466230abbecdaf79ed543b298ca570b6" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_pos</name></member>
      <member refid="structmd_a20c11db47d24acf1d67de89dad075040_1a20c11db47d24acf1d67de89dad075040" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_pos</name></member>
      <member refid="structmd_a9c1495fd5a030a2b9ce9bdf25cb670a5_1a9c1495fd5a030a2b9ce9bdf25cb670a5" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_pos</name></member>
      <member refid="structmd_a3978e57d265eb88a59ddfe554fa18f05_1a3978e57d265eb88a59ddfe554fa18f05" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_vel</name></member>
      <member refid="structmd_afc66c884b684de15eb6a0de419e61077_1afc66c884b684de15eb6a0de419e61077" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_vel</name></member>
      <member refid="structmd_a04f9829831166c30f7c9bc74a84620a7_1a04f9829831166c30f7c9bc74a84620a7" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_vel</name></member>
      <member refid="structmd_a8ad2eef5e8c3d7df545a00621c1ca8e4_1a8ad2eef5e8c3d7df545a00621c1ca8e4" prot="public" virt="non-virtual"><scope>mpmd</scope><name>import_vel</name></member>
      <member refid="structmd_a1ecf37a44dfa7401593a05b4aaed7d68_1a1ecf37a44dfa7401593a05b4aaed7d68" prot="public" virt="non-virtual"><scope>mpmd</scope><name>index</name></member>
      <member refid="structmd_aae25c208ac39ab45d90cea9accf58ed8_1aae25c208ac39ab45d90cea9accf58ed8" prot="public" virt="non-virtual"><scope>mpmd</scope><name>indexdata</name></member>
      <member refid="structmd_a3058404058aa7ff2e36147dcf84c536a_1a3058404058aa7ff2e36147dcf84c536a" prot="public" virt="non-virtual"><scope>mpmd</scope><name>init</name></member>
      <member refid="structmpmd_afdb6c81bc049485c05ed952728a27312_1afdb6c81bc049485c05ed952728a27312" prot="public" virt="virtual"><scope>mpmd</scope><name>integrate</name></member>
      <member refid="structmd_a649701c926568a12bc6fef1e182bdf23_1a649701c926568a12bc6fef1e182bdf23" prot="public" virt="non-virtual"><scope>mpmd</scope><name>integrator</name></member>
      <member refid="structmd_ad0dfd19e75aacb45e98ce6c5b198e135_1ad0dfd19e75aacb45e98ce6c5b198e135" prot="public" virt="non-virtual"><scope>mpmd</scope><name>interactions</name></member>
      <member refid="structmd_a7a10193ac507980720263dd95d259958_1a7a10193ac507980720263dd95d259958" prot="public" virt="non-virtual"><scope>mpmd</scope><name>kdtree</name></member>
      <member refid="structmd_a8ab281a337c8448f30b808ef51be99e6_1a8ab281a337c8448f30b808ef51be99e6" prot="public" virt="non-virtual"><scope>mpmd</scope><name>kdtree_build</name></member>
      <member refid="structmd_af6fbb4becba7012a1914b5eee637d718_1af6fbb4becba7012a1914b5eee637d718" prot="public" virt="non-virtual"><scope>mpmd</scope><name>kdtree_index</name></member>
      <member refid="structmd_a514405c00064a980786fbea0d037b091_1a514405c00064a980786fbea0d037b091" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_bond</name></member>
      <member refid="structmd_a06dd39c81ad62a295878cd43c5d25f49_1a06dd39c81ad62a295878cd43c5d25f49" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_bond</name></member>
      <member refid="structmd_aeac265321243821c7214518d43ca3fc0_1aeac265321243821c7214518d43ca3fc0" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_sp_bond</name></member>
      <member refid="structmd_ae916c98beaa02afcb2e33efa1ac7c711_1ae916c98beaa02afcb2e33efa1ac7c711" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_sp_bond</name></member>
      <member refid="structmd_a759dc71408d5202e3b647da8abe58e00_1a759dc71408d5202e3b647da8abe58e00" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_sp_interaction</name></member>
      <member refid="structmd_a2360029fc9a0a52a8432a9b30d61c57e_1a2360029fc9a0a52a8432a9b30d61c57e" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_sp_interaction</name></member>
      <member refid="structmd_a9088598d8ccee5d837e398a4ad4abe0e_1a9088598d8ccee5d837e398a4ad4abe0e" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_sp_interaction</name></member>
      <member refid="structmd_ade6485112233e29238898268e6d5813c_1ade6485112233e29238898268e6d5813c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_typeinteraction</name></member>
      <member refid="structmd_a0ab82f734b4918ec70b1308d51b53dd4_1a0ab82f734b4918ec70b1308d51b53dd4" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_typeinteraction</name></member>
      <member refid="structmd_a3c7542b1ab87b873c3093eb6d6f54e72_1a3c7542b1ab87b873c3093eb6d6f54e72" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mad_typeinteraction</name></member>
      <member refid="structmd_a62609ea422e3dc02f8990c532aa74c81_1a62609ea422e3dc02f8990c532aa74c81" prot="public" virt="non-virtual"><scope>mpmd</scope><name>md</name></member>
      <member refid="structmd_a0920ab1964184b3c6e533c84f3760013_1a0920ab1964184b3c6e533c84f3760013" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_bond</name></member>
      <member refid="structmd_a80ca82795b614b70e49f500ba5d35121_1a80ca82795b614b70e49f500ba5d35121" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_bond</name></member>
      <member refid="structmd_a765213fe1e96156bae8b60687b763543_1a765213fe1e96156bae8b60687b763543" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_forcetype</name></member>
      <member refid="structmd_a8b18afb86b5c1523542528c82e3457e5_1a8b18afb86b5c1523542528c82e3457e5" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_forcetype</name></member>
      <member refid="structmd_a23acf6a4938f0790acbc21397ef0b3e5_1a23acf6a4938f0790acbc21397ef0b3e5" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_hook</name></member>
      <member refid="structmd_ae4d4c6021d409ab400a49671019f3796_1ae4d4c6021d409ab400a49671019f3796" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_interaction</name></member>
      <member refid="structmd_a0b728314c3eaeffa8b6d5727ab8d1ca4_1a0b728314c3eaeffa8b6d5727ab8d1ca4" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_interaction</name></member>
      <member refid="structmd_a00f11f906d6c45452ecf6c0c0745de86_1a00f11f906d6c45452ecf6c0c0745de86" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_sp_bond</name></member>
      <member refid="structmd_ae364c7443036e1ea73e53cf530c8b6db_1ae364c7443036e1ea73e53cf530c8b6db" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_sp_bond</name></member>
      <member refid="structmd_a6ebeb7144a1a3584d9de753911883d06_1a6ebeb7144a1a3584d9de753911883d06" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_sp_interaction</name></member>
      <member refid="structmd_a9ee7c6621fcea5c7d0f9e2d487d500c8_1a9ee7c6621fcea5c7d0f9e2d487d500c8" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_sp_interaction</name></member>
      <member refid="structmd_aecb53cb002bfac054f050218e7b2e0c9_1aecb53cb002bfac054f050218e7b2e0c9" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_sp_interaction</name></member>
      <member refid="structmd_a3a632d96257e09cdd541aefb1b1f2910_1a3a632d96257e09cdd541aefb1b1f2910" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_typeinteraction</name></member>
      <member refid="structmd_a7f95dae9952b4fa0e06b237c25bd05dd_1a7f95dae9952b4fa0e06b237c25bd05dd" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_typeinteraction</name></member>
      <member refid="structmd_a9d6aaf3d1261024ca06d205bb90c1cf5_1a9d6aaf3d1261024ca06d205bb90c1cf5" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mod_typeinteraction</name></member>
      <member refid="structmpmd_a13769566d0f591f1a5bdacea665aaf59_1a13769566d0f591f1a5bdacea665aaf59" prot="public" virt="non-virtual"><scope>mpmd</scope><name>mp_thread_calc_pot_forces</name></member>
      <member refid="structmd_ac8988c39f3e4d3bd8caae112a38e6284_1ac8988c39f3e4d3bd8caae112a38e6284" prot="public" virt="non-virtual"><scope>mpmd</scope><name>N</name></member>
      <member refid="structmd_af03ae636b8618d85a9f7088077fef25d_1af03ae636b8618d85a9f7088077fef25d" prot="public" virt="non-virtual"><scope>mpmd</scope><name>network</name></member>
      <member refid="structmd_a469039a73ed9af4d1bdddb8c3203acde_1a469039a73ed9af4d1bdddb8c3203acde" prot="public" virt="non-virtual"><scope>mpmd</scope><name>particles</name></member>
      <member refid="structmpmd_a9a36a6e6d025329ffbd9598a45b7a899_1a9a36a6e6d025329ffbd9598a45b7a899" prot="public" virt="non-virtual"><scope>mpmd</scope><name>patch</name></member>
      <member refid="structmd_a0395ea5f8b917457f3775b59da0b3734_1a0395ea5f8b917457f3775b59da0b3734" prot="public" virt="non-virtual"><scope>mpmd</scope><name>periodicity</name></member>
      <member refid="structmpmd_a56359315b7b7cd836dbff7614ceb1c96_1a56359315b7b7cd836dbff7614ceb1c96" prot="public" virt="virtual"><scope>mpmd</scope><name>recalc_forces</name></member>
      <member refid="structmd_aa0c8d2a3bb58c4da796d2d579a4218f4_1aa0c8d2a3bb58c4da796d2d579a4218f4" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_bond</name></member>
      <member refid="structmd_adb0b0c0ea9c035858eadac1e2d0e1ab2_1adb0b0c0ea9c035858eadac1e2d0e1ab2" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_forcetype</name></member>
      <member refid="structmd_ac4b44ac0b00925ab289ed14adc72998b_1ac4b44ac0b00925ab289ed14adc72998b" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_hook</name></member>
      <member refid="structmd_a9912870aa754f0366ea2f3b54cf5bfaa_1a9912870aa754f0366ea2f3b54cf5bfaa" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_interaction</name></member>
      <member refid="structmd_a8f9f008ef44668edcc81465ee6fc633d_1a8f9f008ef44668edcc81465ee6fc633d" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_particle</name></member>
      <member refid="structmd_a043c3e5e4b2b8b2d1eddcb48765b7d51_1a043c3e5e4b2b8b2d1eddcb48765b7d51" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_sp</name></member>
      <member refid="structmd_a06df83013c9455b525f95deb35dd5b55_1a06df83013c9455b525f95deb35dd5b55" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_sp_bond</name></member>
      <member refid="structmd_a122d80c92758c75eb00437bbc9192e70_1a122d80c92758c75eb00437bbc9192e70" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_sp_interaction</name></member>
      <member refid="structmd_a0bed77514d85a9bd861546afa0af698b_1a0bed77514d85a9bd861546afa0af698b" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_sp_particles</name></member>
      <member refid="structmd_aef66202a148539ebd1b68b879265c2f1_1aef66202a148539ebd1b68b879265c2f1" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_sptype</name></member>
      <member refid="structmd_abb578b83b6417525ade07413cc1664ac_1abb578b83b6417525ade07413cc1664ac" prot="public" virt="non-virtual"><scope>mpmd</scope><name>rem_typeinteraction</name></member>
      <member refid="structmd_aa7a58f9bbaf4bc9980ce174d50354317_1aa7a58f9bbaf4bc9980ce174d50354317" prot="public" virt="non-virtual"><scope>mpmd</scope><name>run_hook</name></member>
      <member refid="structmd_af8e8b1c94af7332930937f8652c56be1_1af8e8b1c94af7332930937f8652c56be1" prot="public" virt="non-virtual"><scope>mpmd</scope><name>run_hooks</name></member>
      <member refid="structmd_a5a100cccf25da33aeffd8440979f0deb_1a5a100cccf25da33aeffd8440979f0deb" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_bcond</name></member>
      <member refid="structmd_a2a1909a3bd9ac56a741b7c2dd2cd38fc_1a2a1909a3bd9ac56a741b7c2dd2cd38fc" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_damping</name></member>
      <member refid="structmd_a1d065a8e59428d1c6845bc4dc60db6e3_1a1d065a8e59428d1c6845bc4dc60db6e3" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_index_method</name></member>
      <member refid="structmpmd_ad368a836ece2eeb2bc5896695b9cf886_1ad368a836ece2eeb2bc5896695b9cf886" prot="public" virt="virtual"><scope>mpmd</scope><name>set_langevin</name></member>
      <member refid="structmd_a4c787aef7f8ce4e643de3b6b70f7031e_1a4c787aef7f8ce4e643de3b6b70f7031e" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_overdamped</name></member>
      <member refid="structmd_a2b2b70b4805daa1dacc8b39d312a099f_1a2b2b70b4805daa1dacc8b39d312a099f" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_pbcond</name></member>
      <member refid="structmd_ace0723e638c94d80c6706d46cc1e59ab_1ace0723e638c94d80c6706d46cc1e59ab" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_position_sp</name></member>
      <member refid="structmd_a7fcf21557f26de99f3e12c18d5719cf0_1a7fcf21557f26de99f3e12c18d5719cf0" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_rco</name></member>
      <member refid="structmd_a0198b98f0b6ce718272700c6c2c4da79_1a0198b98f0b6ce718272700c6c2c4da79" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_rco</name></member>
      <member refid="structmd_a9db6376d02c21c202f4542a0929b0287_1a9db6376d02c21c202f4542a0929b0287" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_reserve</name></member>
      <member refid="structmd_acc84dcb35866c880a061460c0abbc385_1acc84dcb35866c880a061460c0abbc385" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_reserve</name></member>
      <member refid="structmd_a54af21bc8e44c043ee2404c8ddba677c_1a54af21bc8e44c043ee2404c8ddba677c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_spbcond</name></member>
      <member refid="structmd_a46466e1da3b3b5b6fb92d306e1a27263_1a46466e1da3b3b5b6fb92d306e1a27263" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_ssz</name></member>
      <member refid="structmd_a9282fd8d82a54bb7d4f76685c3bf5432_1a9282fd8d82a54bb7d4f76685c3bf5432" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_type</name></member>
      <member refid="structmd_ac064097ccc538e9671f65fe9fabb8af5_1ac064097ccc538e9671f65fe9fabb8af5" prot="public" virt="non-virtual"><scope>mpmd</scope><name>set_velocity_sp</name></member>
      <member refid="structmd_af795df0a6af938512e63ff4c137a6713_1af795df0a6af938512e63ff4c137a6713" prot="public" virt="non-virtual"><scope>mpmd</scope><name>simbox</name></member>
      <member refid="structmd_af4e3c55b8f17dfb069af504e6a2c750c_1af4e3c55b8f17dfb069af504e6a2c750c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>skinner</name></member>
      <member refid="structmd_a3c6a1ca471afcd982bdf9a79217bfc70_1a3c6a1ca471afcd982bdf9a79217bfc70" prot="public" virt="non-virtual"><scope>mpmd</scope><name>sp_dispose</name></member>
      <member refid="structmd_a6438fb0d8ee34d18868e40abb5e0fb7a_1a6438fb0d8ee34d18868e40abb5e0fb7a" prot="public" virt="non-virtual"><scope>mpmd</scope><name>sp_dispose_idx</name></member>
      <member refid="structmd_a1857afeac7bf05251c88d72840f696cd_1a1857afeac7bf05251c88d72840f696cd" prot="public" virt="non-virtual"><scope>mpmd</scope><name>sp_ingest</name></member>
      <member refid="structmd_a2db2877593c6bf7fdf283d7a8a040602_1a2db2877593c6bf7fdf283d7a8a040602" prot="public" virt="non-virtual"><scope>mpmd</scope><name>sp_pid</name></member>
      <member refid="structmd_a488e1a9324101cdd114f29fdfa8d9138_1a488e1a9324101cdd114f29fdfa8d9138" prot="public" virt="non-virtual"><scope>mpmd</scope><name>T</name></member>
      <member refid="structmd_aee6148340ce4331e84344df87f4e1800_1aee6148340ce4331e84344df87f4e1800" prot="public" virt="non-virtual"><scope>mpmd</scope><name>test_index</name></member>
      <member refid="structmd_ae5f5825a2524b24a6ed913caeb90a8b6_1ae5f5825a2524b24a6ed913caeb90a8b6" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_calc_ext_forces</name></member>
      <member refid="structmpmd_a7e1ceda4892e4a680231e116f23937e9_1a7e1ceda4892e4a680231e116f23937e9" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_calc_geometry</name></member>
      <member refid="structmd_ac3b4dfe4eba7350b266d30517671bdb6_1ac3b4dfe4eba7350b266d30517671bdb6" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_calc_pot_forces</name></member>
      <member refid="structmd_a32d3e55bfbbebfbc73f0aca3242d8b3b_1a32d3e55bfbbebfbc73f0aca3242d8b3b" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_cell</name></member>
      <member refid="structmd_ad5f3412e14bab3bc31be3610d843d8d0_1ad5f3412e14bab3bc31be3610d843d8d0" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_clear_forces</name></member>
      <member refid="structmd_a79f30630408b53f5cfb308e4700cc627_1a79f30630408b53f5cfb308e4700cc627" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_first_order</name></member>
      <member refid="structmd_a81088a13b0d3de93ca661c00cb2a697f_1a81088a13b0d3de93ca661c00cb2a697f" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_H</name></member>
      <member refid="structmpmd_a9aae6c4551ae89f9ecadfff6755e75ca_1a9aae6c4551ae89f9ecadfff6755e75ca" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_history</name></member>
      <member refid="structmd_a9dfeaa20a38920b6f7e5b4221a815ac9_1a9dfeaa20a38920b6f7e5b4221a815ac9" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_index_stick</name></member>
      <member refid="structmd_af9208aee87634536a1a00cc1346d8b56_1af9208aee87634536a1a00cc1346d8b56" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_overdamped</name></member>
      <member refid="structmd_a1d26b450a1187048455396a00c361be4_1a1d26b450a1187048455396a00c361be4" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_periodicity</name></member>
      <member refid="structmd_a5a6d17288575ff5183960eaaf56266f9_1a5a6d17288575ff5183960eaaf56266f9" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_periodicity</name></member>
      <member refid="structmd_ab268b10a893abd008382df06da416a5a_1ab268b10a893abd008382df06da416a5a" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_seuler</name></member>
      <member refid="structmpmd_a4c7964dc3b819ca6c84a4df6781ac303_1a4c7964dc3b819ca6c84a4df6781ac303" prot="public" virt="virtual"><scope>mpmd</scope><name>thread_T</name></member>
      <member refid="structmpmd_acaf1bb37ff9ca7c2b6db0093478dfb94_1acaf1bb37ff9ca7c2b6db0093478dfb94" prot="public" virt="virtual"><scope>mpmd</scope><name>thread_V</name></member>
      <member refid="structmd_aab0e1d2ec505cfb5160de37b470c1f1b_1aab0e1d2ec505cfb5160de37b470c1f1b" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_vverlet_dx</name></member>
      <member refid="structmd_a151360bcbdea5b086399aded05d7ade8_1a151360bcbdea5b086399aded05d7ade8" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_vverlet_x</name></member>
      <member refid="structmpmd_a47eee1cf060ce915bb077ac558fb762c_1a47eee1cf060ce915bb077ac558fb762c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_zuiden</name></member>
      <member refid="structmpmd_a8e7d1b7cafc905e283023a6b822cc766_1a8e7d1b7cafc905e283023a6b822cc766" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_zuiden_protect</name></member>
      <member refid="structmpmd_a8fc7bd10d9db7db29770d6d53d094e44_1a8fc7bd10d9db7db29770d6d53d094e44" prot="public" virt="non-virtual"><scope>mpmd</scope><name>thread_zuiden_wfi</name></member>
      <member refid="structmd_a9dfabbfd13fc5fb8d651edc7ad1ef293_1a9dfabbfd13fc5fb8d651edc7ad1ef293" prot="public" virt="non-virtual"><scope>mpmd</scope><name>timestep</name></member>
      <member refid="structmd_ab05795ae636fad01edb1eed8ce309ac6_1ab05795ae636fad01edb1eed8ce309ac6" prot="public" virt="non-virtual"><scope>mpmd</scope><name>timesteps</name></member>
      <member refid="structmd_ab7ca8226b0ce940a1da8554fe6de0daf_1ab7ca8226b0ce940a1da8554fe6de0daf" prot="public" virt="non-virtual"><scope>mpmd</scope><name>translate_particle</name></member>
      <member refid="structmd_a528212f13bced99f7d50c5c21495591c_1a528212f13bced99f7d50c5c21495591c" prot="public" virt="non-virtual"><scope>mpmd</scope><name>translate_sp</name></member>
      <member refid="structmd_a2e33f0aefe99cb1f0e135a3970582ab5_1a2e33f0aefe99cb1f0e135a3970582ab5" prot="public" virt="non-virtual"><scope>mpmd</scope><name>unassign_all_forcetype</name></member>
      <member refid="structmd_a6412fd7449493d81107094fe892e57ea_1a6412fd7449493d81107094fe892e57ea" prot="public" virt="non-virtual"><scope>mpmd</scope><name>unassign_forcetype</name></member>
      <member refid="structmd_a30700d23569c705d490529d2f1042c1f_1a30700d23569c705d490529d2f1042c1f" prot="public" virt="non-virtual"><scope>mpmd</scope><name>unset_damping</name></member>
      <member refid="structmd_aec703f50a6b67ad247877b6cba147277_1aec703f50a6b67ad247877b6cba147277" prot="public" virt="non-virtual"><scope>mpmd</scope><name>unset_langevin</name></member>
      <member refid="structmd_a668be5000ed2e92150ef021e79a4f661_1a668be5000ed2e92150ef021e79a4f661" prot="public" virt="non-virtual"><scope>mpmd</scope><name>unset_overdamped</name></member>
      <member refid="structmd_a9b5ff183b3beb9c9411291a23bc0b80b_1a9b5ff183b3beb9c9411291a23bc0b80b" prot="public" virt="non-virtual"><scope>mpmd</scope><name>update_boundaries</name></member>
      <member refid="structmd_ac79196653bac4d749f7ef27008a12fca_1ac79196653bac4d749f7ef27008a12fca" prot="public" virt="non-virtual"><scope>mpmd</scope><name>update_skins</name></member>
      <member refid="structmd_a9a603fe30e2611cef18b6d597335610e_1a9a603fe30e2611cef18b6d597335610e" prot="public" virt="non-virtual"><scope>mpmd</scope><name>v</name></member>
      <member refid="structmd_a6e9b7da2ae3efacc7b0cfba63f41e7bd_1a6e9b7da2ae3efacc7b0cfba63f41e7bd" prot="public" virt="non-virtual"><scope>mpmd</scope><name>V</name></member>
      <member refid="structmd_a14a31e281d8e99cd7bd48b7249df2e05_1a14a31e281d8e99cd7bd48b7249df2e05" prot="public" virt="non-virtual"><scope>mpmd</scope><name>vvars</name></member>
      <member refid="structmpmd_aa7e40e24a8575a14dc7c1546010a7c68_1aa7e40e24a8575a14dc7c1546010a7c68" prot="public" virt="non-virtual"><scope>mpmd</scope><name>zuiden_A</name></member>
      <member refid="structmpmd_a0f07f1bb38ae54ee286bd1d1223b59e9_1a0f07f1bb38ae54ee286bd1d1223b59e9" prot="public" virt="non-virtual"><scope>mpmd</scope><name>zuiden_C</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
