<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="autodiff_8libmd_8cc" kind="file" language="C++">
    <compoundname>autodiff.libmd.cc</compoundname>
    <includes refid="libmd_8h" local="yes">../libmd.h</includes>
    <includedby refid="libmd_8cc" local="yes">libmd.cc</includedby>
    <incdepgraph>
      <node id="10">
        <label>list</label>
      </node>
      <node id="41">
        <label>md/index.md.libmd.cc</label>
        <link refid="index_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>md/hooks.md.libmd.cc</label>
        <link refid="hooks_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>libmd-src/mongepatches.libmd.cc</label>
        <link refid="mongepatches_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>functional</label>
      </node>
      <node id="15">
        <label>limits</label>
      </node>
      <node id="38">
        <label>md/interaction.md.libmd.cc</label>
        <link refid="interaction_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>libmd-src/variadic_vars.libmd.cc</label>
        <link refid="variadic__vars_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>libmd-src/interact.libmd.cc</label>
        <link refid="interact_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>md/distances.md.libmd.cc</label>
        <link refid="distances_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>md/energy.md.libmd.cc</label>
        <link refid="energy_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>libmd-src/pairpotentials.libmd.cc</label>
        <link refid="pairpotentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>libmd-src/mp.libmd.cc</label>
        <link refid="mp_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="27">
        <label>libmd-src/box.libmd.cc</label>
        <link refid="box_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>md/bonds.md.libmd.cc</label>
        <link refid="bonds_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>libmd-src/integrators.libmd.cc</label>
        <link refid="integrators_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>map</label>
      </node>
      <node id="1">
        <label>libmd-src/autodiff.libmd.cc</label>
        <link refid="autodiff_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>unordered_set</label>
      </node>
      <node id="28">
        <label>libmd-src/boundaryconditions.libmd.cc</label>
        <link refid="boundaryconditions_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>md/particles.md.libmd.cc</label>
        <link refid="particles_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>libmd-src/particle.libmd.cc</label>
        <link refid="particle_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>libmd-src/autodiff2.libmd.cc</label>
        <link refid="autodiff2_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>libmd-src/bcond.libmd.cc</label>
        <link refid="bcond_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>libmd-src/potentials.libmd.cc</label>
        <link refid="potentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>random</label>
      </node>
      <node id="21">
        <label>libmd-src/enums.libmd.h</label>
        <link refid="enums_8libmd_8h"/>
      </node>
      <node id="3">
        <label>cstdio</label>
      </node>
      <node id="48">
        <label>md/importexport.md.libmd.cc</label>
        <link refid="importexport_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>md/periodicity.md.libmd.cc</label>
        <link refid="periodicity_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>libmd-src/index.libmd.cc</label>
        <link refid="index_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>libmd-src/externalforces.libmd.cc</label>
        <link refid="externalforces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stack</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="47">
        <label>md/sp.md.libmd.cc</label>
        <link refid="sp_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>utility</label>
      </node>
      <node id="37">
        <label>libmd-src/md.libmd.cc</label>
        <link refid="md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="22">
        <label>libmd.cc</label>
        <link refid="libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../libmd.h</label>
        <link refid="libmd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>libmd-src/hooks.libmd.cc</label>
        <link refid="hooks_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>unordered_map</label>
      </node>
      <node id="18">
        <label>chrono</label>
      </node>
      <node id="44">
        <label>md/setget.md.libmd.cc</label>
        <link refid="setget_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>libmd-src/mpmd.libmd.cc</label>
        <link refid="mpmd_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>set</label>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="40">
        <label>md/forces.md.libmd.cc</label>
        <link refid="forces_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>libmd-src/error.libmd.cc</label>
        <link refid="error_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>md/integrator.md.libmd.cc</label>
        <link refid="integrator_8md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstring</label>
      </node>
      <node id="20">
        <label>libmd-src/macros.libmd.h</label>
        <link refid="macros_8libmd_8h"/>
      </node>
      <node id="26">
        <label>libmd-src/forces.libmd.cc</label>
        <link refid="forces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22">
        <label>libmd-src/md/index.md.libmd.cc</label>
        <link refid="index_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>libmd-src/md/hooks.md.libmd.cc</label>
        <link refid="hooks_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>libmd-src/mongepatches.libmd.cc</label>
        <link refid="mongepatches_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>libmd-src/md/interaction.md.libmd.cc</label>
        <link refid="interaction_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>libmd-src/variadic_vars.libmd.cc</label>
        <link refid="variadic__vars_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>libmd-src/interact.libmd.cc</label>
        <link refid="interact_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>libmd-src/md/distances.md.libmd.cc</label>
        <link refid="distances_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>libmd-src/md/energy.md.libmd.cc</label>
        <link refid="energy_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>libmd-src/pairpotentials.libmd.cc</label>
        <link refid="pairpotentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>libmd-src/mp.libmd.cc</label>
        <link refid="mp_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>libmd-src/box.libmd.cc</label>
        <link refid="box_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>libmd-src/md/bonds.md.libmd.cc</label>
        <link refid="bonds_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>libmd-src/integrators.libmd.cc</label>
        <link refid="integrators_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>libmd-src/autodiff.libmd.cc</label>
        <link refid="autodiff_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>libmd-src/boundaryconditions.libmd.cc</label>
        <link refid="boundaryconditions_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>libmd-src/md/particles.md.libmd.cc</label>
        <link refid="particles_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>libmd-src/particle.libmd.cc</label>
        <link refid="particle_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>libmd-src/autodiff2.libmd.cc</label>
        <link refid="autodiff2_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>libmd-src/bcond.libmd.cc</label>
        <link refid="bcond_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>libmd-src/potentials.libmd.cc</label>
        <link refid="potentials_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>libmd-src/md/importexport.md.libmd.cc</label>
        <link refid="importexport_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>libmd-src/md/periodicity.md.libmd.cc</label>
        <link refid="periodicity_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>libmd-src/index.libmd.cc</label>
        <link refid="index_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>libmd-src/externalforces.libmd.cc</label>
        <link refid="externalforces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>libmd-src/md/sp.md.libmd.cc</label>
        <link refid="sp_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>libmd-src/md.libmd.cc</label>
        <link refid="md_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>libmd.cc</label>
        <link refid="libmd_8cc"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>libmd.h</label>
        <link refid="libmd_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>libmd-src/hooks.libmd.cc</label>
        <link refid="hooks_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>libmd-src/md/setget.md.libmd.cc</label>
        <link refid="setget_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>libmd-src/mpmd.libmd.cc</label>
        <link refid="mpmd_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>libmd-src/md/forces.md.libmd.cc</label>
        <link refid="forces_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>libmd-src/error.libmd.cc</label>
        <link refid="error_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>libmd-src/md/integrator.md.libmd.cc</label>
        <link refid="integrator_8md_8libmd_8cc"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>libmd-src/forces.libmd.cc</label>
        <link refid="forces_8libmd_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="autodiff_8libmd_8cc_a4384389855e24d346feb2e60f23afb0b_1a4384389855e24d346feb2e60f23afb0b" prot="public" static="no">
        <name>__libmd_src_file__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="1" column="9" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="1" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="autodiff_8libmd_8cc_a2ab50ca152117a4e2de0215ce0d463a1_1a2ab50ca152117a4e2de0215ce0d463a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="54" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="54" bodyend="57"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a32092ec9e3070279926b37dc8c40b876_1a32092ec9e3070279926b37dc8c40b876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="59" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="59" bodyend="62"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ac2306bb5d57500afce2ba0c55ffbf7a2_1ac2306bb5d57500afce2ba0c55ffbf7a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="64" column="1" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="64" bodyend="67"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_aff574c089d0698fa5b26b3933962fba9_1aff574c089d0698fa5b26b3933962fba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="69" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="69" bodyend="72"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_adacacd5ab97a9ed5ff4d66f748e49dca_1adacacd5ab97a9ed5ff4d66f748e49dca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="74" column="1" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="74" bodyend="77"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ad98340c551905837f302e32c67998876_1ad98340c551905837f302e32c67998876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="79" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="79" bodyend="82"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a3818720390216811995c9ba88290436e_1a3818720390216811995c9ba88290436e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(dual &amp;F, X a)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="84" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="84" bodyend="87"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_afd538e19751d4f12c697ef667391afb4_1afd538e19751d4f12c697ef667391afb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(dual &amp;F, X a)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="89" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="89" bodyend="92"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a82495dc423b31e4dc021638dd1920b70_1a82495dc423b31e4dc021638dd1920b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(dual &amp;F, X a)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="94" column="12" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="94" bodyend="97"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a2c509437ddde7b960b334a68d76361c2_1a2c509437ddde7b960b334a68d76361c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(dual &amp;F, X a)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="99" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="99" bodyend="102"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a056f2b1d61d6ba6e817ed45f05935658_1a056f2b1d61d6ba6e817ed45f05935658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(dual F, X a)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="104" column="12" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="104" bodyend="107"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ad3231ed0dcd73a0d3ba272e320646923_1ad3231ed0dcd73a0d3ba272e320646923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(dual F, X a)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="109" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="109" bodyend="112"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_aac81abd859ba80c4d3335ff0e6b198fb_1aac81abd859ba80c4d3335ff0e6b198fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(X a, dual &amp;F)</argsstring>
        <name>operator==</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="114" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="114" bodyend="117"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_afb27beedd56526f459935e8d4dac0494_1afb27beedd56526f459935e8d4dac0494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(X a, dual &amp;F)</argsstring>
        <name>operator!=</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="119" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="119" bodyend="122"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_afbec72ee4b7b7885d510a4cae2eacaad_1afbec72ee4b7b7885d510a4cae2eacaad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(X a, dual &amp;F)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="124" column="12" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="124" bodyend="127"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ab19f2d90ffc0cf04dfc2ba1c007be321_1ab19f2d90ffc0cf04dfc2ba1c007be321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(X a, dual &amp;F)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="129" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="129" bodyend="132"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a3bfbfc99b3abb685037fc9cf85a86104_1a3bfbfc99b3abb685037fc9cf85a86104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(X a, dual F)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="134" column="12" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="134" bodyend="137"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a773f4bac949ffa021ee845c247910607_1a773f4bac949ffa021ee845c247910607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(X a, dual F)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="139" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="139" bodyend="142"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_adc401fe49f91ae1e919bcbfcc5ede801_1adc401fe49f91ae1e919bcbfcc5ede801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator-</definition>
        <argsstring>(dual F)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="147" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="147" bodyend="150"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a5821edaf0916e5953069329d48429263_1a5821edaf0916e5953069329d48429263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator+</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="152" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="152" bodyend="155"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ae04397964e1ec8db28ef2900e1d70304_1ae04397964e1ec8db28ef2900e1d70304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator-</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="157" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="157" bodyend="160"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a3dc3382f5a628e69c172a3b45b9d6cfb_1a3dc3382f5a628e69c172a3b45b9d6cfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator*</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="162" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="162" bodyend="165"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_acd51ff3854e9a4d5de25869cdba3f356_1acd51ff3854e9a4d5de25869cdba3f356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator/</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="167" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="167" bodyend="170"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a860d7035050ddee6f20be6b40644f11f_1a860d7035050ddee6f20be6b40644f11f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator+=</definition>
        <argsstring>(dual &amp;F, dual G)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="172" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="172" bodyend="177"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a949cb5795c15a1f83396a26659966670_1a949cb5795c15a1f83396a26659966670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator-=</definition>
        <argsstring>(dual &amp;F, dual G)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="179" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="179" bodyend="184"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_af6b4c9f452afefa1a71dfa597553769a_1af6b4c9f452afefa1a71dfa597553769a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator*=</definition>
        <argsstring>(dual &amp;F, dual G)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="186" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a7c5e5ad8287fb5b42aa3b50b8848d90e_1a7c5e5ad8287fb5b42aa3b50b8848d90e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator/=</definition>
        <argsstring>(dual &amp;F, dual G)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="191" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ab60dd5348dc660ac16c98317e39123be_1ab60dd5348dc660ac16c98317e39123be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator+</definition>
        <argsstring>(dual F, X a)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="199" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="199" bodyend="202"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a3689db54e5ca6fbecc610405b87281a7_1a3689db54e5ca6fbecc610405b87281a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator-</definition>
        <argsstring>(dual F, X a)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="204" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="204" bodyend="207"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_acb92d20026c653d6f46cb6456e92bd24_1acb92d20026c653d6f46cb6456e92bd24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator*</definition>
        <argsstring>(dual F, X a)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="209" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="209" bodyend="212"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a88dc94d8ff594a25ce0a603e6babc9bf_1a88dc94d8ff594a25ce0a603e6babc9bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator/</definition>
        <argsstring>(dual F, X a)</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="214" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="214" bodyend="217"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a97db9b80b50c122505c6b17ba650db84_1a97db9b80b50c122505c6b17ba650db84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator+</definition>
        <argsstring>(X a, dual F)</argsstring>
        <name>operator+</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="219" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_aa553f7521149a64b3ecd59c6a07ef645_1aa553f7521149a64b3ecd59c6a07ef645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator-</definition>
        <argsstring>(X a, dual F)</argsstring>
        <name>operator-</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="224" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a955b8d53dff3223fdc94454489d69934_1a955b8d53dff3223fdc94454489d69934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator*</definition>
        <argsstring>(X a, dual F)</argsstring>
        <name>operator*</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="229" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a62abf4e5f54ba3f1562f9ba092a024d1_1a62abf4e5f54ba3f1562f9ba092a024d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator/</definition>
        <argsstring>(X a, dual F)</argsstring>
        <name>operator/</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="234" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="234" bodyend="237"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a4dea6908739b8fbbf1838cdb48b59007_1a4dea6908739b8fbbf1838cdb48b59007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator+=</definition>
        <argsstring>(dual &amp;F, X a)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="239" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="239" bodyend="243"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_aee16051e1f728da61ffe3675426c98fd_1aee16051e1f728da61ffe3675426c98fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator-=</definition>
        <argsstring>(dual &amp;F, X a)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="245" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="245" bodyend="249"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_af205152fd981e3fdb332806c633555cb_1af205152fd981e3fdb332806c633555cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator*=</definition>
        <argsstring>(dual &amp;F, X a)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="251" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="251" bodyend="256"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a3e0b0cb2dafd1000769dd938bd85f510_1a3e0b0cb2dafd1000769dd938bd85f510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual operator/=</definition>
        <argsstring>(dual &amp;F, X a)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="258" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="258" bodyend="263"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual sqrt</definition>
        <argsstring>(dual F)</argsstring>
        <name>sqrt</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="268" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="268" bodyend="272"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="autodiff_8libmd_8cc_a040c41bf3dc05dcba9979d734c21baee_1a040c41bf3dc05dcba9979d734c21baee" compoundref="autodiff_8libmd_8cc" startline="339" endline="342">acos</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_af721ea82ca3508a32aa07785eda160db_1af721ea82ca3508a32aa07785eda160db" compoundref="autodiff_8libmd_8cc" startline="354" endline="357">acosh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a73c9bf3c995cc3c4d03cf482e336dbc9_1a73c9bf3c995cc3c4d03cf482e336dbc9" compoundref="autodiff_8libmd_8cc" startline="334" endline="337">asin</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a76dcf65fff0eeed8ad43914e47357784_1a76dcf65fff0eeed8ad43914e47357784" compoundref="autodiff_8libmd_8cc" startline="349" endline="352">asinh</referencedby>
        <referencedby refid="libmd_8h_a2893f1abcebbd51fb9f4748ce2e97b7a_1a2893f1abcebbd51fb9f4748ce2e97b7a" compoundref="boundaryconditions_8libmd_8cc" startline="61" endline="117">BCOND_HARD</referencedby>
        <referencedby refid="libmd_8h_ae8c991d6b345b8b1e7707f364ac01965_1ae8c991d6b345b8b1e7707f364ac01965" compoundref="forces_8libmd_8cc" startline="51" endline="69">LANGEVIN</referencedby>
        <referencedby refid="libmd_8h_a275ca4af41bc046ed3522574d3eb6690_1a275ca4af41bc046ed3522574d3eb6690" compoundref="forces_8libmd_8cc" startline="72" endline="91">LANGEVIN_MP</referencedby>
        <referencedby refid="structmpmd_a13769566d0f591f1a5bdacea665aaf59_1a13769566d0f591f1a5bdacea665aaf59" compoundref="mpmd_8libmd_8cc" startline="178" endline="201">mpmd&lt; dim &gt;::mp_thread_calc_pot_forces</referencedby>
        <referencedby refid="structmp_abd53fa81c114885220760369e00581e2_1abd53fa81c114885220760369e00581e2" compoundref="mp_8libmd_8cc" startline="133" endline="141">mp&lt; dim &gt;::sqrt_ginv</referencedby>
        <referencedby refid="structmd_ac3b4dfe4eba7350b266d30517671bdb6_1ac3b4dfe4eba7350b266d30517671bdb6" compoundref="forces_8md_8libmd_8cc" startline="14" endline="38">md&lt; dim &gt;::thread_calc_pot_forces</referencedby>
        <referencedby refid="structmd_a4220b18f9181ca58e4c943ddc204036a_1a4220b18f9181ca58e4c943ddc204036a" compoundref="energy_8md_8libmd_8cc" startline="24" endline="43">md&lt; dim &gt;::thread_V</referencedby>
        <referencedby refid="structmpmd_acaf1bb37ff9ca7c2b6db0093478dfb94_1acaf1bb37ff9ca7c2b6db0093478dfb94" compoundref="mpmd_8libmd_8cc" startline="278" endline="296">mpmd&lt; dim &gt;::thread_V</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual pow</definition>
        <argsstring>(dual F, X n)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>X</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="274" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="274" bodyend="277"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="autodiff_8libmd_8cc_a040c41bf3dc05dcba9979d734c21baee_1a040c41bf3dc05dcba9979d734c21baee" compoundref="autodiff_8libmd_8cc" startline="339" endline="342">acos</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_af721ea82ca3508a32aa07785eda160db_1af721ea82ca3508a32aa07785eda160db" compoundref="autodiff_8libmd_8cc" startline="354" endline="357">acosh</referencedby>
        <referencedby refid="structmd_ab793b4e0bf5ad988d9e8cfb0f0e02f38_1ab793b4e0bf5ad988d9e8cfb0f0e02f38" compoundref="interaction_8md_8libmd_8cc" startline="16" endline="23">md&lt; dim &gt;::all_interactions</referencedby>
        <referencedby refid="libmd_8h_a3bc06782c0bafd9eb6e5e63a37a3fbad_1a3bc06782c0bafd9eb6e5e63a37a3fbad" compoundref="potentials_8libmd_8cc" startline="107" endline="123">ANHARMONICSPRING</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a73c9bf3c995cc3c4d03cf482e336dbc9_1a73c9bf3c995cc3c4d03cf482e336dbc9" compoundref="autodiff_8libmd_8cc" startline="334" endline="337">asin</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a76dcf65fff0eeed8ad43914e47357784_1a76dcf65fff0eeed8ad43914e47357784" compoundref="autodiff_8libmd_8cc" startline="349" endline="352">asinh</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_a26549f48667589d8f719aa26f45b8e36_1a26549f48667589d8f719aa26f45b8e36" compoundref="autodiff_8libmd_8cc" startline="344" endline="347">atan</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ac6f307e61a8625bec9924605d5c05593_1ac6f307e61a8625bec9924605d5c05593" compoundref="autodiff_8libmd_8cc" startline="359" endline="362">atanh</referencedby>
        <referencedby refid="structmd_a32c3d5e5fe53203d0754ac9706bd0f21_1a32c3d5e5fe53203d0754ac9706bd0f21" compoundref="index_8md_8libmd_8cc" startline="369" endline="380">md&lt; dim &gt;::bruteforce</referencedby>
        <referencedby refid="structmd_af99c7ccc16292d4c1cdb07bd0c9ac895_1af99c7ccc16292d4c1cdb07bd0c9ac895" compoundref="index_8md_8libmd_8cc" startline="265" endline="367">md&lt; dim &gt;::cell</referencedby>
        <referencedby refid="structmd_ae0dbf3df141878e6530b7ba1cf18836d_1ae0dbf3df141878e6530b7ba1cf18836d" compoundref="distances_8md_8libmd_8cc" startline="26" endline="38">md&lt; dim &gt;::distsq</referencedby>
        <referencedby refid="structmpmd_a8d8a7f180f8b2bc1a009eda40285f1ac_1a8d8a7f180f8b2bc1a009eda40285f1ac" compoundref="mpmd_8libmd_8cc" startline="6" endline="12">mpmd&lt; dim &gt;::embedded_distsq</referencedby>
        <referencedby refid="libmd_8h_ac3b9677e3fcde78947e0e86b9cc72fc4_1ac3b9677e3fcde78947e0e86b9cc72fc4" compoundref="mongepatches_8libmd_8cc" startline="27" endline="44">GAUSSIANBUMP</referencedby>
        <referencedby refid="structmp_a2c5825d8f21771e40b120082e50827d2_1a2c5825d8f21771e40b120082e50827d2" compoundref="mp_8libmd_8cc" startline="123" endline="131">mp&lt; dim &gt;::ginv</referencedby>
        <referencedby refid="libmd_8h_a82eec3e4535cd60b73051cf9970be606_1a82eec3e4535cd60b73051cf9970be606" compoundref="potentials_8libmd_8cc" startline="36" endline="50">HOOKEAN</referencedby>
        <referencedby refid="structmd_ad0dfd19e75aacb45e98ce6c5b198e135_1ad0dfd19e75aacb45e98ce6c5b198e135" compoundref="interaction_8md_8libmd_8cc" startline="6" endline="14">md&lt; dim &gt;::interactions</referencedby>
        <referencedby refid="structmd_af6fbb4becba7012a1914b5eee637d718_1af6fbb4becba7012a1914b5eee637d718" compoundref="index_8md_8libmd_8cc" startline="91" endline="138">md&lt; dim &gt;::kdtree_index</referencedby>
        <referencedby refid="libmd_8h_a2d9694d9eebcc0fcc8245d5fe107ab44_1a2d9694d9eebcc0fcc8245d5fe107ab44" compoundref="potentials_8libmd_8cc" startline="52" endline="66">LJ</referencedby>
        <referencedby refid="mongepatches_8libmd_8cc_a0d7247077c47e777d4aab1d88b4a69de_1a0d7247077c47e777d4aab1d88b4a69de" compoundref="mongepatches_8libmd_8cc" startline="63" endline="81">MOLLIFIER</referencedby>
        <referencedby refid="libmd_8h_a3f9ca49430b0d735c6547b4c36d3fe29_1a3f9ca49430b0d735c6547b4c36d3fe29" compoundref="potentials_8libmd_8cc" startline="68" endline="84">MORSE</referencedby>
        <referencedby refid="structmpmd_a13769566d0f591f1a5bdacea665aaf59_1a13769566d0f591f1a5bdacea665aaf59" compoundref="mpmd_8libmd_8cc" startline="178" endline="201">mpmd&lt; dim &gt;::mp_thread_calc_pot_forces</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_acd51ff3854e9a4d5de25869cdba3f356_1acd51ff3854e9a4d5de25869cdba3f356" compoundref="autodiff_8libmd_8cc" startline="167" endline="170">operator/</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ac07173c0c612d7990c7ee36496ee985d_1ac07173c0c612d7990c7ee36496ee985d" compoundref="autodiff_8libmd_8cc" startline="285" endline="289">pow</referencedby>
        <referencedby refid="structmd_acc84dcb35866c880a061460c0abbc385_1acc84dcb35866c880a061460c0abbc385" compoundref="setget_8md_8libmd_8cc" startline="191" endline="204">md&lt; dim &gt;::set_reserve</referencedby>
        <referencedby refid="structmp_abd53fa81c114885220760369e00581e2_1abd53fa81c114885220760369e00581e2" compoundref="mp_8libmd_8cc" startline="133" endline="141">mp&lt; dim &gt;::sqrt_ginv</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ad88f26473230730cf0f25ed75da0919a_1ad88f26473230730cf0f25ed75da0919a" compoundref="autodiff_8libmd_8cc" startline="312" endline="316">tan</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_abbd200edacd1697a6bb86ddcbe9d6f02_1abbd200edacd1697a6bb86ddcbe9d6f02" compoundref="autodiff_8libmd_8cc" startline="328" endline="332">tanh</referencedby>
        <referencedby refid="structmd_aee6148340ce4331e84344df87f4e1800_1aee6148340ce4331e84344df87f4e1800" compoundref="index_8md_8libmd_8cc" startline="37" endline="55">md&lt; dim &gt;::test_index</referencedby>
        <referencedby refid="structmd_ac3b4dfe4eba7350b266d30517671bdb6_1ac3b4dfe4eba7350b266d30517671bdb6" compoundref="forces_8md_8libmd_8cc" startline="14" endline="38">md&lt; dim &gt;::thread_calc_pot_forces</referencedby>
        <referencedby refid="structmd_a32d3e55bfbbebfbc73f0aca3242d8b3b_1a32d3e55bfbbebfbc73f0aca3242d8b3b" compoundref="index_8md_8libmd_8cc" startline="183" endline="262">md&lt; dim &gt;::thread_cell</referencedby>
        <referencedby refid="structmd_a4ca9f88cee18bca90350dcb4cb74dda6_1a4ca9f88cee18bca90350dcb4cb74dda6" compoundref="energy_8md_8libmd_8cc" startline="14" endline="22">md&lt; dim &gt;::thread_T</referencedby>
        <referencedby refid="structmd_a4220b18f9181ca58e4c943ddc204036a_1a4220b18f9181ca58e4c943ddc204036a" compoundref="energy_8md_8libmd_8cc" startline="24" endline="43">md&lt; dim &gt;::thread_V</referencedby>
        <referencedby refid="structmpmd_acaf1bb37ff9ca7c2b6db0093478dfb94_1acaf1bb37ff9ca7c2b6db0093478dfb94" compoundref="mpmd_8libmd_8cc" startline="278" endline="296">mpmd&lt; dim &gt;::thread_V</referencedby>
        <referencedby refid="structmd_a151360bcbdea5b086399aded05d7ade8_1a151360bcbdea5b086399aded05d7ade8" compoundref="integrator_8md_8libmd_8cc" startline="25" endline="38">md&lt; dim &gt;::thread_vverlet_x</referencedby>
        <referencedby refid="structmpmd_a0f07f1bb38ae54ee286bd1d1223b59e9_1a0f07f1bb38ae54ee286bd1d1223b59e9" compoundref="mpmd_8libmd_8cc" startline="56" endline="67">mpmd&lt; dim &gt;::zuiden_C</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ade909d25ab24d31221b8640c8c6e58c3_1ade909d25ab24d31221b8640c8c6e58c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual exp</definition>
        <argsstring>(dual F)</argsstring>
        <name>exp</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="279" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="279" bodyend="283"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="libmd_8h_ac3b9677e3fcde78947e0e86b9cc72fc4_1ac3b9677e3fcde78947e0e86b9cc72fc4" compoundref="mongepatches_8libmd_8cc" startline="27" endline="44">GAUSSIANBUMP</referencedby>
        <referencedby refid="mongepatches_8libmd_8cc_a0d7247077c47e777d4aab1d88b4a69de_1a0d7247077c47e777d4aab1d88b4a69de" compoundref="mongepatches_8libmd_8cc" startline="63" endline="81">MOLLIFIER</referencedby>
        <referencedby refid="libmd_8h_a3f9ca49430b0d735c6547b4c36d3fe29_1a3f9ca49430b0d735c6547b4c36d3fe29" compoundref="potentials_8libmd_8cc" startline="68" endline="84">MORSE</referencedby>
        <referencedby refid="libmd_8h_af54e62e12e037d8b70bfd88d71fe23a9_1af54e62e12e037d8b70bfd88d71fe23a9" compoundref="potentials_8libmd_8cc" startline="20" endline="34">YUKAWA</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ac07173c0c612d7990c7ee36496ee985d_1ac07173c0c612d7990c7ee36496ee985d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class X</type>
          </param>
        </templateparamlist>
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual pow</definition>
        <argsstring>(X a, dual G)</argsstring>
        <name>pow</name>
        <param>
          <type>X</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="285" column="17" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="285" bodyend="289"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" compoundref="autodiff_8libmd_8cc" startline="297" endline="300">log</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_aa103edb978eba5b3ce73a507ccdad4a1_1aa103edb978eba5b3ce73a507ccdad4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual pow</definition>
        <argsstring>(dual F, dual G)</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="291" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="291" bodyend="295"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" compoundref="autodiff_8libmd_8cc" startline="297" endline="300">log</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual log</definition>
        <argsstring>(dual F)</argsstring>
        <name>log</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="297" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="297" bodyend="300"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="autodiff_8libmd_8cc_ac07173c0c612d7990c7ee36496ee985d_1ac07173c0c612d7990c7ee36496ee985d" compoundref="autodiff_8libmd_8cc" startline="285" endline="289">pow</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ae7305fd3e8a857970c0c733d86331fcf_1ae7305fd3e8a857970c0c733d86331fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual sin</definition>
        <argsstring>(dual F)</argsstring>
        <name>sin</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="302" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="302" bodyend="305"/>
        <references refid="autodiff_8libmd_8cc_ad7bdaf61a457836d313298fa3b23aa23_1ad7bdaf61a457836d313298fa3b23aa23" compoundref="autodiff_8libmd_8cc" startline="307" endline="310">cos</references>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="autodiff_8libmd_8cc_ad7bdaf61a457836d313298fa3b23aa23_1ad7bdaf61a457836d313298fa3b23aa23" compoundref="autodiff_8libmd_8cc" startline="307" endline="310">cos</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ad7bdaf61a457836d313298fa3b23aa23_1ad7bdaf61a457836d313298fa3b23aa23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual cos</definition>
        <argsstring>(dual F)</argsstring>
        <name>cos</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="307" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="307" bodyend="310"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_ae7305fd3e8a857970c0c733d86331fcf_1ae7305fd3e8a857970c0c733d86331fcf" compoundref="autodiff_8libmd_8cc" startline="302" endline="305">sin</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="mongepatches_8libmd_8cc_a7e124d9554d14ed2794809c926722ab1_1a7e124d9554d14ed2794809c926722ab1" compoundref="mongepatches_8libmd_8cc" startline="46" endline="61">EGGCARTON</referencedby>
        <referencedby refid="autodiff_8libmd_8cc_ae7305fd3e8a857970c0c733d86331fcf_1ae7305fd3e8a857970c0c733d86331fcf" compoundref="autodiff_8libmd_8cc" startline="302" endline="305">sin</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ad88f26473230730cf0f25ed75da0919a_1ad88f26473230730cf0f25ed75da0919a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual tan</definition>
        <argsstring>(dual F)</argsstring>
        <name>tan</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="312" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="312" bodyend="316"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_abf47560a37aef7062cf7ac5a337f6648_1abf47560a37aef7062cf7ac5a337f6648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual sinh</definition>
        <argsstring>(dual F)</argsstring>
        <name>sinh</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="318" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="318" bodyend="321"/>
        <references refid="autodiff_8libmd_8cc_a19401cc2673b8563b7683a7e61bbba8f_1a19401cc2673b8563b7683a7e61bbba8f" compoundref="autodiff_8libmd_8cc" startline="323" endline="326">cosh</references>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="autodiff_8libmd_8cc_a19401cc2673b8563b7683a7e61bbba8f_1a19401cc2673b8563b7683a7e61bbba8f" compoundref="autodiff_8libmd_8cc" startline="323" endline="326">cosh</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a19401cc2673b8563b7683a7e61bbba8f_1a19401cc2673b8563b7683a7e61bbba8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual cosh</definition>
        <argsstring>(dual F)</argsstring>
        <name>cosh</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="323" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="323" bodyend="326"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_abf47560a37aef7062cf7ac5a337f6648_1abf47560a37aef7062cf7ac5a337f6648" compoundref="autodiff_8libmd_8cc" startline="318" endline="321">sinh</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="autodiff_8libmd_8cc_abf47560a37aef7062cf7ac5a337f6648_1abf47560a37aef7062cf7ac5a337f6648" compoundref="autodiff_8libmd_8cc" startline="318" endline="321">sinh</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_abbd200edacd1697a6bb86ddcbe9d6f02_1abbd200edacd1697a6bb86ddcbe9d6f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual tanh</definition>
        <argsstring>(dual F)</argsstring>
        <name>tanh</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="328" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="328" bodyend="332"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a73c9bf3c995cc3c4d03cf482e336dbc9_1a73c9bf3c995cc3c4d03cf482e336dbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual asin</definition>
        <argsstring>(dual F)</argsstring>
        <name>asin</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="334" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="334" bodyend="337"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" compoundref="autodiff_8libmd_8cc" startline="268" endline="272">sqrt</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a040c41bf3dc05dcba9979d734c21baee_1a040c41bf3dc05dcba9979d734c21baee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual acos</definition>
        <argsstring>(dual F)</argsstring>
        <name>acos</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="339" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="339" bodyend="342"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" compoundref="autodiff_8libmd_8cc" startline="268" endline="272">sqrt</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="structmd_acc84dcb35866c880a061460c0abbc385_1acc84dcb35866c880a061460c0abbc385" compoundref="setget_8md_8libmd_8cc" startline="191" endline="204">md&lt; dim &gt;::set_reserve</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a26549f48667589d8f719aa26f45b8e36_1a26549f48667589d8f719aa26f45b8e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual atan</definition>
        <argsstring>(dual F)</argsstring>
        <name>atan</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="344" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="344" bodyend="347"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a76dcf65fff0eeed8ad43914e47357784_1a76dcf65fff0eeed8ad43914e47357784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual asinh</definition>
        <argsstring>(dual F)</argsstring>
        <name>asinh</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="349" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="349" bodyend="352"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" compoundref="autodiff_8libmd_8cc" startline="268" endline="272">sqrt</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_af721ea82ca3508a32aa07785eda160db_1af721ea82ca3508a32aa07785eda160db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual acosh</definition>
        <argsstring>(dual F)</argsstring>
        <name>acosh</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="354" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="354" bodyend="357"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" compoundref="autodiff_8libmd_8cc" startline="268" endline="272">sqrt</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_ac6f307e61a8625bec9924605d5c05593_1ac6f307e61a8625bec9924605d5c05593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual atanh</definition>
        <argsstring>(dual F)</argsstring>
        <name>atanh</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="359" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="359" bodyend="362"/>
        <references refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" compoundref="libmd_8h" startline="251">dual::dx</references>
        <references refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" compoundref="autodiff_8libmd_8cc" startline="274" endline="277">pow</references>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual abs</definition>
        <argsstring>(dual F)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="364" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="364" bodyend="367"/>
        <references refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" compoundref="libmd_8h" startline="250">dual::x</references>
        <referencedby refid="libmd_8h_a3bc06782c0bafd9eb6e5e63a37a3fbad_1a3bc06782c0bafd9eb6e5e63a37a3fbad" compoundref="potentials_8libmd_8cc" startline="107" endline="123">ANHARMONICSPRING</referencedby>
        <referencedby refid="libmd_8h_a2893f1abcebbd51fb9f4748ce2e97b7a_1a2893f1abcebbd51fb9f4748ce2e97b7a" compoundref="boundaryconditions_8libmd_8cc" startline="61" endline="117">BCOND_HARD</referencedby>
        <referencedby refid="structmd_af99c7ccc16292d4c1cdb07bd0c9ac895_1af99c7ccc16292d4c1cdb07bd0c9ac895" compoundref="index_8md_8libmd_8cc" startline="265" endline="367">md&lt; dim &gt;::cell</referencedby>
        <referencedby refid="structmd_af4b990db21034be32837761098e03336_1af4b990db21034be32837761098e03336" compoundref="distances_8md_8libmd_8cc" startline="6" endline="24">md&lt; dim &gt;::dap</referencedby>
        <referencedby refid="structmd_adde7787c69335e330aa9163fb340a40f_1adde7787c69335e330aa9163fb340a40f" compoundref="distances_8md_8libmd_8cc" startline="91" endline="113">md&lt; dim &gt;::dd</referencedby>
        <referencedby refid="box_8libmd_8cc_a40b2bff2b597ae82496372ce80675e68_1a40b2bff2b597ae82496372ce80675e68" compoundref="box_8libmd_8cc" startline="64" endline="114">det</referencedby>
        <referencedby refid="structmd_a6d7f9c3ed6d212f1b34b2d2e94b7fd33_1a6d7f9c3ed6d212f1b34b2d2e94b7fd33" compoundref="distances_8md_8libmd_8cc" startline="137" endline="163">md&lt; dim &gt;::dv</referencedby>
        <referencedby refid="libmd_8h_a60601f0c510687b04a3ae288ba5f4565_1a60601f0c510687b04a3ae288ba5f4565" compoundref="potentials_8libmd_8cc" startline="93" endline="105">HOOKEANFORCEDIPOLE</referencedby>
        <referencedby refid="structbox_a0dd5c44041b2e9431748d8f04e4890f7_1a0dd5c44041b2e9431748d8f04e4890f7" compoundref="box_8libmd_8cc" startline="158" endline="169">box&lt; dim &gt;::invert_box</referencedby>
        <referencedby refid="structmd_a32d3e55bfbbebfbc73f0aca3242d8b3b_1a32d3e55bfbbebfbc73f0aca3242d8b3b" compoundref="index_8md_8libmd_8cc" startline="183" endline="262">md&lt; dim &gt;::thread_cell</referencedby>
        <referencedby refid="structmpmd_a47eee1cf060ce915bb077ac558fb762c_1a47eee1cf060ce915bb077ac558fb762c" compoundref="mpmd_8libmd_8cc" startline="118" endline="139">mpmd&lt; dim &gt;::thread_zuiden</referencedby>
        <referencedby refid="structmpmd_a8e7d1b7cafc905e283023a6b822cc766_1a8e7d1b7cafc905e283023a6b822cc766" compoundref="mpmd_8libmd_8cc" startline="92" endline="116">mpmd&lt; dim &gt;::thread_zuiden_protect</referencedby>
      </memberdef>
      <memberdef kind="function" id="autodiff_8libmd_8cc_a1d639d8dee10f02c2e6c9fcf6b42b2ae_1a1d639d8dee10f02c2e6c9fcf6b42b2ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdual" kindref="compound">dual</ref></type>
        <definition>dual heaviside</definition>
        <argsstring>(dual F)</argsstring>
        <name>heaviside</name>
        <param>
          <type><ref refid="structdual" kindref="compound">dual</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libmd-src/autodiff.libmd.cc" line="369" column="6" bodyfile="libmd-src/autodiff.libmd.cc" bodystart="369" bodyend="372"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="autodiff_8libmd_8cc_a4384389855e24d346feb2e60f23afb0b_1a4384389855e24d346feb2e60f23afb0b" refkind="member"><highlight class="preprocessor">#define<sp/>__libmd_src_file__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>libmd_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../libmd.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="structdual_aa490742539c960d01d34ec9763b93179_1aa490742539c960d01d34ec9763b93179" refkind="member"><highlight class="normal"><ref refid="structdual_aa490742539c960d01d34ec9763b93179_1aa490742539c960d01d34ec9763b93179" kindref="member">dual::dual</ref>()</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="structdual_ac362963c9a244be51f5b1be969b1481c_1ac362963c9a244be51f5b1be969b1481c" refkind="member"><highlight class="normal"><ref refid="structdual_aa490742539c960d01d34ec9763b93179_1aa490742539c960d01d34ec9763b93179" kindref="member">dual::dual</ref>(<ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>f,<ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>fx)</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>=f;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>=fx;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structdual_ae908dadc1eeea5e4992d7c28b7ae78f2_1ae908dadc1eeea5e4992d7c28b7ae78f2" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="structdual_ae908dadc1eeea5e4992d7c28b7ae78f2_1ae908dadc1eeea5e4992d7c28b7ae78f2" kindref="member">dual::operator=</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>=G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>=G.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structdual_a4d24f448fd2ec95c7d654d6161763420_1a4d24f448fd2ec95c7d654d6161763420" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="structdual_ae908dadc1eeea5e4992d7c28b7ae78f2_1ae908dadc1eeea5e4992d7c28b7ae78f2" kindref="member">dual::operator=</ref>(X<sp/>a)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">=<ref refid="structdual_aa490742539c960d01d34ec9763b93179_1aa490742539c960d01d34ec9763b93179" kindref="member">dual</ref>(a);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="structdual_ae1212c7c38280a75edc4fd45d3514474_1ae1212c7c38280a75edc4fd45d3514474" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/>dual::operator<sp/>X()</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparisons</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="autodiff_8libmd_8cc_a2ab50ca152117a4e2de0215ce0d463a1_1a2ab50ca152117a4e2de0215ce0d463a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_a2ab50ca152117a4e2de0215ce0d463a1_1a2ab50ca152117a4e2de0215ce0d463a1" kindref="member">operator==</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>==G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="autodiff_8libmd_8cc_a32092ec9e3070279926b37dc8c40b876_1a32092ec9e3070279926b37dc8c40b876" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_a32092ec9e3070279926b37dc8c40b876_1a32092ec9e3070279926b37dc8c40b876" kindref="member">operator!=</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>!=G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="autodiff_8libmd_8cc_ac2306bb5d57500afce2ba0c55ffbf7a2_1ac2306bb5d57500afce2ba0c55ffbf7a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_ac2306bb5d57500afce2ba0c55ffbf7a2_1ac2306bb5d57500afce2ba0c55ffbf7a2" kindref="member">operator&lt;=</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>&lt;=G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="autodiff_8libmd_8cc_aff574c089d0698fa5b26b3933962fba9_1aff574c089d0698fa5b26b3933962fba9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_aff574c089d0698fa5b26b3933962fba9_1aff574c089d0698fa5b26b3933962fba9" kindref="member">operator&gt;=</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>&gt;=G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="autodiff_8libmd_8cc_adacacd5ab97a9ed5ff4d66f748e49dca_1adacacd5ab97a9ed5ff4d66f748e49dca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_adacacd5ab97a9ed5ff4d66f748e49dca_1adacacd5ab97a9ed5ff4d66f748e49dca" kindref="member">operator&lt;</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>&lt;G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="autodiff_8libmd_8cc_ad98340c551905837f302e32c67998876_1ad98340c551905837f302e32c67998876" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_ad98340c551905837f302e32c67998876_1ad98340c551905837f302e32c67998876" kindref="member">operator&gt;</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>&gt;G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="autodiff_8libmd_8cc_a3818720390216811995c9ba88290436e_1a3818720390216811995c9ba88290436e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_a2ab50ca152117a4e2de0215ce0d463a1_1a2ab50ca152117a4e2de0215ce0d463a1" kindref="member">operator==</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>&amp;F,X<sp/>a)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>==a;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="autodiff_8libmd_8cc_afd538e19751d4f12c697ef667391afb4_1afd538e19751d4f12c697ef667391afb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_a32092ec9e3070279926b37dc8c40b876_1a32092ec9e3070279926b37dc8c40b876" kindref="member">operator!=</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>&amp;F,X<sp/>a)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>!=a;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="autodiff_8libmd_8cc_a82495dc423b31e4dc021638dd1920b70_1a82495dc423b31e4dc021638dd1920b70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_ac2306bb5d57500afce2ba0c55ffbf7a2_1ac2306bb5d57500afce2ba0c55ffbf7a2" kindref="member">operator&lt;=</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>&amp;F,X<sp/>a)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>&lt;=a;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="autodiff_8libmd_8cc_a2c509437ddde7b960b334a68d76361c2_1a2c509437ddde7b960b334a68d76361c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_aff574c089d0698fa5b26b3933962fba9_1aff574c089d0698fa5b26b3933962fba9" kindref="member">operator&gt;=</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>&amp;F,<sp/>X<sp/>a)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>&gt;=a;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="autodiff_8libmd_8cc_a056f2b1d61d6ba6e817ed45f05935658_1a056f2b1d61d6ba6e817ed45f05935658" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_adacacd5ab97a9ed5ff4d66f748e49dca_1adacacd5ab97a9ed5ff4d66f748e49dca" kindref="member">operator&lt;</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<sp/>X<sp/>a)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>&lt;a;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="autodiff_8libmd_8cc_ad3231ed0dcd73a0d3ba272e320646923_1ad3231ed0dcd73a0d3ba272e320646923" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_ad98340c551905837f302e32c67998876_1ad98340c551905837f302e32c67998876" kindref="member">operator&gt;</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<sp/>X<sp/>a)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>&gt;a;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="autodiff_8libmd_8cc_aac81abd859ba80c4d3335ff0e6b198fb_1aac81abd859ba80c4d3335ff0e6b198fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_a2ab50ca152117a4e2de0215ce0d463a1_1a2ab50ca152117a4e2de0215ce0d463a1" kindref="member">operator==</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>&amp;F)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a==F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="autodiff_8libmd_8cc_afb27beedd56526f459935e8d4dac0494_1afb27beedd56526f459935e8d4dac0494" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_a32092ec9e3070279926b37dc8c40b876_1a32092ec9e3070279926b37dc8c40b876" kindref="member">operator!=</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>&amp;F)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a!=F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="autodiff_8libmd_8cc_afbec72ee4b7b7885d510a4cae2eacaad_1afbec72ee4b7b7885d510a4cae2eacaad" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_ac2306bb5d57500afce2ba0c55ffbf7a2_1ac2306bb5d57500afce2ba0c55ffbf7a2" kindref="member">operator&lt;=</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>&amp;F)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a&lt;=F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="autodiff_8libmd_8cc_ab19f2d90ffc0cf04dfc2ba1c007be321_1ab19f2d90ffc0cf04dfc2ba1c007be321" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_aff574c089d0698fa5b26b3933962fba9_1aff574c089d0698fa5b26b3933962fba9" kindref="member">operator&gt;=</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>&amp;F)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a&gt;=F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="autodiff_8libmd_8cc_a3bfbfc99b3abb685037fc9cf85a86104_1a3bfbfc99b3abb685037fc9cf85a86104" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_adacacd5ab97a9ed5ff4d66f748e49dca_1adacacd5ab97a9ed5ff4d66f748e49dca" kindref="member">operator&lt;</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a&lt;F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="autodiff_8libmd_8cc_a773f4bac949ffa021ee845c247910607_1a773f4bac949ffa021ee845c247910607" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="autodiff_8libmd_8cc_ad98340c551905837f302e32c67998876_1ad98340c551905837f302e32c67998876" kindref="member">operator&gt;</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a&gt;F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>operations<sp/>with<sp/>other<sp/>duals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="autodiff_8libmd_8cc_adc401fe49f91ae1e919bcbfcc5ede801_1adc401fe49f91ae1e919bcbfcc5ede801" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_adc401fe49f91ae1e919bcbfcc5ede801_1adc401fe49f91ae1e919bcbfcc5ede801" kindref="member">operator-</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(-F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,-F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="autodiff_8libmd_8cc_a5821edaf0916e5953069329d48429263_1a5821edaf0916e5953069329d48429263" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a5821edaf0916e5953069329d48429263_1a5821edaf0916e5953069329d48429263" kindref="member">operator+</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>+G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,<sp/>F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>+G.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="autodiff_8libmd_8cc_ae04397964e1ec8db28ef2900e1d70304_1ae04397964e1ec8db28ef2900e1d70304" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_adc401fe49f91ae1e919bcbfcc5ede801_1adc401fe49f91ae1e919bcbfcc5ede801" kindref="member">operator-</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>-G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,<sp/>F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>-G.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="autodiff_8libmd_8cc_a3dc3382f5a628e69c172a3b45b9d6cfb_1a3dc3382f5a628e69c172a3b45b9d6cfb" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a3dc3382f5a628e69c172a3b45b9d6cfb_1a3dc3382f5a628e69c172a3b45b9d6cfb" kindref="member">operator*</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>*G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>+F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>*G.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="autodiff_8libmd_8cc_acd51ff3854e9a4d5de25869cdba3f356_1acd51ff3854e9a4d5de25869cdba3f356" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_acd51ff3854e9a4d5de25869cdba3f356_1acd51ff3854e9a4d5de25869cdba3f356" kindref="member">operator/</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>/G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,(F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>-F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>*G.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>)/<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,2));</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="autodiff_8libmd_8cc_a860d7035050ddee6f20be6b40644f11f_1a860d7035050ddee6f20be6b40644f11f" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a860d7035050ddee6f20be6b40644f11f_1a860d7035050ddee6f20be6b40644f11f" kindref="member">operator+=</ref>(<ref refid="structdual" kindref="compound">dual</ref>&amp;<sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>+=G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>+=G.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="autodiff_8libmd_8cc_a949cb5795c15a1f83396a26659966670_1a949cb5795c15a1f83396a26659966670" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a949cb5795c15a1f83396a26659966670_1a949cb5795c15a1f83396a26659966670" kindref="member">operator-=</ref>(<ref refid="structdual" kindref="compound">dual</ref>&amp;<sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>-=G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>-=G.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="autodiff_8libmd_8cc_af6b4c9f452afefa1a71dfa597553769a_1af6b4c9f452afefa1a71dfa597553769a" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_af6b4c9f452afefa1a71dfa597553769a_1af6b4c9f452afefa1a71dfa597553769a" kindref="member">operator*=</ref>(<ref refid="structdual" kindref="compound">dual</ref>&amp;<sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F=F*G;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="autodiff_8libmd_8cc_a7c5e5ad8287fb5b42aa3b50b8848d90e_1a7c5e5ad8287fb5b42aa3b50b8848d90e" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a7c5e5ad8287fb5b42aa3b50b8848d90e_1a7c5e5ad8287fb5b42aa3b50b8848d90e" kindref="member">operator/=</ref>(<ref refid="structdual" kindref="compound">dual</ref>&amp;<sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F=F/G;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>operations<sp/>with<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="autodiff_8libmd_8cc_ab60dd5348dc660ac16c98317e39123be_1ab60dd5348dc660ac16c98317e39123be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a5821edaf0916e5953069329d48429263_1a5821edaf0916e5953069329d48429263" kindref="member">operator+</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>+a,F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="autodiff_8libmd_8cc_a3689db54e5ca6fbecc610405b87281a7_1a3689db54e5ca6fbecc610405b87281a7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_adc401fe49f91ae1e919bcbfcc5ede801_1adc401fe49f91ae1e919bcbfcc5ede801" kindref="member">operator-</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>-a,F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="autodiff_8libmd_8cc_acb92d20026c653d6f46cb6456e92bd24_1acb92d20026c653d6f46cb6456e92bd24" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a3dc3382f5a628e69c172a3b45b9d6cfb_1a3dc3382f5a628e69c172a3b45b9d6cfb" kindref="member">operator*</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>*a,F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*a);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="autodiff_8libmd_8cc_a88dc94d8ff594a25ce0a603e6babc9bf_1a88dc94d8ff594a25ce0a603e6babc9bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_acd51ff3854e9a4d5de25869cdba3f356_1acd51ff3854e9a4d5de25869cdba3f356" kindref="member">operator/</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>/a,F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/a);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="autodiff_8libmd_8cc_a97db9b80b50c122505c6b17ba650db84_1a97db9b80b50c122505c6b17ba650db84" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a5821edaf0916e5953069329d48429263_1a5821edaf0916e5953069329d48429263" kindref="member">operator+</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F+a;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="autodiff_8libmd_8cc_aa553f7521149a64b3ecd59c6a07ef645_1aa553f7521149a64b3ecd59c6a07ef645" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_adc401fe49f91ae1e919bcbfcc5ede801_1adc401fe49f91ae1e919bcbfcc5ede801" kindref="member">operator-</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-F)+a;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="autodiff_8libmd_8cc_a955b8d53dff3223fdc94454489d69934_1a955b8d53dff3223fdc94454489d69934" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a3dc3382f5a628e69c172a3b45b9d6cfb_1a3dc3382f5a628e69c172a3b45b9d6cfb" kindref="member">operator*</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F*a;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="autodiff_8libmd_8cc_a62abf4e5f54ba3f1562f9ba092a024d1_1a62abf4e5f54ba3f1562f9ba092a024d1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_acd51ff3854e9a4d5de25869cdba3f356_1acd51ff3854e9a4d5de25869cdba3f356" kindref="member">operator/</ref>(X<sp/>a,<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(a/F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,-a*F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,2));</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="autodiff_8libmd_8cc_a4dea6908739b8fbbf1838cdb48b59007_1a4dea6908739b8fbbf1838cdb48b59007" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a860d7035050ddee6f20be6b40644f11f_1a860d7035050ddee6f20be6b40644f11f" kindref="member">operator+=</ref>(<ref refid="structdual" kindref="compound">dual</ref>&amp;<sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>+=a;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="autodiff_8libmd_8cc_aee16051e1f728da61ffe3675426c98fd_1aee16051e1f728da61ffe3675426c98fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a949cb5795c15a1f83396a26659966670_1a949cb5795c15a1f83396a26659966670" kindref="member">operator-=</ref>(<ref refid="structdual" kindref="compound">dual</ref>&amp;<sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>-=a;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="autodiff_8libmd_8cc_af205152fd981e3fdb332806c633555cb_1af205152fd981e3fdb332806c633555cb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_af6b4c9f452afefa1a71dfa597553769a_1af6b4c9f452afefa1a71dfa597553769a" kindref="member">operator*=</ref>(<ref refid="structdual" kindref="compound">dual</ref>&amp;<sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>*=a;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*=a;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="autodiff_8libmd_8cc_a3e0b0cb2dafd1000769dd938bd85f510_1a3e0b0cb2dafd1000769dd938bd85f510" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a7c5e5ad8287fb5b42aa3b50b8848d90e_1a7c5e5ad8287fb5b42aa3b50b8848d90e" kindref="member">operator/=</ref>(<ref refid="structdual" kindref="compound">dual</ref>&amp;<sp/>F,X<sp/>a)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>/=a;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/=a;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" kindref="member">sqrt</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>sqr=<ref refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" kindref="member">std::sqrt</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(sqr,F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/2.0/sqr);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">pow</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,X<sp/>n)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,n),F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*n*<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,n-1));</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="autodiff_8libmd_8cc_ade909d25ab24d31221b8640c8c6e58c3_1ade909d25ab24d31221b8640c8c6e58c3" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_ade909d25ab24d31221b8640c8c6e58c3_1ade909d25ab24d31221b8640c8c6e58c3" kindref="member">exp</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>ex=<ref refid="autodiff_8libmd_8cc_ade909d25ab24d31221b8640c8c6e58c3_1ade909d25ab24d31221b8640c8c6e58c3" kindref="member">std::exp</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(ex,F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*ex);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="autodiff_8libmd_8cc_ac07173c0c612d7990c7ee36496ee985d_1ac07173c0c612d7990c7ee36496ee985d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>X&gt;<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">pow</ref>(X<sp/>a,<sp/><ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>po=<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(a,G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(po,G.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*<ref refid="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" kindref="member">log</ref>(a)*po);</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="autodiff_8libmd_8cc_aa103edb978eba5b3ce73a507ccdad4a1_1aa103edb978eba5b3ce73a507ccdad4a1" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">pow</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F,<ref refid="structdual" kindref="compound">dual</ref><sp/>G)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>po=<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(po,(G.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*<ref refid="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" kindref="member">log</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>)+F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*G.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>/F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>)*po);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297" refid="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" kindref="member">log</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_a68a9cfddda83ca6a6beb762c7f127839_1a68a9cfddda83ca6a6beb762c7f127839" kindref="member">std::log</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="autodiff_8libmd_8cc_ae7305fd3e8a857970c0c733d86331fcf_1ae7305fd3e8a857970c0c733d86331fcf" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_ae7305fd3e8a857970c0c733d86331fcf_1ae7305fd3e8a857970c0c733d86331fcf" kindref="member">sin</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_ae7305fd3e8a857970c0c733d86331fcf_1ae7305fd3e8a857970c0c733d86331fcf" kindref="member">std::sin</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*<ref refid="autodiff_8libmd_8cc_ad7bdaf61a457836d313298fa3b23aa23_1ad7bdaf61a457836d313298fa3b23aa23" kindref="member">std::cos</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="autodiff_8libmd_8cc_ad7bdaf61a457836d313298fa3b23aa23_1ad7bdaf61a457836d313298fa3b23aa23" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_ad7bdaf61a457836d313298fa3b23aa23_1ad7bdaf61a457836d313298fa3b23aa23" kindref="member">cos</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_ad7bdaf61a457836d313298fa3b23aa23_1ad7bdaf61a457836d313298fa3b23aa23" kindref="member">std::cos</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),-F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*<ref refid="autodiff_8libmd_8cc_ae7305fd3e8a857970c0c733d86331fcf_1ae7305fd3e8a857970c0c733d86331fcf" kindref="member">std::sin</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="autodiff_8libmd_8cc_ad88f26473230730cf0f25ed75da0919a_1ad88f26473230730cf0f25ed75da0919a" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_ad88f26473230730cf0f25ed75da0919a_1ad88f26473230730cf0f25ed75da0919a" kindref="member">tan</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>ta=<ref refid="autodiff_8libmd_8cc_ad88f26473230730cf0f25ed75da0919a_1ad88f26473230730cf0f25ed75da0919a" kindref="member">std::tan</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(ta,F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*(1.0+<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(ta,2)));</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="autodiff_8libmd_8cc_abf47560a37aef7062cf7ac5a337f6648_1abf47560a37aef7062cf7ac5a337f6648" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_abf47560a37aef7062cf7ac5a337f6648_1abf47560a37aef7062cf7ac5a337f6648" kindref="member">sinh</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_abf47560a37aef7062cf7ac5a337f6648_1abf47560a37aef7062cf7ac5a337f6648" kindref="member">std::sinh</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*<ref refid="autodiff_8libmd_8cc_a19401cc2673b8563b7683a7e61bbba8f_1a19401cc2673b8563b7683a7e61bbba8f" kindref="member">std::cosh</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="autodiff_8libmd_8cc_a19401cc2673b8563b7683a7e61bbba8f_1a19401cc2673b8563b7683a7e61bbba8f" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a19401cc2673b8563b7683a7e61bbba8f_1a19401cc2673b8563b7683a7e61bbba8f" kindref="member">cosh</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_a19401cc2673b8563b7683a7e61bbba8f_1a19401cc2673b8563b7683a7e61bbba8f" kindref="member">std::cosh</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*<ref refid="autodiff_8libmd_8cc_abf47560a37aef7062cf7ac5a337f6648_1abf47560a37aef7062cf7ac5a337f6648" kindref="member">std::sinh</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="autodiff_8libmd_8cc_abbd200edacd1697a6bb86ddcbe9d6f02_1abbd200edacd1697a6bb86ddcbe9d6f02" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_abbd200edacd1697a6bb86ddcbe9d6f02_1abbd200edacd1697a6bb86ddcbe9d6f02" kindref="member">tanh</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="libmd_8h_a9b1cd8bf0a06d4a62c19f7953a3487ea_1a9b1cd8bf0a06d4a62c19f7953a3487ea" kindref="member">ldf</ref><sp/>ta=<ref refid="autodiff_8libmd_8cc_abbd200edacd1697a6bb86ddcbe9d6f02_1abbd200edacd1697a6bb86ddcbe9d6f02" kindref="member">std::tanh</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(ta,F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>*(1.0-<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(ta,2)));</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="autodiff_8libmd_8cc_a73c9bf3c995cc3c4d03cf482e336dbc9_1a73c9bf3c995cc3c4d03cf482e336dbc9" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a73c9bf3c995cc3c4d03cf482e336dbc9_1a73c9bf3c995cc3c4d03cf482e336dbc9" kindref="member">asin</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_a73c9bf3c995cc3c4d03cf482e336dbc9_1a73c9bf3c995cc3c4d03cf482e336dbc9" kindref="member">std::asin</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/<ref refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" kindref="member">std::sqrt</ref>(1.0-<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,2)));</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="autodiff_8libmd_8cc_a040c41bf3dc05dcba9979d734c21baee_1a040c41bf3dc05dcba9979d734c21baee" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a040c41bf3dc05dcba9979d734c21baee_1a040c41bf3dc05dcba9979d734c21baee" kindref="member">acos</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_a040c41bf3dc05dcba9979d734c21baee_1a040c41bf3dc05dcba9979d734c21baee" kindref="member">std::acos</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),-F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/<ref refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" kindref="member">std::sqrt</ref>(1.0-<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,2)));</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="autodiff_8libmd_8cc_a26549f48667589d8f719aa26f45b8e36_1a26549f48667589d8f719aa26f45b8e36" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a26549f48667589d8f719aa26f45b8e36_1a26549f48667589d8f719aa26f45b8e36" kindref="member">atan</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_a26549f48667589d8f719aa26f45b8e36_1a26549f48667589d8f719aa26f45b8e36" kindref="member">std::atan</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/(<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,2)+1.0));</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="autodiff_8libmd_8cc_a76dcf65fff0eeed8ad43914e47357784_1a76dcf65fff0eeed8ad43914e47357784" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a76dcf65fff0eeed8ad43914e47357784_1a76dcf65fff0eeed8ad43914e47357784" kindref="member">asinh</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_a76dcf65fff0eeed8ad43914e47357784_1a76dcf65fff0eeed8ad43914e47357784" kindref="member">std::asinh</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/<ref refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" kindref="member">std::sqrt</ref>(1.0+<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,2)));</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="autodiff_8libmd_8cc_af721ea82ca3508a32aa07785eda160db_1af721ea82ca3508a32aa07785eda160db" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_af721ea82ca3508a32aa07785eda160db_1af721ea82ca3508a32aa07785eda160db" kindref="member">acosh</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_af721ea82ca3508a32aa07785eda160db_1af721ea82ca3508a32aa07785eda160db" kindref="member">std::acosh</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),-F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/<ref refid="autodiff_8libmd_8cc_af33bda4d5a7fc8ad1679ec339a730045_1af33bda4d5a7fc8ad1679ec339a730045" kindref="member">std::sqrt</ref>(<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,2)-1.0));</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="autodiff_8libmd_8cc_ac6f307e61a8625bec9924605d5c05593_1ac6f307e61a8625bec9924605d5c05593" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_ac6f307e61a8625bec9924605d5c05593_1ac6f307e61a8625bec9924605d5c05593" kindref="member">atanh</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(<ref refid="autodiff_8libmd_8cc_ac6f307e61a8625bec9924605d5c05593_1ac6f307e61a8625bec9924605d5c05593" kindref="member">std::atanh</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>),F.<ref refid="structdual_a000e8c6647ee004a21e2b6fc8a30902e_1a000e8c6647ee004a21e2b6fc8a30902e" kindref="member">dx</ref>/(1.0-<ref refid="autodiff_8libmd_8cc_a4fd9e414f0c7ab2098dcea6c6de318d9_1a4fd9e414f0c7ab2098dcea6c6de318d9" kindref="member">std::pow</ref>(F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>,2)));</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_aef1f4db2bbc91c997fdc24226ea63d52_1aef1f4db2bbc91c997fdc24226ea63d52" kindref="member">abs</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>F.<ref refid="structdual_a28c907d8aa4244c99f26d64e27e702dd_1a28c907d8aa4244c99f26d64e27e702dd" kindref="member">x</ref>&lt;0.0?-F:F;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="autodiff_8libmd_8cc_a1d639d8dee10f02c2e6c9fcf6b42b2ae_1a1d639d8dee10f02c2e6c9fcf6b42b2ae" refkind="member"><highlight class="normal"><ref refid="structdual" kindref="compound">dual</ref><sp/><ref refid="autodiff_8libmd_8cc_a1d639d8dee10f02c2e6c9fcf6b42b2ae_1a1d639d8dee10f02c2e6c9fcf6b42b2ae" kindref="member">heaviside</ref>(<ref refid="structdual" kindref="compound">dual</ref><sp/>F)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structdual" kindref="compound">dual</ref>(F.x&lt;0.0?0.0:1.0,<sp/>F.x==0.0?std::numeric_limits&lt;ldf&gt;::infinity():0.0);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="libmd-src/autodiff.libmd.cc"/>
  </compounddef>
</doxygen>
