<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="interactions_8md" kind="file" language="Markdown">
    <compoundname>interactions.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">Interactions</highlight></codeline>
<codeline><highlight class="normal">============</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Interactions<sp/>in<sp/>libmd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{#md-interactions}</highlight></codeline>
<codeline><highlight class="normal">=====================</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Interactions<sp/>are<sp/>of<sp/>two<sp/>types:<sp/>pair<sp/>potentials<sp/>and<sp/>forcetypes.<sp/>In<sp/>molecular</highlight></codeline>
<codeline><highlight class="normal">dynamics,<sp/>the<sp/>&lt;em&gt;forces&lt;/em&gt;<sp/>on<sp/>each<sp/>particle<sp/>are<sp/>computed<sp/>at<sp/>each<sp/>time<sp/>step</highlight></codeline>
<codeline><highlight class="normal">as<sp/>a<sp/>function<sp/>of<sp/>neighbouring<sp/>particles,<sp/>external<sp/>constraints,<sp/>etc.<sp/>Pair</highlight></codeline>
<codeline><highlight class="normal">porentials<sp/>are<sp/>a<sp/>concise<sp/>way<sp/>of<sp/>defining<sp/>central<sp/>forces<sp/>that<sp/>can<sp/>be<sp/>written<sp/>as</highlight></codeline>
<codeline><highlight class="normal">a<sp/>gradient<sp/>of<sp/>a<sp/>potential<sp/>energy,<sp/>whereas<sp/>forcetypes<sp/>encompass<sp/>all<sp/>other</highlight></codeline>
<codeline><highlight class="normal">possibilities.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Conservative<sp/>forces<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{#md-pairpotentials}</highlight></codeline>
<codeline><highlight class="normal">-------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Molecular<sp/>dynamics<sp/>simulations<sp/>often<sp/>include<sp/>conservative<sp/>forces<sp/>between</highlight></codeline>
<codeline><highlight class="normal">pairs<sp/>of<sp/>particles,<sp/>which<sp/>depend<sp/>only<sp/>on<sp/>the<sp/>distance<sp/>between<sp/>the<sp/>two<sp/>particles</highlight></codeline>
<codeline><highlight class="normal">and<sp/>act<sp/>along<sp/>the<sp/>vector<sp/>joining<sp/>them.<sp/>They<sp/>can<sp/>be<sp/>written<sp/>as<sp/>the<sp/>gradient<sp/>of</highlight></codeline>
<codeline><highlight class="normal">a<sp/>potential<sp/>energy<sp/>\f$V(r)\f$<sp/>that<sp/>depends<sp/>on<sp/>the<sp/>separation<sp/>distance.<sp/>If<sp/>\f$\mathbf{r}_i\f$<sp/>and</highlight></codeline>
<codeline><highlight class="normal">\f$\mathbf{r}_j\f$<sp/>are<sp/>the<sp/>position<sp/>vectors<sp/>of<sp/>two<sp/>particles,<sp/>then<sp/>the</highlight></codeline>
<codeline><highlight class="normal">pairwise<sp/>central<sp/>forces<sp/>on<sp/>each<sp/>particle<sp/>are</highlight></codeline>
<codeline><highlight class="normal">\f[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>\mathbf{F}_i<sp/>=<sp/>-\nabla_{\mathbf{r}_i}<sp/>V(|\mathbf{r}_i-\mathbf{r}_j|)<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-\mathbf{F}_j</highlight></codeline>
<codeline><highlight class="normal">\f]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\c<sp/>libmd<sp/>uses<sp/>the<sp/>framework<sp/>of<sp/>&lt;em&gt;particle<sp/>types&lt;/em&gt;<sp/>to<sp/>define<sp/>pairwise</highlight></codeline>
<codeline><highlight class="normal">interactions.<sp/>Every<sp/>\ref<sp/>particle<sp/>instance<sp/>has<sp/>an<sp/>associated<sp/>\c<sp/>type,<sp/>an<sp/>&lt;tt&gt;unsigned</highlight></codeline>
<codeline><highlight class="normal">int&lt;/tt&gt;<sp/>stored<sp/>in<sp/>the<sp/>\c<sp/>particle.type<sp/>variable.<sp/>Interactions<sp/>are<sp/>defined</highlight></codeline>
<codeline><highlight class="normal">between<sp/>pairs<sp/>of<sp/>particle<sp/>types.<sp/>For<sp/>instance,<sp/>a<sp/>system<sp/>of<sp/>identical<sp/>particles</highlight></codeline>
<codeline><highlight class="normal">interacting<sp/>via<sp/>a<sp/>Yukawa<sp/>potential<sp/>can<sp/>be<sp/>set<sp/>up<sp/>by<sp/>assigning<sp/>the<sp/>same</highlight></codeline>
<codeline><highlight class="normal">particle<sp/>type,<sp/>say<sp/>\c<sp/>0,<sp/>to<sp/>all<sp/>particles<sp/>in<sp/>the<sp/>system,<sp/>and<sp/>defining<sp/>a</highlight></codeline>
<codeline><highlight class="normal">Yukawa-type<sp/>interaction<sp/>between<sp/>the<sp/>pair<sp/>of<sp/>particle<sp/>types<sp/>&lt;tt&gt;(0,0)&lt;/tt&gt;.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>particle<sp/>type<sp/>is<sp/>set<sp/>while<sp/>creating<sp/>a<sp/>\ref<sp/>particle<sp/>instance<sp/>via<sp/>the<sp/>\c</highlight></codeline>
<codeline><highlight class="normal">ptype<sp/>argument<sp/>of<sp/>the<sp/>particle&lt;dim&gt;::particle<sp/>constructor,<sp/>and<sp/>can<sp/>be<sp/>updated</highlight></codeline>
<codeline><highlight class="normal">by<sp/>calling<sp/>the<sp/>md&lt;dim&gt;::set_type(ui<sp/>p,<sp/>ui<sp/>newtype)<sp/>function.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Defining<sp/>a<sp/>pairwise<sp/>interaction<sp/>between<sp/>two<sp/>particle<sp/>types<sp/>requires<sp/>making<sp/>a</highlight></codeline>
<codeline><highlight class="normal">distinction<sp/>between<sp/>&lt;em&gt;pair<sp/>potentials&lt;/em&gt;<sp/>and<sp/>&lt;em&gt;interactions&lt;/em&gt;:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>A<sp/>&lt;em&gt;pair<sp/>potential&lt;/em&gt;<sp/>is<sp/>the<sp/>definition<sp/>of<sp/>a<sp/>potential<sp/>function</highlight></codeline>
<codeline><highlight class="normal">\f$V(r)\f$<sp/>that<sp/>may<sp/>depend<sp/>on<sp/>some<sp/>parameters<sp/>in<sp/>addition<sp/>to<sp/>the<sp/>particle</highlight></codeline>
<codeline><highlight class="normal">separation<sp/>\f$r\f$.<sp/>The<sp/>md&lt;dim&gt;::v<sp/>structure<sp/>stores<sp/>information<sp/>about<sp/>pair</highlight></codeline>
<codeline><highlight class="normal">potentials<sp/>in<sp/>the<sp/>simulation.<sp/>See<sp/>the<sp/>subsection<sp/>on<sp/>[pair</highlight></codeline>
<codeline><highlight class="normal">potentials](#md-pairpotentialdef)<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>An<sp/>&lt;em&gt;interaction&lt;/em&gt;<sp/>is<sp/>a<sp/>combination<sp/>of<sp/>a<sp/>pair<sp/>potential<sp/>and<sp/>a<sp/>specific</highlight></codeline>
<codeline><highlight class="normal">set<sp/>of<sp/>parameters.<sp/>The<sp/>md&lt;dim&gt;::network<sp/>structure<sp/>stores<sp/>information</highlight></codeline>
<codeline><highlight class="normal">about<sp/>the<sp/>interactions<sp/>deriving<sp/>from<sp/>pair<sp/>potentials<sp/>in<sp/>the<sp/>system.<sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal">subsection<sp/>on<sp/>[interactions](#md-interactiondef)<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Pair<sp/>potentials<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{#md-pairpotentialdef}</highlight></codeline>
<codeline><highlight class="normal">Pair<sp/>potential<sp/>functions<sp/>are<sp/>defined<sp/>outside<sp/>the<sp/>\c<sp/>md&lt;dim&gt;()<sp/>structure,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">added<sp/>to<sp/>the<sp/>simulation<sp/>using<sp/>function<sp/>pointers.<sp/>A<sp/>pair<sp/>potential<sp/>function<sp/>takes<sp/>two</highlight></codeline>
<codeline><highlight class="normal">arguments:<sp/>the<sp/>separation<sp/>distance<sp/>\c<sp/>r<sp/>and<sp/>a<sp/>pointer<sp/>&lt;tt&gt;vector&lt;ldf&gt;</highlight></codeline>
<codeline><highlight class="normal">&amp;params&lt;/tt&gt;<sp/>to<sp/>a<sp/>vector<sp/>of<sp/>&lt;tt&gt;float&lt;/tt&gt;s<sp/>that<sp/>contains<sp/>the<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal">needed<sp/>to<sp/>compute<sp/>the<sp/>interaction,<sp/>and<sp/>returns<sp/>the<sp/>potential<sp/>energy.</highlight></codeline>
<codeline><highlight class="normal">\c<sp/>libmd<sp/>uses<sp/>[automatic<sp/>differentiation](http://en.wikipedia.org/wiki/Automatic_differentiation)</highlight></codeline>
<codeline><highlight class="normal">implemented<sp/>in<sp/>autodiff.libmd.cc<sp/>to<sp/>calculate<sp/>the<sp/>forces<sp/>from<sp/>the<sp/>potential</highlight></codeline>
<codeline><highlight class="normal">definition.<sp/>This<sp/>mandates<sp/>that<sp/>the<sp/>potential<sp/>function<sp/>be<sp/>defined<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal">first<sp/>argument<sp/>(the<sp/>distance<sp/>\c<sp/>r)<sp/>and<sp/>the<sp/>return<sp/>value<sp/>having<sp/>a<sp/>templated<sp/>type:</highlight></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;class<sp/>X&gt;<sp/>X<sp/>my_potential(X<sp/>r,vector&lt;ldf&gt;<sp/>&amp;parameters)<sp/>{...}</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
<codeline><highlight class="normal">However,<sp/>the<sp/>function<sp/>itself<sp/>can<sp/>be<sp/>written<sp/>by<sp/>treating<sp/><sp/>\c<sp/>r<sp/>and<sp/>the<sp/>return</highlight></codeline>
<codeline><highlight class="normal">value<sp/>as<sp/>\c<sp/>ldf<sp/>variables.<sp/>See<sp/><sp/>potentials.libmd.cc<sp/>for<sp/>example<sp/>definitions<sp/>of<sp/>potential<sp/>functions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Once<sp/>the<sp/>potential<sp/>function<sp/>has<sp/>been<sp/>defined,<sp/>a<sp/>function<sp/>pointer<sp/>pointing<sp/>to</highlight></codeline>
<codeline><highlight class="normal">it<sp/>is<sp/>added<sp/>to<sp/>the<sp/>list<sp/>of<sp/>potential<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">&lt;tt&gt;md&lt;dim&gt;::v.potentials&lt;/tt&gt;<sp/>through<sp/>a<sp/>call<sp/>to<sp/>the<sp/>pairpotentials::add()</highlight></codeline>
<codeline><highlight class="normal">member<sp/>function<sp/>of<sp/>md&lt;dim&gt;::v.<sp/>Each<sp/>added<sp/>potential<sp/>is<sp/>given<sp/>a<sp/>unique<sp/>index,</highlight></codeline>
<codeline><highlight class="normal">which<sp/>is<sp/>the<sp/>return<sp/>value<sp/>of<sp/>&lt;tt&gt;md&lt;dim&gt;::v.add()&lt;/tt&gt;.</highlight></codeline>
<codeline><highlight class="normal">The</highlight></codeline>
<codeline><highlight class="normal">following<sp/>command<sp/>adds<sp/>the<sp/>potential<sp/>function<sp/>\c<sp/>my_potential()<sp/>defined</highlight></codeline>
<codeline><highlight class="normal">above<sp/>to<sp/>an<sp/>&lt;tt&gt;md\&lt;dim\&gt;&lt;/tt&gt;<sp/>instance<sp/>named<sp/>\c<sp/>sys,<sp/>and<sp/>stores<sp/>the</highlight></codeline>
<codeline><highlight class="normal">associated<sp/>index<sp/>in<sp/>\c<sp/>pidx:</highlight></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>md&lt;dim&gt;<sp/>sys;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ui<sp/>pidx<sp/>=<sp/>sys.v.add(my_potential&lt;dual&gt;);</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
<codeline><highlight class="normal">(The<sp/>&lt;tt&gt;\&lt;dual\&gt;&lt;/tt&gt;<sp/>template<sp/>argument<sp/>is<sp/>needed<sp/>for<sp/>the<sp/>automatic</highlight></codeline>
<codeline><highlight class="normal">differentiation<sp/>system.)<sp/>This<sp/>index<sp/>is</highlight></codeline>
<codeline><highlight class="normal">then<sp/>used<sp/>to<sp/>define<sp/>interactions<sp/>between<sp/>pairs<sp/>of<sp/>particle<sp/>types<sp/>through</highlight></codeline>
<codeline><highlight class="normal">calls<sp/>to<sp/>md&lt;dim&gt;::add_interaction<sp/>and<sp/>md&lt;dim&gt;::add_typeinteraction<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">catalogued<sp/>in<sp/>the<sp/>subsection<sp/>on<sp/>[interactions](#md-interactiondef).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Predefined<sp/>pair<sp/>potentials</highlight></codeline>
<codeline><highlight class="normal">\c<sp/>libmd<sp/>comes<sp/>with<sp/>some<sp/>predefined<sp/>pair<sp/>potentials<sp/>that<sp/>can<sp/>be<sp/>combined<sp/>with</highlight></codeline>
<codeline><highlight class="normal">any<sp/>choices<sp/>of<sp/>parameters<sp/>to<sp/>easily<sp/>define<sp/>interactions<sp/>between<sp/>particle<sp/>types.</highlight></codeline>
<codeline><highlight class="normal">A<sp/>complete<sp/>listing<sp/>is<sp/>available<sp/>in<sp/>the<sp/>documentation<sp/>for<sp/>the<sp/>potentials.libmd.cc</highlight></codeline>
<codeline><highlight class="normal">file.<sp/>The<sp/>potentials<sp/>are<sp/>pre-loaded<sp/>into<sp/>the<sp/>&lt;tt&gt;md&lt;dim&gt;::v.potentials&lt;/tt&gt;</highlight></codeline>
<codeline><highlight class="normal">list<sp/>of<sp/>every<sp/>\ref<sp/>md<sp/>instance,<sp/>and<sp/>are<sp/>to<sp/>be<sp/>referenced<sp/>by<sp/>their<sp/>positions<sp/>in<sp/>this<sp/>list.<sp/>For<sp/>ease<sp/>of</highlight></codeline>
<codeline><highlight class="normal">indexing,<sp/>a<sp/>global<sp/>enum<sp/>structure<sp/>#POT<sp/>has<sp/>been<sp/>defined,<sp/>with</highlight></codeline>
<codeline><highlight class="normal">&lt;tt&gt;POT::\&lt;potential<sp/>name\&gt;&lt;/tt&gt;<sp/>providing<sp/>the<sp/>appropriate<sp/>pair<sp/>potential</highlight></codeline>
<codeline><highlight class="normal">index.<sp/>For<sp/>instance,<sp/>#POT::COULOMB<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>predefined<sp/>COULOMB()</highlight></codeline>
<codeline><highlight class="normal">potential.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Interactions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{#md-interactiondef}</highlight></codeline>
<codeline><highlight class="normal">Once<sp/>a<sp/>potential<sp/>has<sp/>been<sp/>added<sp/>to<sp/>the<sp/>\ref<sp/>md<sp/>instance,<sp/>it<sp/>can<sp/>be<sp/>combined</highlight></codeline>
<codeline><highlight class="normal">with<sp/>specific<sp/>values<sp/>of<sp/>parameters<sp/>to<sp/>create<sp/>distinct<sp/>\a<sp/>interactions,<sp/>which</highlight></codeline>
<codeline><highlight class="normal">are<sp/>instances<sp/>of<sp/>the<sp/>\ref<sp/>interactiontype<sp/>structure.<sp/>Each</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>md<sp/>instance<sp/>has<sp/>a<sp/>library<sp/>of<sp/>interactions,<sp/>stored<sp/>in</highlight></codeline>
<codeline><highlight class="normal">&lt;tt&gt;md&lt;dim&gt;::network.library[]&lt;/tt&gt;<sp/>which<sp/>is<sp/>a<sp/>vector<sp/>of<sp/>\ref<sp/>interactiontype</highlight></codeline>
<codeline><highlight class="normal">instances.<sp/>Different<sp/>interactions<sp/>are<sp/>indexed<sp/>by<sp/>their<sp/>position<sp/>in<sp/>this<sp/>vector.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Entries<sp/>in<sp/>the<sp/>interaction<sp/>library<sp/>are<sp/>added,<sp/>modified<sp/>and<sp/>removed<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">following<sp/>set<sp/>of<sp/>functions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_interaction(ui<sp/>pidx,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)<sp/>creates<sp/>an</highlight></codeline>
<codeline><highlight class="normal">interaction<sp/>from<sp/>the<sp/>pair<sp/>potential<sp/>indexed<sp/>by<sp/>\c<sp/>pidx<sp/>with<sp/>the<sp/>given</highlight></codeline>
<codeline><highlight class="normal">parameters.<sp/>The<sp/>return<sp/>value<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>interaction<sp/>in</highlight></codeline>
<codeline><highlight class="normal">&lt;tt&gt;md&lt;dim&gt;::network.library[]&lt;/tt&gt;,<sp/>which<sp/>we<sp/>will<sp/>call<sp/>\c<sp/>iidx.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mod_interaction(ui<sp/>iidx,<sp/>ui<sp/>pidx,vector&lt;ldf&gt;<sp/>&amp;parameters)<sp/>replaces</highlight></codeline>
<codeline><highlight class="normal">the<sp/>potential<sp/>function<sp/>and<sp/>parameters<sp/>of<sp/>the<sp/>interaction<sp/>indexed<sp/>by<sp/>\c<sp/>iidx.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::rem_interaction(ui<sp/>iidx)<sp/>removes<sp/>the<sp/>interaction<sp/>indexed<sp/>by</highlight></codeline>
<codeline><highlight class="normal">\c<sp/>iidx.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>set<sp/>of<sp/>functions<sp/>assigns<sp/>a<sp/>particular<sp/>interaction<sp/>indexed<sp/>by<sp/>\c</highlight></codeline>
<codeline><highlight class="normal">iidx<sp/>to<sp/>act<sp/>between<sp/>particles<sp/>of<sp/>types<sp/>\c<sp/>type1<sp/>and<sp/>\c<sp/>type2:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_typeinteraction(ui<sp/>type1,<sp/>ui<sp/>type2,<sp/>ui<sp/>iidx)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mod_typeinteraction(ui<sp/>type1,<sp/>ui<sp/>type2,<sp/>ui<sp/>iidx)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mad_typeinteraction(ui<sp/>type1,<sp/>ui<sp/>type2,<sp/>ui<sp/>iidx)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>functions<sp/>differ<sp/>in<sp/>their<sp/>behaviour<sp/>when<sp/>an<sp/>interaction<sp/>between<sp/>the<sp/>pair</highlight></codeline>
<codeline><highlight class="normal">of<sp/>types<sp/>has<sp/>or<sp/>has<sp/>not<sp/>been<sp/>defined.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There<sp/>is<sp/>also<sp/>a<sp/>set<sp/>of<sp/>functions<sp/>which<sp/>allows<sp/>the<sp/>creation<sp/>of<sp/>an<sp/>interaction<sp/>and</highlight></codeline>
<codeline><highlight class="normal">its<sp/>assignment<sp/>to<sp/>act<sp/>between<sp/>particle<sp/>types<sp/>\c<sp/>type1<sp/>and<sp/>\c<sp/>type2<sp/>in<sp/>a<sp/>single</highlight></codeline>
<codeline><highlight class="normal">command:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_typeinteraction(ui<sp/>type1,<sp/>ui<sp/>type2,<sp/>ui<sp/>pidx,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mod_typeinteraction(ui<sp/>type1,<sp/>ui<sp/>type2,<sp/>ui<sp/>pidx,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mad_typeinteraction(ui<sp/>type1,<sp/>ui<sp/>type2,<sp/>ui<sp/>pidx,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>code<sp/>snippets<sp/>are<sp/>therefore<sp/>equivalent:</highlight></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Uses<sp/>predefined<sp/>Hookean<sp/>spring<sp/>potential,<sp/>indexed<sp/>by<sp/>POT::HOOKEAN<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ldf&gt;<sp/>params<sp/>=<sp/>{1.0,2.0};<sp/><sp/><sp/><sp/><sp/>//<sp/>Vector<sp/>of<sp/>two<sp/>parameters<sp/>for<sp/>a<sp/>Hookean<sp/>spring</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>(spring<sp/>constant<sp/>and<sp/>rest<sp/>length)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ui<sp/>onespring<sp/>=<sp/>md&lt;dim&gt;::add_interaction(POT::HOOKEAN,<sp/>&amp;params);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>Hookean<sp/>interaction<sp/>with<sp/>the<sp/>given<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>and<sp/>store<sp/>its<sp/>index<sp/>in<sp/>onespring</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>md&lt;dim&gt;::add_typeinteraction(2,8,onespring);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>the<sp/>interaction<sp/>indexed<sp/>by<sp/>onespring<sp/>between</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>particle<sp/>types<sp/>2<sp/>and<sp/>8</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Uses<sp/>predefined<sp/>Hookean<sp/>spring<sp/>potential,<sp/>indexed<sp/>by<sp/>POT::HOOKEAN<sp/><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;ldf&gt;<sp/>params<sp/>=<sp/>{1.0,2.0};<sp/><sp/><sp/><sp/><sp/>//<sp/>Vector<sp/>of<sp/>two<sp/>parameters<sp/>for<sp/>a<sp/>Hookean<sp/>spring</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>(spring<sp/>constant<sp/>and<sp/>rest<sp/>length)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>md&lt;dim&gt;::add_typeinteraction(2,8,POT::HOOKEAN,&amp;params);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>a<sp/>Hookean<sp/>interaction<sp/>between<sp/>particles<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>type<sp/>2<sp/>and<sp/>type<sp/>8<sp/>with<sp/>defined<sp/>params</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Cutoff<sp/>radius</highlight></codeline>
<codeline><highlight class="normal">An<sp/>important<sp/>parameter<sp/>in<sp/>limiting<sp/>unnecessary<sp/>computations<sp/>of<sp/><sp/>pair<sp/>potentials</highlight></codeline>
<codeline><highlight class="normal">is<sp/>the<sp/>*cutoff<sp/>radius*,<sp/>a<sp/>value<sp/>of<sp/>the<sp/>particle<sp/>separation<sp/>beyond<sp/>which<sp/>the</highlight></codeline>
<codeline><highlight class="normal">pair<sp/>potential<sp/>and<sp/>resultant<sp/>force<sp/>are<sp/>assumed<sp/>to<sp/>be<sp/>zero.<sp/>Each<sp/>interaction</highlight></codeline>
<codeline><highlight class="normal">(i.e.<sp/>each<sp/>\ref<sp/>interactiontype<sp/>instance<sp/>in<sp/>\c<sp/>md&lt;dim&gt;::network.library[])<sp/>has</highlight></codeline>
<codeline><highlight class="normal">a<sp/>unique<sp/>cutoff<sp/>radius<sp/>stored<sp/>in<sp/>the<sp/>\c<sp/>rco<sp/>member<sp/>variable.<sp/>By<sp/>default,<sp/>this</highlight></codeline>
<codeline><highlight class="normal">is<sp/>set<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>value<sp/>of<sp/>\c<sp/>md&lt;dim&gt;::network.rco,<sp/>which<sp/>is<sp/>the<sp/>case</highlight></codeline>
<codeline><highlight class="normal">for<sp/>the<sp/>examples<sp/>listed<sp/>above.<sp/>However,<sp/>every</highlight></codeline>
<codeline><highlight class="normal">function<sp/>that<sp/>creates<sp/>a<sp/>new<sp/>interaction<sp/>also<sp/>has<sp/>a<sp/>version<sp/>in<sp/>which<sp/>the<sp/>cutoff</highlight></codeline>
<codeline><highlight class="normal">radius<sp/>can<sp/>be<sp/>explicitly<sp/>specified<sp/>as<sp/>an<sp/>additional<sp/>parameter,<sp/>as<sp/>follows:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_interaction(ui<sp/>pidx,<sp/>ldf<sp/>rco,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mod_interaction(ui<sp/>iidx,<sp/>ui<sp/>pidx,<sp/>ldf<sp/>rco,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_typeinteraction(ui<sp/>type1,<sp/>ui<sp/>type2,<sp/>ui<sp/>pidx,<sp/>ldf<sp/>rco,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mod_typeinteraction(ui<sp/>type1,<sp/>ui<sp/>type2,<sp/>ui<sp/>pidx,<sp/>ldf<sp/>rco,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mad_typeinteraction(ui<sp/>type1,<sp/>ui<sp/>type2,<sp/>ui<sp/>pidx,<sp/>ldf<sp/>rco,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Bonds</highlight></codeline>
<codeline><highlight class="normal">A<sp/>bond<sp/>is<sp/>a<sp/>pair<sp/>interaction<sp/>specific<sp/>to<sp/>two<sp/>particles.<sp/>If<sp/>two<sp/>particles<sp/>share</highlight></codeline>
<codeline><highlight class="normal">a<sp/>bond,<sp/>each<sp/>has<sp/>a<sp/>unique<sp/>particle<sp/>type<sp/>that<sp/>is<sp/>not<sp/>shared<sp/>with<sp/>any</highlight></codeline>
<codeline><highlight class="normal">other<sp/>particle<sp/>in<sp/>the<sp/>system.<sp/>As<sp/>a<sp/>result,<sp/>the<sp/>particles<sp/>could<sp/>have<sp/>a<sp/>unique</highlight></codeline>
<codeline><highlight class="normal">interaction<sp/>that<sp/>is<sp/>not<sp/>shared<sp/>by<sp/>any<sp/>other<sp/>pair<sp/>of<sp/>particles<sp/>in<sp/>the<sp/>system.</highlight></codeline>
<codeline><highlight class="normal">(This<sp/>is<sp/>however<sp/>not<sp/>a<sp/>requirement<sp/>--<sp/>a<sp/>bond<sp/>could<sp/>be<sp/>created<sp/>between</highlight></codeline>
<codeline><highlight class="normal">particles<sp/>with<sp/>an<sp/>interaction<sp/>type<sp/>that<sp/>is<sp/>also<sp/>present<sp/>between<sp/>other<sp/>particle</highlight></codeline>
<codeline><highlight class="normal">types.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Bonds<sp/>provide<sp/>a<sp/>framework<sp/>to<sp/>assign<sp/>specific<sp/>interactions<sp/>to<sp/>pairs<sp/>of</highlight></codeline>
<codeline><highlight class="normal">particles<sp/>based<sp/>on<sp/>the<sp/>particle<sp/>ID<sp/>rather<sp/>than<sp/>the<sp/>particle<sp/>type.<sp/>For</highlight></codeline>
<codeline><highlight class="normal">instance,<sp/>a<sp/>disordered<sp/>spring<sp/>network<sp/>with<sp/>every<sp/>spring<sp/>having<sp/>a<sp/>unique<sp/>bond</highlight></codeline>
<codeline><highlight class="normal">length<sp/>or<sp/>spring<sp/>constant<sp/>can<sp/>be<sp/>implemented<sp/>by<sp/>adding<sp/>bonds<sp/>among<sp/>connected</highlight></codeline>
<codeline><highlight class="normal">particles,<sp/>each<sp/>of<sp/>which<sp/>is<sp/>a<sp/>Hookean<sp/>interaction<sp/>with<sp/>the<sp/>appropriate</highlight></codeline>
<codeline><highlight class="normal">parameters.<sp/>Many<sp/>functions<sp/>exist<sp/>to<sp/>automate<sp/>the<sp/>task<sp/>of<sp/>adding,<sp/>removing,<sp/>or</highlight></codeline>
<codeline><highlight class="normal">modifying<sp/>bonds<sp/>between<sp/>pairs<sp/>of<sp/>particles<sp/>without<sp/>the<sp/>user<sp/>having<sp/>to<sp/>keep</highlight></codeline>
<codeline><highlight class="normal">track<sp/>of<sp/>particle<sp/>type<sp/>assignments.<sp/>These<sp/>are<sp/>summarized<sp/>here.<sp/>All<sp/>such</highlight></codeline>
<codeline><highlight class="normal">functions<sp/>take<sp/>two<sp/>particle<sp/>indices<sp/>as<sp/>their<sp/>first<sp/>two<sp/>arguments.<sp/>The<sp/>order<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>particle<sp/>indices<sp/>is<sp/>unimportant.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Functions<sp/>to<sp/>create/modify<sp/>bonds<sp/>fall<sp/>into<sp/>two<sp/>classes.<sp/>The<sp/>first<sp/>class</highlight></codeline>
<codeline><highlight class="normal">assigns<sp/>a<sp/>predefined<sp/>interaction<sp/>type,<sp/>referenced<sp/>by<sp/>its<sp/>index<sp/>\c<sp/>iidx<sp/>in</highlight></codeline>
<codeline><highlight class="normal">&lt;tt&gt;md&lt;dim&gt;::network.library[]&lt;/tt&gt;,<sp/>to<sp/>the<sp/>particle<sp/>pair:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_bond(ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>iidx)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mod_bond(ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>iidx)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mad_bond(ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>iidx)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>second<sp/>class<sp/>creates<sp/>a<sp/>new<sp/>interaction<sp/>from<sp/>a<sp/>specified<sp/>potential<sp/>type</highlight></codeline>
<codeline><highlight class="normal">(referenced<sp/>by<sp/>its<sp/>index<sp/>\c<sp/>pidx<sp/>in<sp/>&lt;tt&gt;md&lt;dim&gt;::v.potentials[]&lt;/tt&gt;)</highlight></codeline>
<codeline><highlight class="normal">and<sp/>a<sp/>parameter<sp/>list,<sp/>and<sp/>assigns<sp/>this<sp/>newly<sp/>created<sp/>interaction<sp/>type<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">pair<sp/>of<sp/>particles:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_bond(ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>pidx,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mod_bond(ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>pidx,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mad_bond(ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>pidx,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>function<sp/>md&lt;dim&gt;::rem_bond<sp/>removes<sp/>any<sp/>interaction</highlight></codeline>
<codeline><highlight class="normal">(including<sp/>a<sp/>pair<sp/>interaction<sp/>of<sp/>non-bond<sp/>type)<sp/>between<sp/>a<sp/>specified<sp/>pair<sp/>of</highlight></codeline>
<codeline><highlight class="normal">particles.<sp/>A<sp/>special<sp/>convenience<sp/>function<sp/>md&lt;dim&gt;::add_spring<sp/>enables<sp/>easy</highlight></codeline>
<codeline><highlight class="normal">creation<sp/>of<sp/>harmonic<sp/>springs<sp/>of<sp/>specified<sp/>spring<sp/>constant<sp/>and<sp/>rest<sp/>length</highlight></codeline>
<codeline><highlight class="normal">between<sp/>specific<sp/>particle<sp/>pairs.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**<sp/>calling<sp/>functions<sp/>to<sp/>add,<sp/>remove,<sp/>or<sp/>modify<sp/>bonds<sp/>between<sp/>particle</highlight></codeline>
<codeline><highlight class="normal">pairs<sp/>typically<sp/>**changes<sp/>the<sp/>particle<sp/>types**<sp/>associated<sp/>with<sp/>each<sp/>member<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">pair.<sp/>Therefore,<sp/>it<sp/>is<sp/>best<sp/>to<sp/>use<sp/>bond<sp/>functions<sp/>after<sp/>all<sp/>particle<sp/>type<sp/>and</highlight></codeline>
<codeline><highlight class="normal">potential<sp/>assignments<sp/>have<sp/>been<sp/>completed<sp/>(the<sp/>bond<sp/>functions<sp/>will<sp/>preserve</highlight></codeline>
<codeline><highlight class="normal">type<sp/>interactions<sp/>through<sp/>the<sp/>particle<sp/>reassignment).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Interactions<sp/>and<sp/>bonds<sp/>within<sp/>superparticles</highlight></codeline>
<codeline><highlight class="normal">Interactions<sp/>and<sp/>bonds<sp/>have<sp/>a<sp/>special<sp/>meaning<sp/>in<sp/>the<sp/>context<sp/>of</highlight></codeline>
<codeline><highlight class="normal">[superparticles](#md-superparticles).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>pairwise<sp/>*interaction*<sp/>can<sp/>be<sp/>defined</highlight></codeline>
<codeline><highlight class="normal">between<sp/>two<sp/>particle<sp/>subtypes<sp/>\c<sp/>p1<sp/>and<sp/>\c<sp/>p2<sp/>within<sp/>a<sp/>superparticle<sp/>type</highlight></codeline>
<codeline><highlight class="normal">\c<sp/>spt;<sp/>this<sp/>interaction<sp/>will<sp/>then<sp/>be<sp/>present<sp/>in<sp/>all<sp/>copies<sp/>of<sp/>\c<sp/>spt<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">system.<sp/>The<sp/>pair<sp/>potentials<sp/>and<sp/>interactions<sp/>are<sp/>shared<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal">ordinary<sp/>particles<sp/>(i.e.<sp/>the<sp/>same<sp/>libraries<sp/>and<sp/>indices<sp/>are<sp/>used),<sp/>but<sp/>the<sp/>\c</highlight></codeline>
<codeline><highlight class="normal">add/mod/mad_typeinteraction()<sp/>functions<sp/>described<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">section<sp/>on<sp/>[interactions](#md-interactiondef)<sp/>are<sp/>replaced<sp/>by<sp/>the<sp/>following</highlight></codeline>
<codeline><highlight class="normal">functions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_sp_interaction(ui<sp/>spt,<sp/>ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>iidx)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_sp_interaction(ui<sp/>spt,<sp/>ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>pidx,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_sp_interaction(ui<sp/>spt,<sp/>ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>pidx,<sp/>ldf<sp/>rco,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(and<sp/>similarly<sp/>for<sp/>\c<sp/>mod_sp_interaction<sp/>and<sp/>\c<sp/>mad_sp_interaction).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>*bond*<sp/>within<sp/>a<sp/>superparticle<sp/>is<sp/>created<sp/>by<sp/>specifying<sp/>two<sp/>*ordinary*</highlight></codeline>
<codeline><highlight class="normal">particle<sp/>indices<sp/>(not<sp/>subtypes)<sp/>\c<sp/>p1<sp/>and<sp/>\c<sp/>p2<sp/>which<sp/>must<sp/>belong<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">same<sp/>superparticle.<sp/>An<sp/>interaction<sp/>is<sp/>then<sp/>created<sp/>between<sp/>these<sp/>two</highlight></codeline>
<codeline><highlight class="normal">particles,<sp/>which<sp/>only<sp/>exists<sp/>in<sp/>that<sp/>particular<sp/>superparticle<sp/>instance,<sp/>making</highlight></codeline>
<codeline><highlight class="normal">it<sp/>distinct<sp/>from<sp/>all<sp/>other<sp/>superparticles<sp/>in<sp/>the<sp/>system.<sp/>Successful</highlight></codeline>
<codeline><highlight class="normal">superparticle<sp/>bond<sp/>creation<sp/>always</highlight></codeline>
<codeline><highlight class="normal">gives<sp/>rise<sp/>to<sp/>a<sp/>new<sp/>superparticle<sp/>type<sp/>specific<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">superparticle<sp/>instance<sp/>that<sp/>has<sp/>been<sp/>targeted.<sp/>See<sp/>the<sp/>following<sp/>functions<sp/>for</highlight></codeline>
<codeline><highlight class="normal">more<sp/>details:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_sp_bond(ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>iidx)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_sp_bond(ui<sp/>p1,<sp/>ui<sp/>p2,<sp/>ui<sp/>pidx,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(and<sp/>similarly<sp/>for<sp/>\c<sp/>mod_sp_bond<sp/>and<sp/>\c<sp/>mad_sp_bond).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finally<sp/>the<sp/>functions<sp/>md&lt;dim&gt;::rem_sp_interaction()<sp/>and<sp/>md&lt;dim&gt;::rem_sp_bond()</highlight></codeline>
<codeline><highlight class="normal">remove<sp/>superparticle<sp/>interactions<sp/>and<sp/>bonds<sp/>respectively.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Non-conservative<sp/>forces</highlight></codeline>
<codeline><highlight class="normal">---------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Many<sp/>applications<sp/>of<sp/>molecular<sp/>dynamics<sp/>involve<sp/>forces<sp/>that<sp/>cannot<sp/>be<sp/>defined</highlight></codeline>
<codeline><highlight class="normal">as<sp/>gradients<sp/>of<sp/>[pair<sp/>potentials](#md-pairpotentialdef);<sp/>e.g.<sp/>dissipative<sp/>drag</highlight></codeline>
<codeline><highlight class="normal">on<sp/>a<sp/>particle.<sp/>We<sp/>use<sp/>the<sp/>\ref<sp/>forcetype<sp/>framework<sp/>to<sp/>define<sp/>such<sp/>forces<sp/>on</highlight></codeline>
<codeline><highlight class="normal">particles.<sp/>This<sp/>framework<sp/>is<sp/>completely<sp/>general,<sp/>and<sp/>can<sp/>be<sp/>used<sp/>to<sp/>define<sp/>any</highlight></codeline>
<codeline><highlight class="normal">number<sp/>of<sp/>operations<sp/>(not<sp/>restricted<sp/>to<sp/>force<sp/>calculation)<sp/>on<sp/>individual<sp/>particles<sp/>that<sp/>can<sp/>be<sp/>calculated<sp/>as<sp/>a<sp/>function</highlight></codeline>
<codeline><highlight class="normal">of<sp/>particle<sp/>positions,<sp/>velocities,<sp/>or<sp/>external<sp/>parameters.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>with<sp/>conservative<sp/>forces,<sp/>a<sp/>distinction<sp/>is<sp/>to<sp/>be<sp/>made<sp/>between<sp/>*external</highlight></codeline>
<codeline><highlight class="normal">force<sp/>functions*<sp/>and<sp/>*forcetypes*,<sp/>which<sp/>are<sp/>the<sp/>equivalent<sp/>of<sp/>*pair</highlight></codeline>
<codeline><highlight class="normal">potentials*<sp/>and<sp/>*type<sp/>interactions*<sp/>respectively.<sp/>Information<sp/>about<sp/>external</highlight></codeline>
<codeline><highlight class="normal">force<sp/>functions<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>md&lt;dim&gt;::f<sp/>structure,<sp/>whereas<sp/>the<sp/>forcetypes</highlight></codeline>
<codeline><highlight class="normal">deriving<sp/>from<sp/>these<sp/>force<sp/>functions<sp/><sp/>are<sp/>stored<sp/>in<sp/>the<sp/><sp/><sp/>md&lt;dim&gt;::network</highlight></codeline>
<codeline><highlight class="normal">structure<sp/>(specifically<sp/>\c<sp/>md&lt;dim&gt;::network.forces<sp/>and</highlight></codeline>
<codeline><highlight class="normal">\c<sp/>md&lt;dim&gt;::network.forcelibrary).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>External<sp/>force<sp/>functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>\ref<sp/>forcetype<sp/>framework<sp/>requires<sp/>operations<sp/>on<sp/>particles<sp/>to<sp/>be<sp/>represented</highlight></codeline>
<codeline><highlight class="normal">as<sp/>*external<sp/>force<sp/>functions*,<sp/>which<sp/>live<sp/>outside<sp/>the<sp/>\c<sp/>md&lt;dim&gt;()<sp/>structure</highlight></codeline>
<codeline><highlight class="normal">and<sp/>fits<sp/>the<sp/>following<sp/>prototype:</highlight></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;ui<sp/>dim&gt;<sp/>void<sp/>my_external_force(ui<sp/>i,<sp/>vector&lt;ui&gt;<sp/>&amp;partners,<sp/>vector&lt;ldf&gt;<sp/>&amp;parameters,<sp/>void<sp/>*sys)<sp/>{...}</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
<codeline><highlight class="normal">where<sp/>\c<sp/>i<sp/>is<sp/>a<sp/>particle<sp/>index,<sp/>\c<sp/>partners<sp/>points<sp/>to<sp/>a<sp/>vector<sp/>of<sp/>particle</highlight></codeline>
<codeline><highlight class="normal">indices<sp/>which<sp/>might<sp/>influence<sp/>particle<sp/>\c<sp/>i,<sp/>and<sp/>\c<sp/>parameters<sp/>can<sp/>be</highlight></codeline>
<codeline><highlight class="normal">specified.<sp/>During<sp/>execution,<sp/>a<sp/>pointer<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">\ref<sp/>md<sp/>object<sp/>itself<sp/>is<sp/>passed<sp/>to<sp/>the<sp/>external</highlight></codeline>
<codeline><highlight class="normal">force<sp/>function<sp/>as<sp/>the<sp/>last<sp/>argument.<sp/>Under<sp/>normal<sp/>use,<sp/>a<sp/>call<sp/>to<sp/>\c<sp/>my_external_force()</highlight></codeline>
<codeline><highlight class="normal">function<sp/>would<sp/>compute<sp/>a<sp/>force<sp/>on<sp/>particle<sp/>\c<sp/>i<sp/>that<sp/>is<sp/>a<sp/>function</highlight></codeline>
<codeline><highlight class="normal">of<sp/>the<sp/>positions<sp/>and<sp/>velocities<sp/>of<sp/>\c<sp/>i<sp/>and<sp/>\c<sp/>partners,<sp/>and<sp/>update<sp/>the<sp/>force</highlight></codeline>
<codeline><highlight class="normal">vector<sp/>\c<sp/>((md&lt;dim&gt;*)<sp/>sys)-&gt;particles[i].F<sp/>with<sp/>this<sp/>force.</highlight></codeline>
<codeline><highlight class="normal">However,<sp/>the<sp/>external<sp/>force<sp/>function<sp/>is<sp/>not<sp/>restricted<sp/>to<sp/>calculating<sp/>and</highlight></codeline>
<codeline><highlight class="normal">updating<sp/>forces,<sp/>but<sp/>could<sp/>modify<sp/>the<sp/>\ref<sp/>md<sp/>object<sp/>in<sp/>any<sp/>way.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>macro<sp/>\ref<sp/>SYS<sp/>eases<sp/>the<sp/>referencing<sp/>of<sp/>member<sp/>variables<sp/>within<sp/>\c<sp/>sys</highlight></codeline>
<codeline><highlight class="normal">within<sp/>the<sp/>\c<sp/>my_external_force()<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>instance,<sp/><sp/>\c<sp/>((md&lt;dim&gt;*)<sp/>sys)-&gt;particles[i].F<sp/>can<sp/>be<sp/>rewritten<sp/>as<sp/>\c</highlight></codeline>
<codeline><highlight class="normal">SYS-&gt;particles[i].F.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Once<sp/>an<sp/>external<sp/>force<sp/>function<sp/>has<sp/>been<sp/>defined,<sp/>a<sp/>function<sp/>pointer<sp/>pointing<sp/>to</highlight></codeline>
<codeline><highlight class="normal">it<sp/>is<sp/>added<sp/>to<sp/>the<sp/>list<sp/>of<sp/>external<sp/>force<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">&lt;tt&gt;md&lt;dim&gt;::f.extforces&lt;/tt&gt;<sp/>through<sp/>a<sp/>call<sp/>to<sp/>the<sp/>externalforces::add()</highlight></codeline>
<codeline><highlight class="normal">member<sp/>function<sp/>of<sp/>md&lt;dim&gt;::f.<sp/>Each<sp/>added<sp/>external<sp/>force<sp/>function<sp/>is<sp/>given<sp/>a<sp/>unique<sp/>index,</highlight></codeline>
<codeline><highlight class="normal">which<sp/>is<sp/>the<sp/>return<sp/>value<sp/>of<sp/>\c<sp/>md&lt;dim&gt;::f.add().<sp/>The</highlight></codeline>
<codeline><highlight class="normal">following<sp/>command<sp/>adds<sp/>the<sp/>function<sp/>\c<sp/>my_external_force()<sp/>to<sp/>an<sp/>&lt;tt&gt;md\&lt;dim\&gt;&lt;/tt&gt;<sp/>instance<sp/>named<sp/>\c<sp/>sys,<sp/>and<sp/>stores<sp/>the</highlight></codeline>
<codeline><highlight class="normal">associated<sp/>index<sp/>in<sp/>\c<sp/>fidx:</highlight></codeline>
<codeline><highlight class="normal">\code{.cpp}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>md&lt;dim&gt;<sp/>sys;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ui<sp/>fidx<sp/>=<sp/>sys.f.add(my_external_force&lt;dim&gt;);</highlight></codeline>
<codeline><highlight class="normal">\endcode</highlight></codeline>
<codeline><highlight class="normal">*Particular*<sp/>forcetypes<sp/>are</highlight></codeline>
<codeline><highlight class="normal">obtained<sp/>by<sp/>combining<sp/>an<sp/>external<sp/>force<sp/>function<sp/>indexed<sp/>by<sp/>\c<sp/>fidx<sp/>with<sp/>a<sp/>specific<sp/>set<sp/>of</highlight></codeline>
<codeline><highlight class="normal">parameters,<sp/>using<sp/>the<sp/>md&lt;dim&gt;::add_forcetype<sp/>function</highlight></codeline>
<codeline><highlight class="normal">catalogued<sp/>in<sp/>the<sp/>[following<sp/>subsection](#md-forcetypedef).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>Predefined<sp/>external<sp/>force<sp/>functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">\c<sp/>libmd<sp/>comes<sp/>with<sp/>two<sp/>predefined<sp/>external<sp/>force<sp/>functions,<sp/>which<sp/>illustrate</highlight></codeline>
<codeline><highlight class="normal">the<sp/>concept.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>\ref<sp/>DAMPING()<sp/>function<sp/>updates<sp/>\c<sp/>SYS-&gt;particles[i].F<sp/>with<sp/>a<sp/>viscous<sp/>drag<sp/>force<sp/>that<sp/>is<sp/>a</highlight></codeline>
<codeline><highlight class="normal">function<sp/>solely<sp/>of<sp/>the<sp/>velocity<sp/>of<sp/>particle<sp/>\c<sp/>i.<sp/>The<sp/>corresponding<sp/>force</highlight></codeline>
<codeline><highlight class="normal">index<sp/>is<sp/>\c<sp/>EXTFORCE::DAMPING.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>\ref<sp/>DISSIPATION()<sp/>function<sp/>updates<sp/>\c<sp/>SYS-&gt;particles[i].F<sp/>with<sp/>a<sp/>force<sp/>proportional<sp/>to</highlight></codeline>
<codeline><highlight class="normal">the<sp/>velocity<sp/>difference<sp/>between<sp/>\c<sp/>i<sp/>and<sp/>each<sp/>particle<sp/>index<sp/>in<sp/>\c<sp/>particles.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>function<sp/>is<sp/>indexed<sp/>by<sp/>EXTFORCE::DISSIPATION.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Forcetypes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{#md-forcetypedef}</highlight></codeline>
<codeline><highlight class="normal">An<sp/>external<sp/>force<sp/>function<sp/>indexed<sp/>by<sp/>\c<sp/>fidx<sp/>is<sp/>combined</highlight></codeline>
<codeline><highlight class="normal">with<sp/>specific<sp/>values<sp/>of<sp/>parameters<sp/>and<sp/>a<sp/>specific<sp/>list<sp/>of<sp/>particles<sp/>associated</highlight></codeline>
<codeline><highlight class="normal">with<sp/>each<sp/>particle<sp/>to<sp/>create<sp/>distinct<sp/>\a<sp/>forcetypes,<sp/>which</highlight></codeline>
<codeline><highlight class="normal">are<sp/>instances<sp/>of<sp/>the<sp/>\ref<sp/>forcetype<sp/>structure.<sp/>These<sp/>are<sp/>stored<sp/>in</highlight></codeline>
<codeline><highlight class="normal">&lt;tt&gt;md&lt;dim&gt;::network.forcelibrary[]&lt;/tt&gt;,<sp/>a<sp/>vector<sp/>of<sp/>\ref<sp/>forcetype</highlight></codeline>
<codeline><highlight class="normal">instances.<sp/>Different<sp/>forcetypes<sp/>are<sp/>indexed<sp/>by<sp/>their<sp/>position<sp/>in<sp/>this<sp/>vector.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Entries<sp/>in<sp/>the<sp/>forcetype<sp/>library<sp/>are<sp/>added,<sp/>modified<sp/>and<sp/>removed<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">following<sp/>functions,<sp/>which<sp/>returns<sp/>a<sp/>\c<sp/>bool<sp/>indicating<sp/>the<sp/>success<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">operation:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::add_forcetype(ui<sp/>fidx,<sp/>vector&lt;vector&lt;ui&gt;&gt;<sp/>&amp;partnerlist,<sp/>vector&lt;ldf&gt;</highlight></codeline>
<codeline><highlight class="normal">&amp;parameters)<sp/>creates<sp/>a<sp/>forcetype<sp/>from<sp/>the<sp/>external<sp/>force<sp/>function<sp/>indexed<sp/>by<sp/>\c<sp/>fidx<sp/>with<sp/>the<sp/>given</highlight></codeline>
<codeline><highlight class="normal">parameters.<sp/>The<sp/>\c<sp/>partnerlist<sp/>is<sp/>either<sp/>empty,<sp/>or<sp/>points<sp/>to<sp/>a<sp/>list<sp/>of<sp/>lists</highlight></codeline>
<codeline><highlight class="normal">of<sp/>partner<sp/>indices,<sp/>so<sp/>that<sp/>\c<sp/>(&amp;partnerlist)[i]<sp/>contains<sp/>the<sp/>partners<sp/>of</highlight></codeline>
<codeline><highlight class="normal">particle<sp/>\c<sp/>i<sp/>to<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>external<sp/>force<sp/>function.<sp/>The<sp/>return<sp/>value<sp/>is</highlight></codeline>
<codeline><highlight class="normal">the<sp/>index<sp/>of<sp/>the<sp/>forcetype<sp/>in</highlight></codeline>
<codeline><highlight class="normal">&lt;tt&gt;md&lt;dim&gt;::network.forcelibrary[]&lt;/tt&gt;,<sp/>which<sp/>we<sp/>will<sp/>call<sp/>\c<sp/>ftype.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::mod_forcetype(ui<sp/>ftype,<sp/>ui<sp/>fidx,<sp/>vector&lt;vector&lt;ui&gt;&gt;<sp/>&amp;partnerlist,</highlight></codeline>
<codeline><highlight class="normal">vector&lt;ldf&gt;<sp/>&amp;parameters)<sp/>replaces<sp/>the<sp/>external<sp/>force<sp/>function<sp/>and<sp/>partner<sp/>list</highlight></codeline>
<codeline><highlight class="normal">of<sp/>the<sp/>forcetype<sp/>indexed<sp/>by<sp/>\c<sp/>ftype.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::rem_forcetype(ui<sp/>ftype)<sp/>removes<sp/>the<sp/>interaction<sp/>indexed<sp/>by</highlight></codeline>
<codeline><highlight class="normal">\c<sp/>ftype.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Once<sp/>a<sp/>forcetype<sp/>entry<sp/>has<sp/>been<sp/>created,<sp/>it<sp/>still<sp/>needs<sp/>to<sp/>be<sp/>assigned<sp/>to<sp/>a</highlight></codeline>
<codeline><highlight class="normal">particle<sp/>to<sp/>influence<sp/>the<sp/>dynamics<sp/>of<sp/>that<sp/>particle.<sp/>Forcetype<sp/>assignment<sp/>is<sp/>handled<sp/>by<sp/>the</highlight></codeline>
<codeline><highlight class="normal">following<sp/>set<sp/>of<sp/>functions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::assign_forcetype(ui<sp/>i,<sp/>ui<sp/>ftype)<sp/>assigns<sp/>\c<sp/>ftype<sp/>to<sp/>particle<sp/>\c<sp/>i.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::assign_all_forcetype(ui<sp/>ftype)<sp/>assigns<sp/>\c<sp/>ftype<sp/>to<sp/>all<sp/>particles.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>md&lt;dim&gt;::unassign_forcetype(ui<sp/>ftype)<sp/>and</highlight></codeline>
<codeline><highlight class="normal">md&lt;dim&gt;::unassign_all_forcetype(ui<sp/>ftype,<sp/>ui<sp/>i)<sp/>remove<sp/>the<sp/>assignment<sp/>of<sp/>\c<sp/>ftype</highlight></codeline>
<codeline><highlight class="normal">from<sp/>one<sp/>or<sp/>all<sp/>particles.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finally,<sp/>the<sp/>function<sp/>md&lt;dim&gt;::clear_all_assigned_forcetype()<sp/>is<sp/>useful<sp/>to</highlight></codeline>
<codeline><highlight class="normal">clear<sp/>all<sp/>assignments<sp/>to<sp/>forcetypes<sp/>from<sp/>all<sp/>particles,<sp/>although<sp/>it<sp/>does<sp/>not</highlight></codeline>
<codeline><highlight class="normal">remove<sp/>the<sp/>forcetypes<sp/>themselves.</highlight></codeline>
    </programlisting>
    <location file="doc/markdown/interactions.md"/>
  </compounddef>
</doxygen>
