.TH "t_error" 3 "Tue Sep 29 2020" "Version -0." "libmd" \" -*- nroff -*-
.ad l
.nh
.SH NAME
t_error \- This structure handles errors/warnings/debug levels\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <libmd\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBt_error\fP ()"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fB~t_error\fP ()"
.br
.RI "Destructor (to close the files) "
.ti -1c
.RI "void \fBset_error_file\fP (const char *fname)"
.br
.RI "Sets the error output file\&. "
.ti -1c
.RI "void \fBset_warning_file\fP (const char *fname)"
.br
.RI "Sets the warning output file\&. "
.ti -1c
.RI "void \fBset_debug_1_file\fP (const char *fname)"
.br
.RI "Sets the debug[1] output file\&. "
.ti -1c
.RI "void \fBset_debug_2_file\fP (const char *fname)"
.br
.RI "Sets the debug[2] output file\&. "
.ti -1c
.RI "void \fBset_debug_3_file\fP (const char *fname)"
.br
.RI "Sets the debug[3] output file\&. "
.ti -1c
.RI "void \fBset_debug_timer_file\fP (const char *fname)"
.br
.RI "Sets the debug[timer] output file\&. "
.ti -1c
.RI "void \fBprint_error\fP (char *buffer)"
.br
.RI "Prints a error to the error output file (for internal use) "
.ti -1c
.RI "void \fBprint_warning\fP (char *buffer)"
.br
.RI "Prints a warning to the warning output file (for internal use) "
.ti -1c
.RI "void \fBprint_debug_1\fP (char *buffer)"
.br
.RI "Prints debug[1] message to the debug[1] output file (for internal use) "
.ti -1c
.RI "void \fBprint_debug_2\fP (char *buffer)"
.br
.RI "Prints debug[2] message to the debug[2] output file (for internal use) "
.ti -1c
.RI "void \fBprint_debug_3\fP (char *buffer)"
.br
.RI "Prints debug[3] message to the debug[3] output file (for internal use) "
.ti -1c
.RI "void \fBprint_debug_timer\fP (char *buffer)"
.br
.RI "Prints debug[timer] message to the debug[timer] output file (for internal use) "
.ti -1c
.RI "void \fBterminate\fP (\fBui\fP term)"
.br
.RI "Terminate if termlevel allows it (for internal use) "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBui\fP \fBterm_level\fP"
.br
.RI "Terminate level for libmd\&. The default value is 1\&. "
.ti -1c
.RI "FILE * \fBerror_file\fP"
.br
.RI "libmd error output file (default stderr) "
.ti -1c
.RI "FILE * \fBwarning_file\fP"
.br
.RI "libmd warning output file (default stderr) "
.ti -1c
.RI "FILE * \fBdebug_1_file\fP"
.br
.RI "libmd debug[1] output file (default stdout) "
.ti -1c
.RI "FILE * \fBdebug_2_file\fP"
.br
.RI "libmd debug[2] output file (default stdout) "
.ti -1c
.RI "FILE * \fBdebug_3_file\fP"
.br
.RI "libmd debug[3] output file (default stdout) "
.ti -1c
.RI "FILE * \fBdebug_timer_file\fP"
.br
.RI "libmd debug[timer] output file (default stdout) "
.in -1c
.SH "Detailed Description"
.PP 
This structure handles errors/warnings/debug levels\&. 
.PP
Definition at line 104 of file libmd\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "t_error::t_error ()"

.PP
Constructor\&. 
.PP
Definition at line 13 of file error\&.libmd\&.cc\&.
.PP
.nf
14 {
15     #ifdef FE
16     #ifdef FE_ALL_EXCEPT
17     feenableexcept(FE_ALL_EXCEPT);
18     #elif defined FE_EXCEPT
19     feenableexcept(FE_DIVBYZERO|FE_INVALID|FE_OVERFLOW);
20     #elif defined FE_LOW_EXCEPT
21     feenableexcept(FE_DIVBYZERO);
22     #else
23     feclearexcept(FE_ALL_EXCEPT);
24     #endif
25     #endif
26     term_level=1;
27     error_file=stderr;
28     warning_file=stderr;
29     debug_1_file=stdout;
30     debug_2_file=stdout;
31     debug_3_file=stdout;
32     debug_timer_file=stdout;
33     TicToc();
34 }
.fi
.PP
References debug_1_file, debug_2_file, debug_3_file, debug_timer_file, error_file, term_level, TicToc(), and warning_file\&.
.SS "t_error::~t_error ()"

.PP
Destructor (to close the files) 
.PP
Definition at line 36 of file error\&.libmd\&.cc\&.
.PP
.nf
37 {
38     fclose(error_file);
39     fclose(warning_file);
40     fclose(debug_1_file);
41     fclose(debug_2_file);
42     fclose(debug_3_file);
43     fclose(debug_timer_file);
44 }
.fi
.PP
References debug_1_file, debug_2_file, debug_3_file, debug_timer_file, error_file, and warning_file\&.
.SH "Member Function Documentation"
.PP 
.SS "void t_error::print_debug_1 (char * buffer)"

.PP
Prints debug[1] message to the debug[1] output file (for internal use) 
.PP
Definition at line 100 of file error\&.libmd\&.cc\&.
.PP
.nf
101 {
102     fprintf(debug_1_file,"%s\n",buffer);
103     terminate(4);
104 }
.fi
.PP
References debug_1_file, and terminate()\&.
.SS "void t_error::print_debug_2 (char * buffer)"

.PP
Prints debug[2] message to the debug[2] output file (for internal use) 
.PP
Definition at line 106 of file error\&.libmd\&.cc\&.
.PP
.nf
107 {
108     fprintf(debug_2_file,"%s\n",buffer);
109     terminate(3);
110 }
.fi
.PP
References debug_2_file, and terminate()\&.
.SS "void t_error::print_debug_3 (char * buffer)"

.PP
Prints debug[3] message to the debug[3] output file (for internal use) 
.PP
Definition at line 112 of file error\&.libmd\&.cc\&.
.PP
.nf
113 {
114     fprintf(debug_3_file,"%s\n",buffer);
115     terminate(2);
116 }
.fi
.PP
References debug_3_file, and terminate()\&.
.SS "void t_error::print_debug_timer (char * buffer)"

.PP
Prints debug[timer] message to the debug[timer] output file (for internal use) 
.PP
Definition at line 118 of file error\&.libmd\&.cc\&.
.PP
.nf
119 {
120     fprintf(debug_timer_file,"%s\n",buffer);
121     terminate(5);
122 }
.fi
.PP
References debug_timer_file, and terminate()\&.
.SS "void t_error::print_error (char * buffer)"

.PP
Prints a error to the error output file (for internal use) 
.PP
Definition at line 88 of file error\&.libmd\&.cc\&.
.PP
.nf
89 {
90     fprintf(error_file,"%s\n",buffer);
91     terminate(0);
92 }
.fi
.PP
References error_file, and terminate()\&.
.SS "void t_error::print_warning (char * buffer)"

.PP
Prints a warning to the warning output file (for internal use) 
.PP
Definition at line 94 of file error\&.libmd\&.cc\&.
.PP
.nf
95 {
96     fprintf(warning_file,"%s\n",buffer);
97     terminate(1);
98 }
.fi
.PP
References terminate(), and warning_file\&.
.SS "void t_error::set_debug_1_file (const char * fname)"

.PP
Sets the debug[1] output file\&. 
.PP
Definition at line 60 of file error\&.libmd\&.cc\&.
.PP
.nf
61 {
62     if(!strcmp(fname,"stdout")) debug_1_file=stdout;
63     else if(!strcmp(fname,"stderr")) debug_1_file=stderr;
64     else debug_1_file=fopen(fname,"w");
65 }
.fi
.PP
References debug_1_file\&.
.SS "void t_error::set_debug_2_file (const char * fname)"

.PP
Sets the debug[2] output file\&. 
.PP
Definition at line 67 of file error\&.libmd\&.cc\&.
.PP
.nf
68 {
69     if(!strcmp(fname,"stdout")) debug_2_file=stdout;
70     else if(!strcmp(fname,"stderr")) debug_2_file=stderr;
71     else debug_2_file=fopen(fname,"w");
72 }
.fi
.PP
References debug_2_file\&.
.SS "void t_error::set_debug_3_file (const char * fname)"

.PP
Sets the debug[3] output file\&. 
.PP
Definition at line 74 of file error\&.libmd\&.cc\&.
.PP
.nf
75 {
76     if(!strcmp(fname,"stdout")) debug_3_file=stdout;
77     else if(!strcmp(fname,"stderr")) debug_3_file=stderr;
78     else debug_3_file=fopen(fname,"w");
79 }
.fi
.PP
References debug_3_file\&.
.SS "void t_error::set_debug_timer_file (const char * fname)"

.PP
Sets the debug[timer] output file\&. 
.PP
Definition at line 81 of file error\&.libmd\&.cc\&.
.PP
.nf
82 {
83     if(!strcmp(fname,"stdout")) debug_timer_file=stdout;
84     else if(!strcmp(fname,"stderr")) debug_timer_file=stderr;
85     else debug_timer_file=fopen(fname,"w");
86 }
.fi
.PP
References debug_timer_file\&.
.SS "void t_error::set_error_file (const char * fname)"

.PP
Sets the error output file\&. 
.PP
Definition at line 46 of file error\&.libmd\&.cc\&.
.PP
.nf
47 {
48     if(!strcmp(fname,"stdout")) error_file=stdout;
49     else if(!strcmp(fname,"stderr")) error_file=stderr;
50     else error_file=fopen(fname,"w");
51 }
.fi
.PP
References error_file\&.
.SS "void t_error::set_warning_file (const char * fname)"

.PP
Sets the warning output file\&. 
.PP
Definition at line 53 of file error\&.libmd\&.cc\&.
.PP
.nf
54 {
55     if(!strcmp(fname,"stdout")) warning_file=stdout;
56     else if(!strcmp(fname,"stderr")) warning_file=stderr;
57     else warning_file=fopen(fname,"w");
58 }
.fi
.PP
References warning_file\&.
.SS "void t_error::terminate (\fBui\fP term)"

.PP
Terminate if termlevel allows it (for internal use) 
.PP
Definition at line 124 of file error\&.libmd\&.cc\&.
.PP
.nf
125 {
126     if(term<term_level) exit(EXIT_FAILURE);
127 }
.fi
.PP
References term_level\&.
.SH "Member Data Documentation"
.PP 
.SS "FILE* t_error::debug_1_file"

.PP
libmd debug[1] output file (default stdout) 
.PP
Definition at line 109 of file libmd\&.h\&.
.SS "FILE* t_error::debug_2_file"

.PP
libmd debug[2] output file (default stdout) 
.PP
Definition at line 110 of file libmd\&.h\&.
.SS "FILE* t_error::debug_3_file"

.PP
libmd debug[3] output file (default stdout) 
.PP
Definition at line 111 of file libmd\&.h\&.
.SS "FILE* t_error::debug_timer_file"

.PP
libmd debug[timer] output file (default stdout) 
.PP
Definition at line 112 of file libmd\&.h\&.
.SS "FILE* t_error::error_file"

.PP
libmd error output file (default stderr) 
.PP
Definition at line 107 of file libmd\&.h\&.
.SS "\fBui\fP t_error::term_level"

.PP
Terminate level for libmd\&. The default value is 1\&. 
.PP
Definition at line 106 of file libmd\&.h\&.
.SS "FILE* t_error::warning_file"

.PP
libmd warning output file (default stderr) 
.PP
Definition at line 108 of file libmd\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libmd from the source code\&.
